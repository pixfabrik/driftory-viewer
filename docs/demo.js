(function () {
  'use strict';

  const alreadyCalledSources = [];
  const awaitingCallbacks = {};

  const addCallback = (src, callback) => {
    if (awaitingCallbacks[src]) {
      awaitingCallbacks[src].push(callback);
    } else {
      awaitingCallbacks[src] = [callback];
    }
  };

  function loadJS(src, callback) {
    if (alreadyCalledSources.indexOf(src) < 0) {
      alreadyCalledSources.push(src);
      const script = document.createElement('script');
      script.src = src;

      script.onload = () => {
        addCallback(src, callback);

        for (const key in awaitingCallbacks) {
          awaitingCallbacks[key].forEach(cb => cb());
        }
      };

      document.head.appendChild(script);
    } else {
      addCallback(src, callback);
    }
  }

  let OpenSeadragon;
  class Driftory {
    constructor(args) {
      loadJS('https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js', () => {
        OpenSeadragon = window.OpenSeadragon;
        this.initialize(args);
      });
    }

    initialize({
      container,
      prefixUrl
    }) {
      this.container = container;
      this.frameIndex = -1;
      this.frames = [];
      this.viewer = OpenSeadragon({
        element: container,
        prefixUrl: prefixUrl,
        showNavigationControl: false,
        maxZoomPixelRatio: 10
      });
    }

    openComic(comic) {
      this.container.style.backgroundColor = comic.body.backgroundColor;
      this.frames = comic.body.frames;
      comic.body.items.forEach((item, i) => {
        var success;

        if (i === 0) {
          success = () => this.goToFrame(0);
        }

        this.viewer.addTiledImage({
          x: item.x - item.width / 2,
          y: item.y - item.height / 2,
          width: item.width,
          success: success,
          tileSource: {
            type: 'legacy-image-pyramid',
            levels: [{
              url: item.url,
              width: item.width,
              height: item.height
            }]
          }
        });
      });
    }

    goToFrame(index) {
      var frame = this.frames[index];
      var bufferFactor = 0.2;
      var box = new OpenSeadragon.Rect(frame.x - frame.width / 2, frame.y - frame.height / 2, frame.width, frame.height);
      box.width *= 1 + bufferFactor;
      box.height *= 1 + bufferFactor;
      box.x -= frame.width * bufferFactor * 0.5;
      box.y -= frame.height * bufferFactor * 0.5;
      this.viewer.viewport.fitBounds(box);
      this.frameIndex = index;
    }

    getFrameIndex() {
      return this.frameIndex;
    }

    getFrameCount() {
      return this.frames.length;
    }

  }

  var nextButton, previousButton; // ----------

  function init() {
    var driftory = new Driftory({
      container: document.querySelector('.driftory-viewer-container'),
      prefixUrl: 'https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/images/'
    });
    nextButton = document.querySelector('.next-button');
    previousButton = document.querySelector('.previous-button');
    nextButton.addEventListener('click', function () {
      var index = driftory.getFrameIndex();
      index = (index + 1) % driftory.getFrameCount();
      driftory.goToFrame(index);
    });
    previousButton.addEventListener('click', function () {
      var index = driftory.getFrameIndex();
      index = index === 0 ? driftory.getFrameCount() - 1 : index - 1;
      driftory.goToFrame(index);
    });
    fetch('comic.json').then(function (response) {
      if (!response.ok) {
        throw new Error('bad');
      }

      return response.json();
    }).then(function (json) {
      // console.log(json);
      driftory.openComic(json.comic);
    });
  } // ----------
  // Kick it all off!


  init();

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,