{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@dan503/load-js/index.js","src/demo/demo.ts","src/library/driftory.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar alreadyCalledScripts = [];\r\nvar allScripts = {};\r\nvar defaultScript = { hasLoaded: false, callbacks: [] };\r\nvar addCallback = function (src, callback) {\r\n    var script = allScripts[src];\r\n    if (!script)\r\n        return;\r\n    if (script.hasLoaded) {\r\n        // If the script has already been previously loaded, just run the callback immediately\r\n        callback();\r\n    }\r\n    else {\r\n        if (script.callbacks.length > 0) {\r\n            script.callbacks.push(callback);\r\n        }\r\n        else {\r\n            script.callbacks = [callback];\r\n        }\r\n    }\r\n};\r\nfunction loadJS(src, callback) {\r\n    var script = allScripts[src] || defaultScript;\r\n    allScripts[src] = script;\r\n    if (alreadyCalledScripts.indexOf(src) < 0) {\r\n        alreadyCalledScripts.push(src);\r\n        var $scriptElem = document.createElement('script');\r\n        $scriptElem.setAttribute('class', 'load-js-script');\r\n        $scriptElem.src = src;\r\n        $scriptElem.onload = function () {\r\n            addCallback(src, callback);\r\n            var updatedScript = allScripts[src];\r\n            if (updatedScript) {\r\n                updatedScript.hasLoaded = true;\r\n            }\r\n            for (var thisSource in allScripts) {\r\n                var thisScript = allScripts[thisSource] || defaultScript;\r\n                thisScript.callbacks.forEach(function (cb) { return cb(); });\r\n            }\r\n        };\r\n        document.head.appendChild($scriptElem);\r\n    }\r\n    else {\r\n        addCallback(src, callback);\r\n    }\r\n}\r\nexports.default = loadJS;\r\n","import Driftory from '../library/driftory';\n\nconst comicNames = [\n  'comic.json',\n  'comic-no-frames.json'\n  // 'comic-hide-until-frame.json'\n];\n\nlet comicIndex = 0;\nlet driftory: Driftory;\n\n// ----------\nfunction openComic() {\n  const comicName = comicNames[comicIndex];\n  fetch(comicName)\n    .then((response) => {\n      if (!response.ok) {\n        console.error(response);\n        throw new Error('Failed to load ' + comicName);\n      }\n\n      return response.json();\n    })\n    .then((json) => {\n      // console.log(json);\n      driftory.openComic(json);\n    })\n    .catch((error) => console.error(error));\n}\n\n// ----------\ndocument.addEventListener('DOMContentLoaded', () => {\n  // We need to cast this to HTMLDivElement because that's what Driftory needs.\n  const container = document.querySelector('.driftory-viewer-container') as HTMLDivElement | null;\n\n  const startButton = document.querySelector('.start-button');\n  const endButton = document.querySelector('.end-button');\n  const previousButton = document.querySelector('.previous-button');\n  const nextButton = document.querySelector('.next-button');\n  const hideButton = document.querySelector('.hide-button');\n  const navButton = document.querySelector('.nav-button');\n  const nextComicButton = document.querySelector('.next-comic-button');\n  const closeComicButton = document.querySelector('.close-comic-button');\n  const frameInfo = document.querySelector('.frame-info');\n\n  if (!container) {\n    console.error('Cannot find viewer container');\n    return;\n  }\n\n  driftory = new Driftory({\n    container,\n    onComicLoad: () => {\n      console.log('loaded!');\n    },\n    onFrameChange: ({ frameIndex = 0, isLastFrame }) => {\n      if (frameInfo) {\n        let text = `Frame ${frameIndex + 1}`;\n        if (isLastFrame) {\n          text += ' (last frame!)';\n        }\n\n        frameInfo.textContent = text;\n      }\n    },\n    onNoNext: () => {\n      console.log('User trying to go past end');\n    },\n    onNoPrevious: () => {\n      console.log('User trying to go before beginning');\n    }\n  });\n\n  startButton?.addEventListener('click', () => {\n    driftory.goToFrame(0);\n  });\n\n  endButton?.addEventListener('click', () => {\n    driftory.goToFrame(driftory.getFrameCount() - 1);\n  });\n\n  previousButton?.addEventListener('click', () => {\n    driftory.goToPreviousFrame();\n  });\n\n  nextButton?.addEventListener('click', () => {\n    driftory.goToNextFrame();\n  });\n\n  hideButton?.addEventListener('click', () => {\n    container.classList.toggle('hide');\n  });\n\n  navButton?.addEventListener('click', () => {\n    const flag = !driftory.getNavEnabled();\n    driftory.setNavEnabled(flag);\n    navButton.textContent = flag ? 'disable nav' : 'enable nav';\n  });\n\n  nextComicButton?.addEventListener('click', () => {\n    comicIndex = (comicIndex + 1) % comicNames.length;\n    openComic();\n  });\n\n  closeComicButton?.addEventListener('click', () => {\n    driftory.closeComic();\n  });\n\n  openComic();\n});\n","import loadJs from '@dan503/load-js';\nimport { Comic } from './Comic.types';\nimport { OpenSeadragonType, ViewerType } from './openseadragon.types';\n\ninterface OsdRequest {\n  resolve: (value?: unknown) => void;\n  reject: (reason?: any) => void;\n}\n\nlet OpenSeadragon: OpenSeadragonType | undefined;\nlet osdRequest: OsdRequest | undefined;\n\ndeclare global {\n  interface Window {\n    OpenSeadragon: OpenSeadragonType;\n  }\n}\n\nconst osdPromise = new Promise((resolve, reject) => {\n  osdRequest = { resolve, reject };\n});\n\ninterface ImageItem {\n  hideUntilFrame?: number;\n  tiledImage?: OpenSeadragon.TiledImage;\n}\n\ntype Frame = OpenSeadragon.Rect;\ntype Container = HTMLElement;\ntype OnFrameChange = (params: { frameIndex: number; isLastFrame: boolean }) => void;\ntype OnComicLoad = (params: {}) => void;\ntype OnNoNext = (params: {}) => void;\ntype OnNoPrevious = (params: {}) => void;\n\nexport interface DriftoryArguments {\n  /** The HTML DOM element that the Driftory Comic will be rendered in.  */\n  container: Container;\n  /**\n   * This library has a dependency on the [OpenSeadragon](https://openseadragon.github.io/) library.\n   *\n   * By default, OpenSeadragon will be loaded from [the JS Deliver CDN](https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js)\n   * while initializing.\n   *\n   * To prevent this, you can use this parameter to provide your own instance of OpenSeaDragon instead.\n   *  */\n  OpenSeadragon?: OpenSeadragonType;\n  /** Called whenever driftory navigates to a new frame, whether via clicking, dragging, keys, or API. */\n  onFrameChange?: OnFrameChange;\n  /** Called when the comic has finished initializing. */\n  onComicLoad?: OnComicLoad;\n  /** Called when the user tries to navigate to the next frame in the sequence\n   *  but there are no frames left to navigate to. */\n  onNoNext?: OnNoNext;\n  /** Called when the user tries to navigate to the previous frame in the sequence\n   *  but there are no frames left to navigate to. */\n  onNoPrevious?: OnNoPrevious;\n}\n\nexport default class Driftory {\n  container: Container;\n  onFrameChange: OnFrameChange;\n  onComicLoad: OnComicLoad;\n  onNoNext: OnNoNext;\n  onNoPrevious: OnNoPrevious;\n  imageItems: Array<ImageItem> = [];\n  frames: Array<Frame> = [];\n  frameIndex: number = -1;\n  frameIndexHint: number = -1;\n  lastScrollTime: number = 0;\n  scrollDelay: number = 2000;\n  viewer?: ViewerType;\n  navEnabled: boolean = true;\n  comicLoaded: boolean = false;\n\n  // ----------\n  constructor(args: DriftoryArguments) {\n    this.container = args.container;\n    this.onFrameChange = args.onFrameChange || function () {};\n    this.onComicLoad = args.onComicLoad || function () {};\n    this.onNoNext = args.onNoNext || function () {};\n    this.onNoPrevious = args.onNoPrevious || function () {};\n\n    if (args.OpenSeadragon) {\n      OpenSeadragon = args.OpenSeadragon;\n      this._initialize(args);\n      osdRequest?.resolve();\n    } else {\n      // Note: loadJs only loads the file once, even if called multiple times, and always makes sure\n      // all of the callbacks are called.\n      loadJs(\n        'https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js',\n        () => {\n          OpenSeadragon = window.OpenSeadragon;\n          this._initialize(args);\n          osdRequest?.resolve();\n        }\n      );\n    }\n  }\n\n  // ----------\n  _initialize({ container }: DriftoryArguments) {\n    this.viewer =\n      OpenSeadragon &&\n      OpenSeadragon({\n        element: container,\n        showNavigationControl: false,\n        maxZoomPixelRatio: 10,\n        gestureSettingsMouse: {\n          clickToZoom: false\n        }\n      });\n\n    if (this.viewer) {\n      const frameHandler = () => {\n        if (!this.comicLoaded) {\n          return;\n        }\n\n        const frameIndex = this._figureFrameIndex(false);\n        if (frameIndex !== -1 && frameIndex !== this.frameIndex) {\n          this.frameIndex = frameIndex;\n          this._updateImageVisibility();\n\n          if (this.onFrameChange) {\n            this.onFrameChange({\n              frameIndex,\n              isLastFrame: frameIndex === this.getFrameCount() - 1\n            });\n          }\n        }\n      };\n\n      this.viewer.addHandler('zoom', frameHandler);\n      this.viewer.addHandler('pan', frameHandler);\n\n      this.viewer.addHandler('canvas-click', (event) => {\n        if (!event || !event.quick || !event.position || !this.viewer || !this.navEnabled) {\n          return;\n        }\n\n        const point = this.viewer.viewport.pointFromPixel(event.position);\n        let foundIndex = this._getHitFrame(point);\n        if (foundIndex === -1) {\n          const realFrameIndex = this._figureFrameIndex(true);\n          if (realFrameIndex === -1 && this.frameIndex !== undefined) {\n            this.goToFrame(this.frameIndex);\n          } else {\n            this.goToNextFrame();\n          }\n        } else if (foundIndex === this.frameIndex) {\n          this.goToNextFrame();\n        } else {\n          this.goToFrame(foundIndex);\n        }\n      });\n\n      const originalScrollHandler = this.viewer.innerTracker.scrollHandler;\n      this.viewer.innerTracker.scrollHandler = (event) => {\n        if (!this.navEnabled) {\n          // Returning false stops the browser from scrolling itself.\n          return false;\n        }\n\n        if (\n          event.originalEvent.ctrlKey ||\n          event.originalEvent.altKey ||\n          event.originalEvent.metaKey\n        ) {\n          return originalScrollHandler.call(this.viewer?.innerTracker, event);\n        }\n\n        const now = Date.now();\n        // console.log(event.scroll, now, now - this.lastScrollTime);\n        if (now - this.lastScrollTime < this.scrollDelay) {\n          // Returning false stops the browser from scrolling itself.\n          return false;\n        }\n\n        this.lastScrollTime = now;\n        if (event.scroll < 0) {\n          this.goToNextFrame();\n        } else {\n          this.goToPreviousFrame();\n        }\n\n        // Returning false stops the browser from scrolling itself.\n        return false;\n      };\n\n      window.addEventListener('keydown', (event) => {\n        if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey || !this.navEnabled) {\n          return;\n        }\n\n        if (event.key === 'ArrowRight' || event.key === 'ArrowDown' || event.key === ' ') {\n          this.goToNextFrame();\n        } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {\n          this.goToPreviousFrame();\n        } else {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n      });\n    }\n  }\n\n  /** Render the comic on screen */\n  openComic(unsafeComic: Comic | string) {\n    if (this.frames.length || this.imageItems.length) {\n      this.closeComic();\n    }\n\n    const { comic } =\n      typeof unsafeComic === 'string' ? (JSON.parse(unsafeComic) as Comic) : unsafeComic;\n\n    osdPromise.then(() => {\n      this.container.style.backgroundColor = comic.body.backgroundColor;\n\n      if (this.viewer) {\n        if (comic.body.frames) {\n          this.frames = comic.body.frames.map((frame) => {\n            return new OpenSeadragon!.Rect(\n              frame.x - frame.width / 2,\n              frame.y - frame.height / 2,\n              frame.width,\n              frame.height\n            );\n          });\n        } else {\n          this.frames = comic.body.items.map((item) => {\n            return new OpenSeadragon!.Rect(\n              item.x - item.width / 2,\n              item.y - item.height / 2,\n              item.width,\n              item.height\n            );\n          });\n        }\n\n        comic.body.items.forEach((item, i) => {\n          const imageItem: ImageItem = {\n            hideUntilFrame: item.hideUntilFrame\n          };\n\n          this.imageItems.push(imageItem);\n\n          this.viewer?.addTiledImage({\n            preload: true,\n            x: item.x - item.width / 2,\n            y: item.y - item.height / 2,\n            width: item.width,\n            success: (event: any) => {\n              imageItem.tiledImage = event.item as OpenSeadragon.TiledImage;\n              this._updateImageVisibility();\n\n              if (i === 0) {\n                this._startComic();\n              }\n            },\n            tileSource: {\n              type: 'legacy-image-pyramid',\n              levels: [\n                {\n                  url: item.url,\n                  width: item.width,\n                  height: item.height\n                }\n              ]\n            }\n          });\n        });\n      }\n    });\n  }\n\n  /** Remove the comic from the screen */\n  closeComic() {\n    this.imageItems = [];\n    this.frames = [];\n    this.frameIndex = -1;\n    this.frameIndexHint = -1;\n    this.lastScrollTime = 0;\n    this.comicLoaded = false;\n    this.viewer?.close();\n  }\n\n  // ----------\n  _startComic() {\n    this.comicLoaded = true;\n    this.goToFrame(0);\n\n    if (this.onComicLoad) {\n      this.onComicLoad({});\n    }\n  }\n\n  // ----------\n  _updateImageVisibility() {\n    this.imageItems.forEach((imageItem) => {\n      if (imageItem.hideUntilFrame !== undefined) {\n        imageItem.tiledImage?.setOpacity(this.frameIndex < imageItem.hideUntilFrame ? 0 : 1);\n      }\n    });\n  }\n\n  /** Determine if the frame navigation controls are currently able to be used to navigate */\n  getNavEnabled() {\n    return this.navEnabled;\n  }\n\n  /** Enable / Disable frame navigation controls */\n  setNavEnabled(flag: boolean) {\n    this.navEnabled = flag;\n    this.viewer?.setMouseNavEnabled(flag);\n  }\n\n  /** Navigate to a specific frame via its index number */\n  goToFrame(index: number) {\n    if (this.getFrameIndex() !== index) {\n      var frame = this.frames[index];\n      var bufferFactor = 0.2;\n      if (frame) {\n        this.frameIndexHint = index;\n\n        var box = frame.clone();\n\n        box.width *= 1 + bufferFactor;\n        box.height *= 1 + bufferFactor;\n        box.x -= frame.width * bufferFactor * 0.5;\n        box.y -= frame.height * bufferFactor * 0.5;\n\n        this.viewer?.viewport.fitBounds(box);\n      }\n    }\n  }\n\n  /** Get the currently active frame index. This will be whatever frame is in the middle of the\n  screen. If there is no frame in the middle, it'll be whatever frame the user last had there. */\n  getFrameIndex() {\n    return this.frameIndex;\n  }\n\n  // ----------\n  _figureFrameIndex(current: boolean) {\n    let bestIndex = -1;\n    let bestDistance = Infinity;\n    if (this.viewer) {\n      const viewportBounds = this.viewer.viewport.getBounds(current);\n      const viewportCenter = viewportBounds.getCenter();\n\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        if (frame.containsPoint(viewportCenter)) {\n          if (this.frameIndexHint === i) {\n            bestIndex = i;\n            break;\n          }\n\n          const distance = viewportCenter.squaredDistanceTo(frame.getCenter());\n          if (distance < bestDistance) {\n            bestDistance = distance;\n            bestIndex = i;\n          }\n        }\n      }\n    }\n\n    return bestIndex;\n  }\n\n  // ----------\n  _getHitFrame(point: OpenSeadragon.Point) {\n    let bestIndex = -1;\n\n    if (this.viewer) {\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        if (frame.containsPoint(point)) {\n          if (this.frameIndex === i) {\n            bestIndex = i;\n            break;\n          }\n\n          if (bestIndex === -1) {\n            bestIndex = i;\n          }\n        }\n      }\n    }\n\n    return bestIndex;\n  }\n\n  /** Return the total number of frames found in the comic sequence */\n  getFrameCount() {\n    return this.frames.length;\n  }\n\n  /** Navigate to the next frame in the sequence */\n  goToNextFrame() {\n    let index = this.getFrameIndex();\n    if (index < this.frames.length - 1) {\n      this.goToFrame(index + 1);\n    } else {\n      this.onNoNext({});\n    }\n  }\n\n  /** Navigate to the previous frame in the sequence */\n  goToPreviousFrame() {\n    let index = this.getFrameIndex();\n    if (index > 0) {\n      this.goToFrame(index - 1);\n    } else {\n      this.onNoPrevious({});\n    }\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}