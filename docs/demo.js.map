{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@dan503/load-js/index.js","node_modules/normalize-wheel/index.js","node_modules/normalize-wheel/src/ExecutionEnvironment.js","node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js","node_modules/normalize-wheel/src/isEventSupported.js","node_modules/normalize-wheel/src/normalizeWheel.js","src/demo/demo.ts","src/library/driftory.ts","src/library/util.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar alreadyCalledScripts = [];\r\nvar allScripts = {};\r\nvar defaultScript = { hasLoaded: false, callbacks: [] };\r\nvar addCallback = function (src, callback) {\r\n    var script = allScripts[src];\r\n    if (!script)\r\n        return;\r\n    if (script.hasLoaded) {\r\n        // If the script has already been previously loaded, just run the callback immediately\r\n        callback();\r\n    }\r\n    else {\r\n        if (script.callbacks.length > 0) {\r\n            script.callbacks.push(callback);\r\n        }\r\n        else {\r\n            script.callbacks = [callback];\r\n        }\r\n    }\r\n};\r\nfunction loadJS(src, callback) {\r\n    var script = allScripts[src] || defaultScript;\r\n    allScripts[src] = script;\r\n    if (alreadyCalledScripts.indexOf(src) < 0) {\r\n        alreadyCalledScripts.push(src);\r\n        var $scriptElem = document.createElement('script');\r\n        $scriptElem.setAttribute('class', 'load-js-script');\r\n        $scriptElem.src = src;\r\n        $scriptElem.onload = function () {\r\n            addCallback(src, callback);\r\n            var updatedScript = allScripts[src];\r\n            if (updatedScript) {\r\n                updatedScript.hasLoaded = true;\r\n            }\r\n            for (var thisSource in allScripts) {\r\n                var thisScript = allScripts[thisSource] || defaultScript;\r\n                thisScript.callbacks.forEach(function (cb) { return cb(); });\r\n            }\r\n        };\r\n        document.head.appendChild($scriptElem);\r\n    }\r\n    else {\r\n        addCallback(src, callback);\r\n    }\r\n}\r\nexports.default = loadJS;\r\n","module.exports = require('./src/normalizeWheel.js');\n","/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ExecutionEnvironment\n */\n\n/*jslint evil: true */\n\n'use strict';\n\nvar canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners:\n    canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n","/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule UserAgent_DEPRECATED\n */\n\n/**\n *  Provides entirely client-side User Agent and OS detection. You should prefer\n *  the non-deprecated UserAgent module when possible, which exposes our\n *  authoritative server-side PHP-based detection to the client.\n *\n *  Usage is straightforward:\n *\n *    if (UserAgent_DEPRECATED.ie()) {\n *      //  IE\n *    }\n *\n *  You can also do version checks:\n *\n *    if (UserAgent_DEPRECATED.ie() >= 7) {\n *      //  IE7 or better\n *    }\n *\n *  The browser functions will return NaN if the browser does not match, so\n *  you can also do version compares the other way:\n *\n *    if (UserAgent_DEPRECATED.ie() < 7) {\n *      //  IE6 or worse\n *    }\n *\n *  Note that the version is a float and may include a minor version number,\n *  so you should always use range operators to perform comparisons, not\n *  strict equality.\n *\n *  **Note:** You should **strongly** prefer capability detection to browser\n *  version detection where it's reasonable:\n *\n *    http://www.quirksmode.org/js/support.html\n *\n *  Further, we have a large number of mature wrapper functions and classes\n *  which abstract away many browser irregularities. Check the documentation,\n *  grep for things, or ask on javascript@lists.facebook.com before writing yet\n *  another copy of \"event || window.event\".\n *\n */\n\nvar _populated = false;\n\n// Browsers\nvar _ie, _firefox, _opera, _webkit, _chrome;\n\n// Actual IE browser for compatibility mode\nvar _ie_real_version;\n\n// Platforms\nvar _osx, _windows, _linux, _android;\n\n// Architectures\nvar _win64;\n\n// Devices\nvar _iphone, _ipad, _native;\n\nvar _mobile;\n\nfunction _populate() {\n  if (_populated) {\n    return;\n  }\n\n  _populated = true;\n\n  // To work around buggy JS libraries that can't handle multi-digit\n  // version numbers, Opera 10's user agent string claims it's Opera\n  // 9, then later includes a Version/X.Y field:\n  //\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\n  var uas = navigator.userAgent;\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\n  var os    = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\n\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\n  _android = /Android/i.exec(uas);\n  _native = /FBAN\\/\\w+;/i.exec(uas);\n  _mobile = /Mobile/i.exec(uas);\n\n  // Note that the IE team blog would have you believe you should be checking\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\n  // Windows will send 'WOW64' instead.\n  _win64 = !!(/Win64/.exec(uas));\n\n  if (agent) {\n    _ie = agent[1] ? parseFloat(agent[1]) : (\n          agent[5] ? parseFloat(agent[5]) : NaN);\n    // IE compatibility mode\n    if (_ie && document && document.documentMode) {\n      _ie = document.documentMode;\n    }\n    // grab the \"true\" ie version from the trident token if available\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\n    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;\n\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\n    _opera   = agent[3] ? parseFloat(agent[3]) : NaN;\n    _webkit  = agent[4] ? parseFloat(agent[4]) : NaN;\n    if (_webkit) {\n      // We do not add the regexp to the above test, because it will always\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\n      // the userAgent string.\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\n    } else {\n      _chrome = NaN;\n    }\n  } else {\n    _ie = _firefox = _opera = _chrome = _webkit = NaN;\n  }\n\n  if (os) {\n    if (os[1]) {\n      // Detect OS X version.  If no version number matches, set _osx to true.\n      // Version examples:  10, 10_6_1, 10.7\n      // Parses version number as a float, taking only first two sets of\n      // digits.  If only one set of digits is found, returns just the major\n      // version number.\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\n\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\n    } else {\n      _osx = false;\n    }\n    _windows = !!os[2];\n    _linux   = !!os[3];\n  } else {\n    _osx = _windows = _linux = false;\n  }\n}\n\nvar UserAgent_DEPRECATED = {\n\n  /**\n   *  Check if the UA is Internet Explorer.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  ie: function() {\n    return _populate() || _ie;\n  },\n\n  /**\n   * Check if we're in Internet Explorer compatibility mode.\n   *\n   * @return bool true if in compatibility mode, false if\n   * not compatibility mode or not ie\n   */\n  ieCompatibilityMode: function() {\n    return _populate() || (_ie_real_version > _ie);\n  },\n\n\n  /**\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\n   * this when we don't need it -- tracked by #601957.\n   */\n  ie64: function() {\n    return UserAgent_DEPRECATED.ie() && _win64;\n  },\n\n  /**\n   *  Check if the UA is Firefox.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  firefox: function() {\n    return _populate() || _firefox;\n  },\n\n\n  /**\n   *  Check if the UA is Opera.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  opera: function() {\n    return _populate() || _opera;\n  },\n\n\n  /**\n   *  Check if the UA is WebKit.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  webkit: function() {\n    return _populate() || _webkit;\n  },\n\n  /**\n   *  For Push\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\n   */\n  safari: function() {\n    return UserAgent_DEPRECATED.webkit();\n  },\n\n  /**\n   *  Check if the UA is a Chrome browser.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  chrome : function() {\n    return _populate() || _chrome;\n  },\n\n\n  /**\n   *  Check if the user is running Windows.\n   *\n   *  @return bool `true' if the user's OS is Windows.\n   */\n  windows: function() {\n    return _populate() || _windows;\n  },\n\n\n  /**\n   *  Check if the user is running Mac OS X.\n   *\n   *  @return float|bool   Returns a float if a version number is detected,\n   *                       otherwise true/false.\n   */\n  osx: function() {\n    return _populate() || _osx;\n  },\n\n  /**\n   * Check if the user is running Linux.\n   *\n   * @return bool `true' if the user's OS is some flavor of Linux.\n   */\n  linux: function() {\n    return _populate() || _linux;\n  },\n\n  /**\n   * Check if the user is running on an iPhone or iPod platform.\n   *\n   * @return bool `true' if the user is running some flavor of the\n   *    iPhone OS.\n   */\n  iphone: function() {\n    return _populate() || _iphone;\n  },\n\n  mobile: function() {\n    return _populate() || (_iphone || _ipad || _android || _mobile);\n  },\n\n  nativeApp: function() {\n    // webviews inside of the native apps\n    return _populate() || _native;\n  },\n\n  android: function() {\n    return _populate() || _android;\n  },\n\n  ipad: function() {\n    return _populate() || _ipad;\n  }\n};\n\nmodule.exports = UserAgent_DEPRECATED;\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isEventSupported\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature =\n    document.implementation &&\n    document.implementation.hasFeature &&\n    // always returns true in newer browsers as per the standard.\n    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n    document.implementation.hasFeature('', '') !== true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM ||\n      capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = eventName in document;\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\n\nmodule.exports = isEventSupported;\n","/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule normalizeWheel\n * @typechecks\n */\n\n'use strict';\n\nvar UserAgent_DEPRECATED = require('./UserAgent_DEPRECATED');\n\nvar isEventSupported = require('./isEventSupported');\n\n\n// Reasonable defaults\nvar PIXEL_STEP  = 10;\nvar LINE_HEIGHT = 40;\nvar PAGE_HEIGHT = 800;\n\n/**\n * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is\n * complicated, thus this doc is long and (hopefully) detailed enough to answer\n * your questions.\n *\n * If you need to react to the mouse wheel in a predictable way, this code is\n * like your bestest friend. * hugs *\n *\n * As of today, there are 4 DOM event types you can listen to:\n *\n *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)\n *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari\n *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!\n *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003\n *\n * So what to do?  The is the best:\n *\n *   normalizeWheel.getEventType();\n *\n * In your event callback, use this code to get sane interpretation of the\n * deltas.  This code will return an object with properties:\n *\n *   spinX   -- normalized spin speed (use for zoom) - x plane\n *   spinY   -- \" - y plane\n *   pixelX  -- normalized distance (to pixels) - x plane\n *   pixelY  -- \" - y plane\n *\n * Wheel values are provided by the browser assuming you are using the wheel to\n * scroll a web page by a number of lines or pixels (or pages).  Values can vary\n * significantly on different platforms and browsers, forgetting that you can\n * scroll at different speeds.  Some devices (like trackpads) emit more events\n * at smaller increments with fine granularity, and some emit massive jumps with\n * linear speed or acceleration.\n *\n * This code does its best to normalize the deltas for you:\n *\n *   - spin is trying to normalize how far the wheel was spun (or trackpad\n *     dragged).  This is super useful for zoom support where you want to\n *     throw away the chunky scroll steps on the PC and make those equal to\n *     the slow and smooth tiny steps on the Mac. Key data: This code tries to\n *     resolve a single slow step on a wheel to 1.\n *\n *   - pixel is normalizing the desired scroll delta in pixel units.  You'll\n *     get the crazy differences between browsers, but at least it'll be in\n *     pixels!\n *\n *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This\n *     should translate to positive value zooming IN, negative zooming OUT.\n *     This matches the newer 'wheel' event.\n *\n * Why are there spinX, spinY (or pixels)?\n *\n *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn\n *     with a mouse.  It results in side-scrolling in the browser by default.\n *\n *   - spinY is what you expect -- it's the classic axis of a mouse wheel.\n *\n *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and\n *     probably is by browsers in conjunction with fancy 3D controllers .. but\n *     you know.\n *\n * Implementation info:\n *\n * Examples of 'wheel' event if you scroll slowly (down) by one step with an\n * average mouse:\n *\n *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)\n *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)\n *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)\n *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)\n *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)\n *\n * On the trackpad:\n *\n *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)\n *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)\n *\n * On other/older browsers.. it's more complicated as there can be multiple and\n * also missing delta values.\n *\n * The 'wheel' event is more standard:\n *\n * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\n *\n * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and\n * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain\n * backward compatibility with older events.  Those other values help us\n * better normalize spin speed.  Example of what the browsers provide:\n *\n *                          | event.wheelDelta | event.detail\n *        ------------------+------------------+--------------\n *          Safari v5/OS X  |       -120       |       0\n *          Safari v5/Win7  |       -120       |       0\n *         Chrome v17/OS X  |       -120       |       0\n *         Chrome v17/Win7  |       -120       |       0\n *                IE9/Win7  |       -120       |   undefined\n *         Firefox v4/OS X  |     undefined    |       1\n *         Firefox v4/Win7  |     undefined    |       3\n *\n */\nfunction normalizeWheel(/*object*/ event) /*object*/ {\n  var sX = 0, sY = 0,       // spinX, spinY\n      pX = 0, pY = 0;       // pixelX, pixelY\n\n  // Legacy\n  if ('detail'      in event) { sY = event.detail; }\n  if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }\n  if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }\n  if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }\n\n  // side scrolling on FF with DOMMouseScroll\n  if ( 'axis' in event && event.axis === event.HORIZONTAL_AXIS ) {\n    sX = sY;\n    sY = 0;\n  }\n\n  pX = sX * PIXEL_STEP;\n  pY = sY * PIXEL_STEP;\n\n  if ('deltaY' in event) { pY = event.deltaY; }\n  if ('deltaX' in event) { pX = event.deltaX; }\n\n  if ((pX || pY) && event.deltaMode) {\n    if (event.deltaMode == 1) {          // delta in LINE units\n      pX *= LINE_HEIGHT;\n      pY *= LINE_HEIGHT;\n    } else {                             // delta in PAGE units\n      pX *= PAGE_HEIGHT;\n      pY *= PAGE_HEIGHT;\n    }\n  }\n\n  // Fall-back if spin cannot be determined\n  if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }\n  if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }\n\n  return { spinX  : sX,\n           spinY  : sY,\n           pixelX : pX,\n           pixelY : pY };\n}\n\n\n/**\n * The best combination if you prefer spinX + spinY normalization.  It favors\n * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with\n * 'wheel' event, making spin speed determination impossible.\n */\nnormalizeWheel.getEventType = function() /*string*/ {\n  return (UserAgent_DEPRECATED.firefox())\n           ? 'DOMMouseScroll'\n           : (isEventSupported('wheel'))\n               ? 'wheel'\n               : 'mousewheel';\n};\n\nmodule.exports = normalizeWheel;\n","import Driftory from '../library/driftory';\n\nconst comicNames = [\n  // 'comic-hide-until-frame.json',\n  // 'comic-dual-frames.json',\n  'comic.json',\n  'comic-no-frames.json'\n];\n\nlet comicIndex = 0;\nlet driftory: Driftory;\n\n// ----------\nfunction openComic() {\n  const comicName = comicNames[comicIndex];\n  fetch(comicName)\n    .then((response) => {\n      if (!response.ok) {\n        console.error(response);\n        throw new Error('Failed to load ' + comicName);\n      }\n\n      return response.json();\n    })\n    .then((json) => {\n      // console.log(json);\n      driftory.openComic(json);\n    })\n    .catch((error) => console.error(error));\n}\n\n// ----------\ndocument.addEventListener('DOMContentLoaded', () => {\n  // We need to cast this to HTMLDivElement because that's what Driftory needs.\n  const container = document.querySelector('.driftory-viewer-container') as HTMLDivElement | null;\n\n  const startButton = document.querySelector('.start-button');\n  const endButton = document.querySelector('.end-button');\n  const previousButton = document.querySelector('.previous-button');\n  const nextButton = document.querySelector('.next-button');\n  const hideButton = document.querySelector('.hide-button');\n  const navButton = document.querySelector('.nav-button');\n  const nextComicButton = document.querySelector('.next-comic-button');\n  const closeComicButton = document.querySelector('.close-comic-button');\n  const listImagesButton = document.querySelector('.list-images-button');\n  const frameInfo = document.querySelector('.frame-info');\n  const imageList = document.querySelector('.image-list');\n\n  if (!container) {\n    console.error('Cannot find viewer container');\n    return;\n  }\n\n  driftory = new Driftory({\n    container,\n    fadeSeconds: 0.5,\n    onComicLoad: () => {\n      console.log('loaded!');\n    },\n    onFrameChange: ({ frameIndex = 0, isLastFrame }) => {\n      if (frameInfo) {\n        let text = `Frame ${frameIndex + 1}`;\n        if (isLastFrame) {\n          text += ' (last frame!)';\n        }\n\n        frameInfo.textContent = text;\n      }\n    },\n    onNoNext: () => {\n      console.log('User trying to go past end');\n    },\n    onNoPrevious: () => {\n      console.log('User trying to go before beginning');\n    }\n  });\n\n  startButton?.addEventListener('click', () => {\n    driftory.goToFrame(0);\n  });\n\n  endButton?.addEventListener('click', () => {\n    driftory.goToFrame(driftory.getFrameCount() - 1);\n  });\n\n  previousButton?.addEventListener('click', () => {\n    driftory.goToPreviousFrame();\n  });\n\n  nextButton?.addEventListener('click', () => {\n    driftory.goToNextFrame();\n  });\n\n  hideButton?.addEventListener('click', () => {\n    container.classList.toggle('hide');\n  });\n\n  navButton?.addEventListener('click', () => {\n    const flag = !driftory.getNavEnabled();\n    driftory.setNavEnabled(flag);\n    navButton.textContent = flag ? 'disable nav' : 'enable nav';\n  });\n\n  nextComicButton?.addEventListener('click', () => {\n    comicIndex = (comicIndex + 1) % comicNames.length;\n    openComic();\n  });\n\n  closeComicButton?.addEventListener('click', () => {\n    driftory.closeComic();\n  });\n\n  listImagesButton?.addEventListener('click', () => {\n    const count = driftory.getFrameCount();\n    for (let i = 0; i < count; i++) {\n      const frame = driftory.getFrame(i);\n      if (frame?.images.length) {\n        const frameImage = frame.images[0];\n        const image = document.createElement('img');\n        image.src = frameImage.url;\n        imageList?.appendChild(image);\n      }\n    }\n  });\n\n  openComic();\n});\n","import loadJs from '@dan503/load-js';\nimport { mapLinear, clamp, sign } from './util';\nimport { Comic } from './Comic.types';\nimport { OpenSeadragonType, ViewerType } from './openseadragon.types';\nimport normalizeWheel from 'normalize-wheel';\n\ninterface OsdRequest {\n  resolve: (value?: unknown) => void;\n  reject: (reason?: any) => void;\n}\n\nlet OpenSeadragon: OpenSeadragonType | undefined;\nlet osdRequest: OsdRequest | undefined;\n\ndeclare global {\n  interface Window {\n    OpenSeadragon: OpenSeadragonType;\n  }\n}\n\nconst osdPromise = new Promise((resolve, reject) => {\n  osdRequest = { resolve, reject };\n});\n\n// Part of the external API\ninterface ImageInfo {\n  url: string;\n  bounds: OpenSeadragon.Rect;\n  hideUntilFrame?: number;\n  index: number;\n  frameFillFactor: number;\n}\n\n// Part of the external API\ninterface FrameInfo {\n  images: Array<ImageInfo>;\n  bounds: OpenSeadragon.Rect;\n}\n\n// Used internally\ninterface ImageItem {\n  url: string;\n  bounds: OpenSeadragon.Rect;\n  targetOpacity: number;\n  hideUntilFrame?: number;\n  tiledImage?: OpenSeadragon.TiledImage;\n  preloadTiledImage?: OpenSeadragon.TiledImage;\n}\n\n// Used internally\ninterface FrameImage {\n  imageItem: ImageItem;\n  imageIndex: number;\n  frameFillFactor: number;\n}\n\n// Used internally\ntype Frame = {\n  images: Array<FrameImage>;\n  bounds: OpenSeadragon.Rect;\n  keyBounds?: OpenSeadragon.Rect;\n};\n\n// Used internally\ninterface FramePathItem {\n  scroll: number;\n  frame: Frame;\n}\n\ntype Container = HTMLElement;\ntype OnFrameChange = (params: { frameIndex: number; isLastFrame: boolean }) => void;\ntype OnComicLoad = (params: {}) => void;\ntype OnNoNext = (params: {}) => void;\ntype OnNoPrevious = (params: {}) => void;\n\nexport interface DriftoryArguments {\n  /** The HTML DOM element that the Driftory Comic will be rendered in.  */\n  container: Container;\n  /** How many seconds it takes to fade new images on; default: 0.5 */\n  fadeSeconds?: number;\n  /**\n   * This library has a dependency on the [OpenSeadragon](https://openseadragon.github.io/) library.\n   *\n   * By default, OpenSeadragon will be loaded from [the JS Deliver CDN](https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js)\n   * while initializing.\n   *\n   * To prevent this, you can use this parameter to provide your own instance of OpenSeaDragon instead.\n   *  */\n  OpenSeadragon?: OpenSeadragonType;\n  /** Called whenever driftory navigates to a new frame, whether via clicking, dragging, keys, or API. */\n  onFrameChange?: OnFrameChange;\n  /** Called when the comic has finished initializing. */\n  onComicLoad?: OnComicLoad;\n  /** Called when the user tries to navigate to the next frame in the sequence\n   *  but there are no frames left to navigate to. */\n  onNoNext?: OnNoNext;\n  /** Called when the user tries to navigate to the previous frame in the sequence\n   *  but there are no frames left to navigate to. */\n  onNoPrevious?: OnNoPrevious;\n}\n\nconst scrollQuantum = 0.05;\n\nexport default class Driftory {\n  container: Container;\n  fadeSeconds: number;\n  onFrameChange: OnFrameChange;\n  onComicLoad: OnComicLoad;\n  onNoNext: OnNoNext;\n  onNoPrevious: OnNoPrevious;\n  imageItems: Array<ImageItem> = [];\n  frames: Array<Frame> = [];\n  framePath: Array<FramePathItem> = [];\n  frameIndex: number = -1;\n  frameIndexHint: number = -1;\n  maxScrollValue: number = 0;\n  viewer?: ViewerType;\n  navEnabled: boolean = true;\n  comicLoaded: boolean = false;\n  scroll: any = null;\n  lastAnimationTime: number = Date.now();\n\n  // ----------\n  constructor(args: DriftoryArguments) {\n    this.container = args.container;\n    this.fadeSeconds = args.fadeSeconds === undefined ? 0.5 : args.fadeSeconds;\n    this.onFrameChange = args.onFrameChange || function () {};\n    this.onComicLoad = args.onComicLoad || function () {};\n    this.onNoNext = args.onNoNext || function () {};\n    this.onNoPrevious = args.onNoPrevious || function () {};\n\n    this._animationFrame = this._animationFrame.bind(this);\n\n    if (args.OpenSeadragon) {\n      OpenSeadragon = args.OpenSeadragon;\n      this._initialize(args);\n      osdRequest?.resolve();\n    } else {\n      // Note: loadJs only loads the file once, even if called multiple times, and always makes sure\n      // all of the callbacks are called.\n      loadJs(\n        'https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js',\n        () => {\n          OpenSeadragon = window.OpenSeadragon;\n          this._initialize(args);\n          osdRequest?.resolve();\n        }\n      );\n    }\n  }\n\n  // ----------\n  _initialize({ container }: DriftoryArguments) {\n    this.viewer =\n      OpenSeadragon &&\n      OpenSeadragon({\n        element: container,\n        showNavigationControl: false,\n        maxZoomPixelRatio: 10,\n        gestureSettingsMouse: {\n          clickToZoom: false\n        }\n      });\n\n    if (this.viewer) {\n      const frameHandler = () => {\n        if (!this.comicLoaded) {\n          return;\n        }\n\n        const frameIndex = this._figureFrameIndex(false);\n        if (frameIndex !== -1 && frameIndex !== this.frameIndex) {\n          this.frameIndex = frameIndex;\n          this._updateImageVisibility();\n\n          if (this.onFrameChange) {\n            this.onFrameChange({\n              frameIndex,\n              isLastFrame: frameIndex === this.getFrameCount() - 1\n            });\n          }\n        }\n      };\n\n      this.viewer.addHandler('zoom', frameHandler);\n      this.viewer.addHandler('pan', frameHandler);\n\n      this.viewer.addHandler('canvas-click', (event) => {\n        if (!event || !event.quick || !event.position || !this.viewer || !this.navEnabled) {\n          return;\n        }\n\n        const point = this.viewer.viewport.pointFromPixel(event.position);\n        let foundIndex = this._getHitFrame(point);\n        if (foundIndex === -1) {\n          const realFrameIndex = this._figureFrameIndex(true);\n          if (realFrameIndex === -1 && this.frameIndex !== undefined) {\n            this.goToFrame(this.frameIndex);\n          } else {\n            this.goToNextFrame();\n          }\n        } else if (foundIndex === this.frameIndex) {\n          this.goToNextFrame();\n        } else {\n          this.goToFrame(foundIndex);\n        }\n      });\n\n      const originalScrollHandler = this.viewer.innerTracker.scrollHandler;\n      this.viewer.innerTracker.scrollHandler = (event) => {\n        if (!this.navEnabled) {\n          // Returning false stops the browser from scrolling itself.\n          return false;\n        }\n\n        if (\n          event.originalEvent.ctrlKey ||\n          event.originalEvent.altKey ||\n          event.originalEvent.metaKey\n        ) {\n          return originalScrollHandler.call(this.viewer?.innerTracker, event);\n        }\n\n        const normalized = normalizeWheel(event.originalEvent as WheelEvent);\n\n        if (!this.scroll || Math.abs(normalized.spinY) > 0.9) {\n          const direction = normalized.spinY < 0 ? -1 : 1;\n\n          if (!this.scroll || this.scroll.direction !== direction) {\n            this.scroll = {\n              value: this.frameIndex,\n              startIndex: this.frameIndex,\n              startBounds: this.viewer?.viewport.getBounds(true)\n            };\n          }\n\n          let target = this.scroll.value + normalized.spinY * 0.5;\n          target = direction < 0 ? Math.floor(target) : Math.ceil(target);\n          target = clamp(target, 0, this.maxScrollValue);\n\n          this.scroll.direction = direction;\n          this.scroll.target = target;\n          this.scroll.time = Date.now();\n        }\n\n        // Returning false stops the browser from scrolling itself.\n        return false;\n      };\n\n      window.addEventListener('keydown', (event) => {\n        if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey || !this.navEnabled) {\n          return;\n        }\n\n        if (event.key === 'ArrowRight' || event.key === 'ArrowDown' || event.key === ' ') {\n          this.goToNextFrame();\n        } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {\n          this.goToPreviousFrame();\n        } else {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n      });\n    }\n\n    this._animationFrame();\n  }\n\n  /** Render the comic on screen */\n  openComic(unsafeComic: Comic | string) {\n    if (this.frames.length || this.imageItems.length) {\n      this.closeComic();\n    }\n\n    const { comic } =\n      typeof unsafeComic === 'string' ? (JSON.parse(unsafeComic) as Comic) : unsafeComic;\n\n    osdPromise.then(() => {\n      this.container.style.backgroundColor = comic.body.backgroundColor;\n\n      // Get frames\n      if (this.viewer) {\n        if (comic.body.frames) {\n          this.frames = comic.body.frames.map((frame) => {\n            const bounds = new OpenSeadragon!.Rect(\n              frame.x - frame.width / 2,\n              frame.y - frame.height / 2,\n              frame.width,\n              frame.height\n            );\n\n            const output: Frame = {\n              images: [],\n              bounds\n            };\n\n            if (frame.keyArea) {\n              output.keyBounds = new OpenSeadragon!.Rect(\n                bounds.x + frame.keyArea.x - frame.keyArea.width / 2,\n                bounds.y + frame.keyArea.y - frame.keyArea.height / 2,\n                frame.keyArea.width,\n                frame.keyArea.height\n              );\n            }\n\n            return output;\n          });\n        } else {\n          this.frames = comic.body.items.map((item) => {\n            return {\n              images: [],\n              bounds: new OpenSeadragon!.Rect(\n                item.x - item.width / 2,\n                item.y - item.height / 2,\n                item.width,\n                item.height\n              )\n            };\n          });\n        }\n\n        // Make frame path\n        this.framePath = [];\n        let scroll = 0;\n        this.frames.forEach((frame) => {\n          this.framePath.push({\n            scroll,\n            frame\n          });\n\n          this.maxScrollValue = scroll;\n          scroll++;\n        });\n\n        // Get image items\n        comic.body.items.forEach((item, i) => {\n          const imageItem: ImageItem = {\n            url: item.url,\n            bounds: new OpenSeadragon!.Rect(\n              item.x - item.width / 2,\n              item.y - item.height / 2,\n              item.width,\n              item.height\n            ),\n            targetOpacity: 1,\n            hideUntilFrame: item.hideUntilFrame\n          };\n\n          this.imageItems.push(imageItem);\n\n          const tileSource = {\n            type: 'legacy-image-pyramid',\n            levels: [\n              {\n                url: item.url,\n                width: item.width,\n                height: item.height\n              }\n            ]\n          };\n\n          this.viewer?.addTiledImage({\n            preload: true,\n            opacity: 0,\n            x: imageItem.bounds.x,\n            y: imageItem.bounds.y,\n            width: imageItem.bounds.width,\n            success: (event: any) => {\n              imageItem.tiledImage = event.item as OpenSeadragon.TiledImage;\n              this._updateImageVisibility();\n\n              if (i === 0) {\n                this._startComic();\n              }\n            },\n            tileSource\n          });\n\n          if (i > 0) {\n            const previousImageItem = this.imageItems[i - 1];\n\n            this.viewer?.addTiledImage({\n              preload: true,\n              opacity: 0,\n              x: previousImageItem.bounds.x,\n              y: previousImageItem.bounds.y,\n              width: previousImageItem.bounds.width,\n              success: (event: any) => {\n                imageItem.preloadTiledImage = event.item as OpenSeadragon.TiledImage;\n              },\n              tileSource\n            });\n          }\n        });\n\n        this.frames.forEach((frame, frameIndex) => {\n          const frameArea = frame.bounds.width * frame.bounds.height;\n\n          this.imageItems.forEach((imageItem, imageIndex) => {\n            if (!imageItem.hideUntilFrame || imageItem.hideUntilFrame <= frameIndex) {\n              const intersection = frame.bounds.intersection(imageItem.bounds);\n              if (intersection) {\n                const area = intersection.width * intersection.height;\n\n                frame.images.push({ imageItem, imageIndex, frameFillFactor: area / frameArea });\n              }\n            }\n          });\n\n          // Sort primary image first, based on how much it fills the frame. On a tie, prefer later images.\n          // TODO: Account for images hidden under other images better.\n          frame.images.sort((a, b) => {\n            if (a.frameFillFactor > b.frameFillFactor) {\n              return -1;\n            }\n\n            if (a.frameFillFactor < b.frameFillFactor) {\n              return 1;\n            }\n\n            if (a.imageIndex > b.imageIndex) {\n              return -1;\n            }\n\n            if (a.imageIndex < b.imageIndex) {\n              return 1;\n            }\n\n            return 0;\n          });\n        });\n      }\n    });\n  }\n\n  /** Remove the comic from the screen */\n  closeComic() {\n    this.imageItems = [];\n    this.frames = [];\n    this.framePath = [];\n    this.frameIndex = -1;\n    this.frameIndexHint = -1;\n    this.maxScrollValue = 0;\n    this.comicLoaded = false;\n    this.viewer?.close();\n  }\n\n  // ----------\n  _startComic() {\n    this.comicLoaded = true;\n    this.goToFrame(0);\n\n    if (this.onComicLoad) {\n      this.onComicLoad({});\n    }\n  }\n\n  // ----------\n  _updateImageVisibility() {\n    this.imageItems.forEach((imageItem) => {\n      if (imageItem.hideUntilFrame !== undefined) {\n        imageItem.targetOpacity = this.frameIndex < imageItem.hideUntilFrame ? 0 : 1;\n      }\n    });\n  }\n\n  // ----------\n  _animationFrame() {\n    requestAnimationFrame(this._animationFrame);\n    const now = Date.now();\n    const timeSlice = now - this.lastAnimationTime;\n    this.lastAnimationTime = now;\n\n    this.imageItems.forEach((imageItem) => {\n      const tiledImage = imageItem.tiledImage;\n      const preloadTiledImage = imageItem.preloadTiledImage;\n      if (\n        tiledImage &&\n        (tiledImage.getFullyLoaded() || (preloadTiledImage && preloadTiledImage.getFullyLoaded()))\n      ) {\n        const opacity = tiledImage.getOpacity();\n        if (opacity !== imageItem.targetOpacity) {\n          const factor = this.fadeSeconds ? timeSlice / (this.fadeSeconds * 1000) : 1;\n          tiledImage.setOpacity(\n            clamp(opacity + sign(imageItem.targetOpacity - opacity) * factor, 0, 1)\n          );\n        }\n      }\n    });\n\n    if (this.scroll) {\n      const epsilon = 0.00001;\n      let amount = Math.abs(this.scroll.target - this.scroll.value) * 0.1;\n      amount = Math.max(amount, epsilon);\n      amount = Math.min(amount, scrollQuantum) * this.scroll.direction;\n      this.scroll.value += amount;\n\n      if (this.scroll.direction > 0) {\n        if (this.scroll.value >= this.scroll.target - epsilon) {\n          this.scroll.value = this.scroll.target;\n        }\n      } else {\n        if (this.scroll.value <= this.scroll.target + epsilon) {\n          this.scroll.value = this.scroll.target;\n        }\n      }\n\n      this._updateForScrollValue();\n\n      const timeDiff = Date.now() - this.scroll.time;\n      // console.log(timeDiff, this.scroll.value, this.scroll.target);\n      if (this.scroll.value === this.scroll.target && timeDiff > 20) {\n        delete this.scroll;\n      }\n    }\n  }\n\n  // ----------\n  _updateForScrollValue() {\n    if (this.viewer && this.scroll) {\n      for (let i = 0; i < this.framePath.length - 1; i++) {\n        const aIndex = i;\n        const bIndex = i + 1;\n        const a = this.framePath[aIndex];\n        const b = this.framePath[bIndex];\n        if (this.scroll.value >= a.scroll && this.scroll.value <= b.scroll) {\n          let newFrameIndex;\n          if (this.scroll.direction > 0) {\n            newFrameIndex = this.scroll.value === a.scroll ? aIndex : bIndex;\n          } else {\n            newFrameIndex = this.scroll.value === b.scroll ? bIndex : aIndex;\n          }\n\n          this.frameIndexHint = newFrameIndex;\n\n          const factor = mapLinear(this.scroll.value, a.scroll, b.scroll, 0, 1);\n\n          const aBounds = this._getBoundsForFrame(a.frame);\n          const bBounds = this._getBoundsForFrame(b.frame);\n\n          let earlierBounds, laterBounds;\n          if (this.scroll.startIndex === aIndex || this.scroll.startIndex === bIndex) {\n            if (this.scroll.direction > 0) {\n              earlierBounds = this.scroll.startBounds;\n              laterBounds = bBounds;\n            } else {\n              earlierBounds = aBounds;\n              laterBounds = this.scroll.startBounds;\n            }\n          } else {\n            this.scroll.startIndex = -1;\n            earlierBounds = aBounds;\n            laterBounds = bBounds;\n          }\n\n          const newBounds = new OpenSeadragon!.Rect(\n            mapLinear(factor, 0, 1, earlierBounds.x, laterBounds.x),\n            mapLinear(factor, 0, 1, earlierBounds.y, laterBounds.y),\n            mapLinear(factor, 0, 1, earlierBounds.width, laterBounds.width),\n            mapLinear(factor, 0, 1, earlierBounds.height, laterBounds.height)\n          );\n\n          this.viewer.viewport.fitBounds(newBounds, true);\n\n          break;\n        }\n      }\n    }\n  }\n\n  /** Determine if the frame navigation controls are currently able to be used to navigate */\n  getNavEnabled() {\n    return this.navEnabled;\n  }\n\n  /** Enable / Disable frame navigation controls */\n  setNavEnabled(flag: boolean) {\n    this.navEnabled = flag;\n    this.viewer?.setMouseNavEnabled(flag);\n  }\n\n  /** Get how many seconds it takes to fade an image on */\n  getFadeSeconds() {\n    return this.fadeSeconds;\n  }\n\n  /** Set how many seconds it takes to fade an image on */\n  setFadeSeconds(fadeSeconds: number) {\n    this.fadeSeconds = fadeSeconds;\n  }\n\n  /** Navigate to a specific frame via its index number */\n  goToFrame(index: number) {\n    if (this.getFrameIndex() !== index) {\n      var frame = this.frames[index];\n      if (frame) {\n        this.frameIndexHint = index;\n\n        var box = this._getBoundsForFrame(frame);\n        this.viewer?.viewport.fitBounds(box);\n      }\n    }\n  }\n\n  // ----------\n  _getBoundsForFrame(frame: Frame) {\n    if (frame.keyBounds && this.viewer) {\n      const { bounds, keyBounds } = frame;\n      let x, y, height;\n\n      const viewportBounds = this.viewer.viewport.getBounds();\n      const aspect = viewportBounds.width / viewportBounds.height;\n      let width = bounds.height * aspect;\n      if (width < bounds.width) {\n        height = bounds.height;\n      } else {\n        width = bounds.width;\n        height = bounds.width / aspect;\n      }\n\n      if (width < keyBounds.width) {\n        x = keyBounds.x;\n        width = keyBounds.width;\n      } else {\n        const widthExtra = bounds.width - keyBounds.width;\n        const leftExtra = keyBounds.x - bounds.x;\n        const leftFactor = leftExtra / widthExtra;\n        const newWidthExtra = width - keyBounds.width;\n        x = keyBounds.x - newWidthExtra * leftFactor;\n      }\n\n      if (height < keyBounds.height) {\n        y = keyBounds.y;\n        height = keyBounds.height;\n      } else {\n        const heightExtra = bounds.height - keyBounds.height;\n        const topExtra = keyBounds.y - bounds.y;\n        const topFactor = topExtra / heightExtra;\n        const newHeightExtra = height - keyBounds.height;\n        y = keyBounds.y - newHeightExtra * topFactor;\n      }\n\n      return new OpenSeadragon!.Rect(x, y, width, height);\n    }\n\n    var bufferFactor = 0.2;\n    var box = frame.bounds.clone();\n\n    box.width *= 1 + bufferFactor;\n    box.height *= 1 + bufferFactor;\n    box.x -= frame.bounds.width * bufferFactor * 0.5;\n    box.y -= frame.bounds.height * bufferFactor * 0.5;\n    return box;\n  }\n\n  /** Get the currently active frame index. This will be whatever frame is in the middle of the\n  screen. If there is no frame in the middle, it'll be whatever frame the user last had there. */\n  getFrameIndex() {\n    return this.frameIndex;\n  }\n\n  // ----------\n  _figureFrameIndex(current: boolean) {\n    let bestIndex = -1;\n    let bestDistance = Infinity;\n    if (this.viewer) {\n      const viewportBounds = this.viewer.viewport.getBounds(current);\n      const viewportCenter = viewportBounds.getCenter();\n\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        const bounds = frame.bounds;\n\n        if (bounds.containsPoint(viewportCenter)) {\n          let distance;\n          if (this.frameIndexHint === -1) {\n            distance = viewportCenter.squaredDistanceTo(bounds.getCenter());\n          } else {\n            distance = Math.abs(this.frameIndexHint - i);\n          }\n\n          if (distance < bestDistance) {\n            bestDistance = distance;\n            bestIndex = i;\n          }\n        }\n      }\n    }\n\n    return bestIndex;\n  }\n\n  // ----------\n  _getHitFrame(point: OpenSeadragon.Point) {\n    let bestIndex = -1;\n\n    if (this.viewer) {\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        const bounds = frame.bounds;\n\n        if (bounds.containsPoint(point)) {\n          if (this.frameIndex === i) {\n            bestIndex = i;\n            break;\n          }\n\n          if (bestIndex === -1) {\n            bestIndex = i;\n          }\n        }\n      }\n    }\n\n    return bestIndex;\n  }\n\n  /** Return the total number of frames found in the comic sequence */\n  getFrameCount() {\n    return this.frames.length;\n  }\n\n  /** Return an object with information about the frame at the specified index */\n  getFrame(frameIndex: number): FrameInfo | null {\n    const frame = this.frames[frameIndex];\n    if (!frame) {\n      return null;\n    }\n\n    return {\n      bounds: frame.bounds.clone(),\n      images: frame.images.map((frameImage) => {\n        const imageItem = frameImage.imageItem;\n\n        return {\n          url: imageItem.url,\n          bounds: imageItem.bounds.clone(),\n          hideUntilFrame: imageItem.hideUntilFrame,\n          frameFillFactor: frameImage.frameFillFactor,\n          index: frameImage.imageIndex\n        };\n      })\n    };\n  }\n\n  /** Return the total number of images found in the comic */\n  getImageCount() {\n    return this.imageItems.length;\n  }\n\n  /** Navigate to the next frame in the sequence */\n  goToNextFrame() {\n    let index = this.getFrameIndex();\n    if (index < this.frames.length - 1) {\n      this.goToFrame(index + 1);\n    } else {\n      this.onNoNext({});\n    }\n  }\n\n  /** Navigate to the previous frame in the sequence */\n  goToPreviousFrame() {\n    let index = this.getFrameIndex();\n    if (index > 0) {\n      this.goToFrame(index - 1);\n    } else {\n      this.onNoPrevious({});\n    }\n  }\n}\n","// ----------\nexport function mapLinear(\n  x: number,\n  a1: number,\n  a2: number,\n  b1: number,\n  b2: number,\n  clamp?: boolean\n): number {\n  console.assert(a1 !== a2, 'a1 and a2 must be different');\n  var output = b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);\n  if (clamp) {\n    var min = Math.min(b1, b2);\n    var max = Math.max(b1, b2);\n    return Math.max(min, Math.min(max, output));\n  }\n\n  return output;\n}\n\n// ----------\nexport function vectorToPolar(x: number, y: number): { radians: number; distance: number } {\n  return {\n    radians: Math.atan2(y, x),\n    distance: Math.sqrt(x * x + y * y)\n  };\n}\n\n// ----------\nexport function polarToVector(radians: number, distance: number): { x: number; y: number } {\n  return {\n    x: Math.cos(radians) * distance,\n    y: Math.sin(radians) * distance\n  };\n}\n\n// ----------\nexport function clamp(x: number, min: number, max: number): number {\n  return Math.max(min, Math.min(max, x));\n}\n\n// ----------\nexport function sign(x: number) {\n  if (x < 0) {\n    return -1;\n  }\n\n  if (x > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQGRhbjUwMy9sb2FkLWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwibm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvVXNlckFnZW50X0RFUFJFQ0FURUQuanMiLCJub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9pc0V2ZW50U3VwcG9ydGVkLmpzIiwibm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvbm9ybWFsaXplV2hlZWwuanMiLCJzcmMvZGVtby9kZW1vLnRzIiwic3JjL2xpYnJhcnkvZHJpZnRvcnkudHMiLCJzcmMvbGlicmFyeS91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7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U0FBZ0IsSUFBSSxDQUFDLENBQVM7SUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1QsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNYO0lBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1QsT0FBTyxDQUFDLENBQUM7S0FDVjtJQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQVZELG9CQVVDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGFscmVhZHlDYWxsZWRTY3JpcHRzID0gW107XHJcbnZhciBhbGxTY3JpcHRzID0ge307XHJcbnZhciBkZWZhdWx0U2NyaXB0ID0geyBoYXNMb2FkZWQ6IGZhbHNlLCBjYWxsYmFja3M6IFtdIH07XHJcbnZhciBhZGRDYWxsYmFjayA9IGZ1bmN0aW9uIChzcmMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgc2NyaXB0ID0gYWxsU2NyaXB0c1tzcmNdO1xyXG4gICAgaWYgKCFzY3JpcHQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKHNjcmlwdC5oYXNMb2FkZWQpIHtcclxuICAgICAgICAvLyBJZiB0aGUgc2NyaXB0IGhhcyBhbHJlYWR5IGJlZW4gcHJldmlvdXNseSBsb2FkZWQsIGp1c3QgcnVuIHRoZSBjYWxsYmFjayBpbW1lZGlhdGVseVxyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoc2NyaXB0LmNhbGxiYWNrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHNjcmlwdC5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzY3JpcHQuY2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGxvYWRKUyhzcmMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgc2NyaXB0ID0gYWxsU2NyaXB0c1tzcmNdIHx8IGRlZmF1bHRTY3JpcHQ7XHJcbiAgICBhbGxTY3JpcHRzW3NyY10gPSBzY3JpcHQ7XHJcbiAgICBpZiAoYWxyZWFkeUNhbGxlZFNjcmlwdHMuaW5kZXhPZihzcmMpIDwgMCkge1xyXG4gICAgICAgIGFscmVhZHlDYWxsZWRTY3JpcHRzLnB1c2goc3JjKTtcclxuICAgICAgICB2YXIgJHNjcmlwdEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICAkc2NyaXB0RWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2xvYWQtanMtc2NyaXB0Jyk7XHJcbiAgICAgICAgJHNjcmlwdEVsZW0uc3JjID0gc3JjO1xyXG4gICAgICAgICRzY3JpcHRFbGVtLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYWRkQ2FsbGJhY2soc3JjLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIHZhciB1cGRhdGVkU2NyaXB0ID0gYWxsU2NyaXB0c1tzcmNdO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlZFNjcmlwdCkge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlZFNjcmlwdC5oYXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIHRoaXNTb3VyY2UgaW4gYWxsU2NyaXB0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNTY3JpcHQgPSBhbGxTY3JpcHRzW3RoaXNTb3VyY2VdIHx8IGRlZmF1bHRTY3JpcHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzU2NyaXB0LmNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyByZXR1cm4gY2IoKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoJHNjcmlwdEVsZW0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWRkQ2FsbGJhY2soc3JjLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gbG9hZEpTO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3JjL25vcm1hbGl6ZVdoZWVsLmpzJyk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFeGVjdXRpb25FbnZpcm9ubWVudFxuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEoXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHdpbmRvdy5kb2N1bWVudCAmJlxuICB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuKTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOlxuICAgIGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDA0LXByZXNlbnQgRmFjZWJvb2suIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFVzZXJBZ2VudF9ERVBSRUNBVEVEXG4gKi9cblxuLyoqXG4gKiAgUHJvdmlkZXMgZW50aXJlbHkgY2xpZW50LXNpZGUgVXNlciBBZ2VudCBhbmQgT1MgZGV0ZWN0aW9uLiBZb3Ugc2hvdWxkIHByZWZlclxuICogIHRoZSBub24tZGVwcmVjYXRlZCBVc2VyQWdlbnQgbW9kdWxlIHdoZW4gcG9zc2libGUsIHdoaWNoIGV4cG9zZXMgb3VyXG4gKiAgYXV0aG9yaXRhdGl2ZSBzZXJ2ZXItc2lkZSBQSFAtYmFzZWQgZGV0ZWN0aW9uIHRvIHRoZSBjbGllbnQuXG4gKlxuICogIFVzYWdlIGlzIHN0cmFpZ2h0Zm9yd2FyZDpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSkge1xuICogICAgICAvLyAgSUVcbiAqICAgIH1cbiAqXG4gKiAgWW91IGNhbiBhbHNvIGRvIHZlcnNpb24gY2hlY2tzOlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpID49IDcpIHtcbiAqICAgICAgLy8gIElFNyBvciBiZXR0ZXJcbiAqICAgIH1cbiAqXG4gKiAgVGhlIGJyb3dzZXIgZnVuY3Rpb25zIHdpbGwgcmV0dXJuIE5hTiBpZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBtYXRjaCwgc29cbiAqICB5b3UgY2FuIGFsc28gZG8gdmVyc2lvbiBjb21wYXJlcyB0aGUgb3RoZXIgd2F5OlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpIDwgNykge1xuICogICAgICAvLyAgSUU2IG9yIHdvcnNlXG4gKiAgICB9XG4gKlxuICogIE5vdGUgdGhhdCB0aGUgdmVyc2lvbiBpcyBhIGZsb2F0IGFuZCBtYXkgaW5jbHVkZSBhIG1pbm9yIHZlcnNpb24gbnVtYmVyLFxuICogIHNvIHlvdSBzaG91bGQgYWx3YXlzIHVzZSByYW5nZSBvcGVyYXRvcnMgdG8gcGVyZm9ybSBjb21wYXJpc29ucywgbm90XG4gKiAgc3RyaWN0IGVxdWFsaXR5LlxuICpcbiAqICAqKk5vdGU6KiogWW91IHNob3VsZCAqKnN0cm9uZ2x5KiogcHJlZmVyIGNhcGFiaWxpdHkgZGV0ZWN0aW9uIHRvIGJyb3dzZXJcbiAqICB2ZXJzaW9uIGRldGVjdGlvbiB3aGVyZSBpdCdzIHJlYXNvbmFibGU6XG4gKlxuICogICAgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9zdXBwb3J0Lmh0bWxcbiAqXG4gKiAgRnVydGhlciwgd2UgaGF2ZSBhIGxhcmdlIG51bWJlciBvZiBtYXR1cmUgd3JhcHBlciBmdW5jdGlvbnMgYW5kIGNsYXNzZXNcbiAqICB3aGljaCBhYnN0cmFjdCBhd2F5IG1hbnkgYnJvd3NlciBpcnJlZ3VsYXJpdGllcy4gQ2hlY2sgdGhlIGRvY3VtZW50YXRpb24sXG4gKiAgZ3JlcCBmb3IgdGhpbmdzLCBvciBhc2sgb24gamF2YXNjcmlwdEBsaXN0cy5mYWNlYm9vay5jb20gYmVmb3JlIHdyaXRpbmcgeWV0XG4gKiAgYW5vdGhlciBjb3B5IG9mIFwiZXZlbnQgfHwgd2luZG93LmV2ZW50XCIuXG4gKlxuICovXG5cbnZhciBfcG9wdWxhdGVkID0gZmFsc2U7XG5cbi8vIEJyb3dzZXJzXG52YXIgX2llLCBfZmlyZWZveCwgX29wZXJhLCBfd2Via2l0LCBfY2hyb21lO1xuXG4vLyBBY3R1YWwgSUUgYnJvd3NlciBmb3IgY29tcGF0aWJpbGl0eSBtb2RlXG52YXIgX2llX3JlYWxfdmVyc2lvbjtcblxuLy8gUGxhdGZvcm1zXG52YXIgX29zeCwgX3dpbmRvd3MsIF9saW51eCwgX2FuZHJvaWQ7XG5cbi8vIEFyY2hpdGVjdHVyZXNcbnZhciBfd2luNjQ7XG5cbi8vIERldmljZXNcbnZhciBfaXBob25lLCBfaXBhZCwgX25hdGl2ZTtcblxudmFyIF9tb2JpbGU7XG5cbmZ1bmN0aW9uIF9wb3B1bGF0ZSgpIHtcbiAgaWYgKF9wb3B1bGF0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBfcG9wdWxhdGVkID0gdHJ1ZTtcblxuICAvLyBUbyB3b3JrIGFyb3VuZCBidWdneSBKUyBsaWJyYXJpZXMgdGhhdCBjYW4ndCBoYW5kbGUgbXVsdGktZGlnaXRcbiAgLy8gdmVyc2lvbiBudW1iZXJzLCBPcGVyYSAxMCdzIHVzZXIgYWdlbnQgc3RyaW5nIGNsYWltcyBpdCdzIE9wZXJhXG4gIC8vIDksIHRoZW4gbGF0ZXIgaW5jbHVkZXMgYSBWZXJzaW9uL1guWSBmaWVsZDpcbiAgLy9cbiAgLy8gT3BlcmEvOS44MCAoZm9vKSBQcmVzdG8vMi4yLjE1IFZlcnNpb24vMTAuMTBcbiAgdmFyIHVhcyA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHZhciBhZ2VudCA9IC8oPzpNU0lFLihcXGQrXFwuXFxkKykpfCg/Oig/OkZpcmVmb3h8R3JhblBhcmFkaXNvfEljZXdlYXNlbCkuKFxcZCtcXC5cXGQrKSl8KD86T3BlcmEoPzouK1ZlcnNpb24ufC4pKFxcZCtcXC5cXGQrKSl8KD86QXBwbGVXZWJLaXQuKFxcZCsoPzpcXC5cXGQrKT8pKXwoPzpUcmlkZW50XFwvXFxkK1xcLlxcZCsuKnJ2OihcXGQrXFwuXFxkKykpLy5leGVjKHVhcyk7XG4gIHZhciBvcyAgICA9IC8oTWFjIE9TIFgpfChXaW5kb3dzKXwoTGludXgpLy5leGVjKHVhcyk7XG5cbiAgX2lwaG9uZSA9IC9cXGIoaVBob25lfGlQW2FvXWQpLy5leGVjKHVhcyk7XG4gIF9pcGFkID0gL1xcYihpUFthb11kKS8uZXhlYyh1YXMpO1xuICBfYW5kcm9pZCA9IC9BbmRyb2lkL2kuZXhlYyh1YXMpO1xuICBfbmF0aXZlID0gL0ZCQU5cXC9cXHcrOy9pLmV4ZWModWFzKTtcbiAgX21vYmlsZSA9IC9Nb2JpbGUvaS5leGVjKHVhcyk7XG5cbiAgLy8gTm90ZSB0aGF0IHRoZSBJRSB0ZWFtIGJsb2cgd291bGQgaGF2ZSB5b3UgYmVsaWV2ZSB5b3Ugc2hvdWxkIGJlIGNoZWNraW5nXG4gIC8vIGZvciAnV2luNjQ7IHg2NCcuICBCdXQgTVNETiB0aGVuIHJldmVhbHMgdGhhdCB5b3UgY2FuIGFjdHVhbGx5IGJlIGNvbWluZ1xuICAvLyBmcm9tIGVpdGhlciB4NjQgb3IgaWE2NDsgIHNvIHVsdGltYXRlbHksIHlvdSBzaG91bGQganVzdCBjaGVjayBmb3IgV2luNjRcbiAgLy8gYXMgaW4gaW5kaWNhdG9yIG9mIHdoZXRoZXIgeW91J3JlIGluIDY0LWJpdCBJRS4gIDMyLWJpdCBJRSBvbiA2NC1iaXRcbiAgLy8gV2luZG93cyB3aWxsIHNlbmQgJ1dPVzY0JyBpbnN0ZWFkLlxuICBfd2luNjQgPSAhISgvV2luNjQvLmV4ZWModWFzKSk7XG5cbiAgaWYgKGFnZW50KSB7XG4gICAgX2llID0gYWdlbnRbMV0gPyBwYXJzZUZsb2F0KGFnZW50WzFdKSA6IChcbiAgICAgICAgICBhZ2VudFs1XSA/IHBhcnNlRmxvYXQoYWdlbnRbNV0pIDogTmFOKTtcbiAgICAvLyBJRSBjb21wYXRpYmlsaXR5IG1vZGVcbiAgICBpZiAoX2llICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSkge1xuICAgICAgX2llID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuICAgIH1cbiAgICAvLyBncmFiIHRoZSBcInRydWVcIiBpZSB2ZXJzaW9uIGZyb20gdGhlIHRyaWRlbnQgdG9rZW4gaWYgYXZhaWxhYmxlXG4gICAgdmFyIHRyaWRlbnQgPSAvKD86VHJpZGVudFxcLyhcXGQrLlxcZCspKS8uZXhlYyh1YXMpO1xuICAgIF9pZV9yZWFsX3ZlcnNpb24gPSB0cmlkZW50ID8gcGFyc2VGbG9hdCh0cmlkZW50WzFdKSArIDQgOiBfaWU7XG5cbiAgICBfZmlyZWZveCA9IGFnZW50WzJdID8gcGFyc2VGbG9hdChhZ2VudFsyXSkgOiBOYU47XG4gICAgX29wZXJhICAgPSBhZ2VudFszXSA/IHBhcnNlRmxvYXQoYWdlbnRbM10pIDogTmFOO1xuICAgIF93ZWJraXQgID0gYWdlbnRbNF0gPyBwYXJzZUZsb2F0KGFnZW50WzRdKSA6IE5hTjtcbiAgICBpZiAoX3dlYmtpdCkge1xuICAgICAgLy8gV2UgZG8gbm90IGFkZCB0aGUgcmVnZXhwIHRvIHRoZSBhYm92ZSB0ZXN0LCBiZWNhdXNlIGl0IHdpbGwgYWx3YXlzXG4gICAgICAvLyBtYXRjaCAnc2FmYXJpJyBvbmx5IHNpbmNlICdBcHBsZVdlYktpdCcgYXBwZWFycyBiZWZvcmUgJ0Nocm9tZScgaW5cbiAgICAgIC8vIHRoZSB1c2VyQWdlbnQgc3RyaW5nLlxuICAgICAgYWdlbnQgPSAvKD86Q2hyb21lXFwvKFxcZCtcXC5cXGQrKSkvLmV4ZWModWFzKTtcbiAgICAgIF9jaHJvbWUgPSBhZ2VudCAmJiBhZ2VudFsxXSA/IHBhcnNlRmxvYXQoYWdlbnRbMV0pIDogTmFOO1xuICAgIH0gZWxzZSB7XG4gICAgICBfY2hyb21lID0gTmFOO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBfaWUgPSBfZmlyZWZveCA9IF9vcGVyYSA9IF9jaHJvbWUgPSBfd2Via2l0ID0gTmFOO1xuICB9XG5cbiAgaWYgKG9zKSB7XG4gICAgaWYgKG9zWzFdKSB7XG4gICAgICAvLyBEZXRlY3QgT1MgWCB2ZXJzaW9uLiAgSWYgbm8gdmVyc2lvbiBudW1iZXIgbWF0Y2hlcywgc2V0IF9vc3ggdG8gdHJ1ZS5cbiAgICAgIC8vIFZlcnNpb24gZXhhbXBsZXM6ICAxMCwgMTBfNl8xLCAxMC43XG4gICAgICAvLyBQYXJzZXMgdmVyc2lvbiBudW1iZXIgYXMgYSBmbG9hdCwgdGFraW5nIG9ubHkgZmlyc3QgdHdvIHNldHMgb2ZcbiAgICAgIC8vIGRpZ2l0cy4gIElmIG9ubHkgb25lIHNldCBvZiBkaWdpdHMgaXMgZm91bmQsIHJldHVybnMganVzdCB0aGUgbWFqb3JcbiAgICAgIC8vIHZlcnNpb24gbnVtYmVyLlxuICAgICAgdmFyIHZlciA9IC8oPzpNYWMgT1MgWCAoXFxkKyg/OlsuX11cXGQrKT8pKS8uZXhlYyh1YXMpO1xuXG4gICAgICBfb3N4ID0gdmVyID8gcGFyc2VGbG9hdCh2ZXJbMV0ucmVwbGFjZSgnXycsICcuJykpIDogdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgX29zeCA9IGZhbHNlO1xuICAgIH1cbiAgICBfd2luZG93cyA9ICEhb3NbMl07XG4gICAgX2xpbnV4ICAgPSAhIW9zWzNdO1xuICB9IGVsc2Uge1xuICAgIF9vc3ggPSBfd2luZG93cyA9IF9saW51eCA9IGZhbHNlO1xuICB9XG59XG5cbnZhciBVc2VyQWdlbnRfREVQUkVDQVRFRCA9IHtcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBJbnRlcm5ldCBFeHBsb3Jlci5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgaWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHdlJ3JlIGluIEludGVybmV0IEV4cGxvcmVyIGNvbXBhdGliaWxpdHkgbW9kZS5cbiAgICpcbiAgICogQHJldHVybiBib29sIHRydWUgaWYgaW4gY29tcGF0aWJpbGl0eSBtb2RlLCBmYWxzZSBpZlxuICAgKiBub3QgY29tcGF0aWJpbGl0eSBtb2RlIG9yIG5vdCBpZVxuICAgKi9cbiAgaWVDb21wYXRpYmlsaXR5TW9kZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IChfaWVfcmVhbF92ZXJzaW9uID4gX2llKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBicm93c2VyIGlzIDY0LWJpdCBJRS4gIFJlYWxseSwgdGhpcyBpcyBraW5kIG9mIHdlYWsgc2F1Y2U7ICB3ZVxuICAgKiBvbmx5IG5lZWQgdGhpcyBiZWNhdXNlIFNreXBlIGNhbid0IGhhbmRsZSA2NC1iaXQgSUUgeWV0LiAgV2UgbmVlZCB0byByZW1vdmVcbiAgICogdGhpcyB3aGVuIHdlIGRvbid0IG5lZWQgaXQgLS0gdHJhY2tlZCBieSAjNjAxOTU3LlxuICAgKi9cbiAgaWU2NDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgJiYgX3dpbjY0O1xuICB9LFxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIEZpcmVmb3guXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGZpcmVmb3g6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfZmlyZWZveDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIE9wZXJhLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBvcGVyYTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9vcGVyYTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIFdlYktpdC5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgd2Via2l0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX3dlYmtpdDtcbiAgfSxcblxuICAvKipcbiAgICogIEZvciBQdXNoXG4gICAqICBXSUxMIEJFIFJFTU9WRUQgVkVSWSBTT09OLiBVc2UgVXNlckFnZW50X0RFUFJFQ0FURUQud2Via2l0XG4gICAqL1xuICBzYWZhcmk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVc2VyQWdlbnRfREVQUkVDQVRFRC53ZWJraXQoKTtcbiAgfSxcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBhIENocm9tZSBicm93c2VyLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBjaHJvbWUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2Nocm9tZTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBXaW5kb3dzLlxuICAgKlxuICAgKiAgQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlcidzIE9TIGlzIFdpbmRvd3MuXG4gICAqL1xuICB3aW5kb3dzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX3dpbmRvd3M7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgTWFjIE9TIFguXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fGJvb2wgICBSZXR1cm5zIGEgZmxvYXQgaWYgYSB2ZXJzaW9uIG51bWJlciBpcyBkZXRlY3RlZCxcbiAgICogICAgICAgICAgICAgICAgICAgICAgIG90aGVyd2lzZSB0cnVlL2ZhbHNlLlxuICAgKi9cbiAgb3N4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX29zeDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBMaW51eC5cbiAgICpcbiAgICogQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlcidzIE9TIGlzIHNvbWUgZmxhdm9yIG9mIExpbnV4LlxuICAgKi9cbiAgbGludXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfbGludXg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgb24gYW4gaVBob25lIG9yIGlQb2QgcGxhdGZvcm0uXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBzb21lIGZsYXZvciBvZiB0aGVcbiAgICogICAgaVBob25lIE9TLlxuICAgKi9cbiAgaXBob25lOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2lwaG9uZTtcbiAgfSxcblxuICBtb2JpbGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCAoX2lwaG9uZSB8fCBfaXBhZCB8fCBfYW5kcm9pZCB8fCBfbW9iaWxlKTtcbiAgfSxcblxuICBuYXRpdmVBcHA6IGZ1bmN0aW9uKCkge1xuICAgIC8vIHdlYnZpZXdzIGluc2lkZSBvZiB0aGUgbmF0aXZlIGFwcHNcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX25hdGl2ZTtcbiAgfSxcblxuICBhbmRyb2lkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2FuZHJvaWQ7XG4gIH0sXG5cbiAgaXBhZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pcGFkO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXJBZ2VudF9ERVBSRUNBVEVEO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRTdXBwb3J0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIHVzZUhhc0ZlYXR1cmU7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHVzZUhhc0ZlYXR1cmUgPVxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAgIC8vIGFsd2F5cyByZXR1cm5zIHRydWUgaW4gbmV3ZXIgYnJvd3NlcnMgYXMgcGVyIHRoZSBzdGFuZGFyZC5cbiAgICAvLyBAc2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZVxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHxcbiAgICAgIGNhcHR1cmUgJiYgISgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZG9jdW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVTdWZmaXg7XG4gIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiB1c2VIYXNGZWF0dXJlICYmIGV2ZW50TmFtZVN1ZmZpeCA9PT0gJ3doZWVsJykge1xuICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHRlc3Qgc3VwcG9ydCBmb3IgdGhlIGB3aGVlbGAgZXZlbnQgaW4gSUU5Ky5cbiAgICBpc1N1cHBvcnRlZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgfVxuXG4gIHJldHVybiBpc1N1cHBvcnRlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0V2ZW50U3VwcG9ydGVkO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbm9ybWFsaXplV2hlZWxcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVXNlckFnZW50X0RFUFJFQ0FURUQgPSByZXF1aXJlKCcuL1VzZXJBZ2VudF9ERVBSRUNBVEVEJyk7XG5cbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG5cblxuLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xudmFyIFBJWEVMX1NURVAgID0gMTA7XG52YXIgTElORV9IRUlHSFQgPSA0MDtcbnZhciBQQUdFX0hFSUdIVCA9IDgwMDtcblxuLyoqXG4gKiBNb3VzZSB3aGVlbCAoYW5kIDItZmluZ2VyIHRyYWNrcGFkKSBzdXBwb3J0IG9uIHRoZSB3ZWIgc3Vja3MuICBJdCBpc1xuICogY29tcGxpY2F0ZWQsIHRodXMgdGhpcyBkb2MgaXMgbG9uZyBhbmQgKGhvcGVmdWxseSkgZGV0YWlsZWQgZW5vdWdoIHRvIGFuc3dlclxuICogeW91ciBxdWVzdGlvbnMuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gcmVhY3QgdG8gdGhlIG1vdXNlIHdoZWVsIGluIGEgcHJlZGljdGFibGUgd2F5LCB0aGlzIGNvZGUgaXNcbiAqIGxpa2UgeW91ciBiZXN0ZXN0IGZyaWVuZC4gKiBodWdzICpcbiAqXG4gKiBBcyBvZiB0b2RheSwgdGhlcmUgYXJlIDQgRE9NIGV2ZW50IHR5cGVzIHlvdSBjYW4gbGlzdGVuIHRvOlxuICpcbiAqICAgJ3doZWVsJyAgICAgICAgICAgICAgICAtLSBDaHJvbWUoMzErKSwgRkYoMTcrKSwgSUUoOSspXG4gKiAgICdtb3VzZXdoZWVsJyAgICAgICAgICAgLS0gQ2hyb21lLCBJRSg2KyksIE9wZXJhLCBTYWZhcmlcbiAqICAgJ01vek1vdXNlUGl4ZWxTY3JvbGwnICAtLSBGRigzLjUgb25seSEpICgyMDEwLTIwMTMpIC0tIGRvbid0IGJvdGhlciFcbiAqICAgJ0RPTU1vdXNlU2Nyb2xsJyAgICAgICAtLSBGRigwLjkuNyspIHNpbmNlIDIwMDNcbiAqXG4gKiBTbyB3aGF0IHRvIGRvPyAgVGhlIGlzIHRoZSBiZXN0OlxuICpcbiAqICAgbm9ybWFsaXplV2hlZWwuZ2V0RXZlbnRUeXBlKCk7XG4gKlxuICogSW4geW91ciBldmVudCBjYWxsYmFjaywgdXNlIHRoaXMgY29kZSB0byBnZXQgc2FuZSBpbnRlcnByZXRhdGlvbiBvZiB0aGVcbiAqIGRlbHRhcy4gIFRoaXMgY29kZSB3aWxsIHJldHVybiBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzOlxuICpcbiAqICAgc3BpblggICAtLSBub3JtYWxpemVkIHNwaW4gc3BlZWQgKHVzZSBmb3Igem9vbSkgLSB4IHBsYW5lXG4gKiAgIHNwaW5ZICAgLS0gXCIgLSB5IHBsYW5lXG4gKiAgIHBpeGVsWCAgLS0gbm9ybWFsaXplZCBkaXN0YW5jZSAodG8gcGl4ZWxzKSAtIHggcGxhbmVcbiAqICAgcGl4ZWxZICAtLSBcIiAtIHkgcGxhbmVcbiAqXG4gKiBXaGVlbCB2YWx1ZXMgYXJlIHByb3ZpZGVkIGJ5IHRoZSBicm93c2VyIGFzc3VtaW5nIHlvdSBhcmUgdXNpbmcgdGhlIHdoZWVsIHRvXG4gKiBzY3JvbGwgYSB3ZWIgcGFnZSBieSBhIG51bWJlciBvZiBsaW5lcyBvciBwaXhlbHMgKG9yIHBhZ2VzKS4gIFZhbHVlcyBjYW4gdmFyeVxuICogc2lnbmlmaWNhbnRseSBvbiBkaWZmZXJlbnQgcGxhdGZvcm1zIGFuZCBicm93c2VycywgZm9yZ2V0dGluZyB0aGF0IHlvdSBjYW5cbiAqIHNjcm9sbCBhdCBkaWZmZXJlbnQgc3BlZWRzLiAgU29tZSBkZXZpY2VzIChsaWtlIHRyYWNrcGFkcykgZW1pdCBtb3JlIGV2ZW50c1xuICogYXQgc21hbGxlciBpbmNyZW1lbnRzIHdpdGggZmluZSBncmFudWxhcml0eSwgYW5kIHNvbWUgZW1pdCBtYXNzaXZlIGp1bXBzIHdpdGhcbiAqIGxpbmVhciBzcGVlZCBvciBhY2NlbGVyYXRpb24uXG4gKlxuICogVGhpcyBjb2RlIGRvZXMgaXRzIGJlc3QgdG8gbm9ybWFsaXplIHRoZSBkZWx0YXMgZm9yIHlvdTpcbiAqXG4gKiAgIC0gc3BpbiBpcyB0cnlpbmcgdG8gbm9ybWFsaXplIGhvdyBmYXIgdGhlIHdoZWVsIHdhcyBzcHVuIChvciB0cmFja3BhZFxuICogICAgIGRyYWdnZWQpLiAgVGhpcyBpcyBzdXBlciB1c2VmdWwgZm9yIHpvb20gc3VwcG9ydCB3aGVyZSB5b3Ugd2FudCB0b1xuICogICAgIHRocm93IGF3YXkgdGhlIGNodW5reSBzY3JvbGwgc3RlcHMgb24gdGhlIFBDIGFuZCBtYWtlIHRob3NlIGVxdWFsIHRvXG4gKiAgICAgdGhlIHNsb3cgYW5kIHNtb290aCB0aW55IHN0ZXBzIG9uIHRoZSBNYWMuIEtleSBkYXRhOiBUaGlzIGNvZGUgdHJpZXMgdG9cbiAqICAgICByZXNvbHZlIGEgc2luZ2xlIHNsb3cgc3RlcCBvbiBhIHdoZWVsIHRvIDEuXG4gKlxuICogICAtIHBpeGVsIGlzIG5vcm1hbGl6aW5nIHRoZSBkZXNpcmVkIHNjcm9sbCBkZWx0YSBpbiBwaXhlbCB1bml0cy4gIFlvdSdsbFxuICogICAgIGdldCB0aGUgY3JhenkgZGlmZmVyZW5jZXMgYmV0d2VlbiBicm93c2VycywgYnV0IGF0IGxlYXN0IGl0J2xsIGJlIGluXG4gKiAgICAgcGl4ZWxzIVxuICpcbiAqICAgLSBwb3NpdGl2ZSB2YWx1ZSBpbmRpY2F0ZXMgc2Nyb2xsaW5nIERPV04vUklHSFQsIG5lZ2F0aXZlIFVQL0xFRlQuICBUaGlzXG4gKiAgICAgc2hvdWxkIHRyYW5zbGF0ZSB0byBwb3NpdGl2ZSB2YWx1ZSB6b29taW5nIElOLCBuZWdhdGl2ZSB6b29taW5nIE9VVC5cbiAqICAgICBUaGlzIG1hdGNoZXMgdGhlIG5ld2VyICd3aGVlbCcgZXZlbnQuXG4gKlxuICogV2h5IGFyZSB0aGVyZSBzcGluWCwgc3BpblkgKG9yIHBpeGVscyk/XG4gKlxuICogICAtIHNwaW5YIGlzIGEgMi1maW5nZXIgc2lkZSBkcmFnIG9uIHRoZSB0cmFja3BhZCwgYW5kIGEgc2hpZnQgKyB3aGVlbCB0dXJuXG4gKiAgICAgd2l0aCBhIG1vdXNlLiAgSXQgcmVzdWx0cyBpbiBzaWRlLXNjcm9sbGluZyBpbiB0aGUgYnJvd3NlciBieSBkZWZhdWx0LlxuICpcbiAqICAgLSBzcGluWSBpcyB3aGF0IHlvdSBleHBlY3QgLS0gaXQncyB0aGUgY2xhc3NpYyBheGlzIG9mIGEgbW91c2Ugd2hlZWwuXG4gKlxuICogICAtIEkgZHJvcHBlZCBzcGluWi9waXhlbFouICBJdCBpcyBzdXBwb3J0ZWQgYnkgdGhlIERPTSAzICd3aGVlbCcgZXZlbnQgYW5kXG4gKiAgICAgcHJvYmFibHkgaXMgYnkgYnJvd3NlcnMgaW4gY29uanVuY3Rpb24gd2l0aCBmYW5jeSAzRCBjb250cm9sbGVycyAuLiBidXRcbiAqICAgICB5b3Uga25vdy5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBpbmZvOlxuICpcbiAqIEV4YW1wbGVzIG9mICd3aGVlbCcgZXZlbnQgaWYgeW91IHNjcm9sbCBzbG93bHkgKGRvd24pIGJ5IG9uZSBzdGVwIHdpdGggYW5cbiAqIGF2ZXJhZ2UgbW91c2U6XG4gKlxuICogICBPUyBYICsgQ2hyb21lICAobW91c2UpICAgICAtICAgIDQgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqICAgT1MgWCArIFNhZmFyaSAgKG1vdXNlKSAgICAgLSAgTi9BICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICAtMTIpXG4gKiAgIE9TIFggKyBGaXJlZm94IChtb3VzZSkgICAgIC0gICAgMC4xIGxpbmUgIGRlbHRhICAod2hlZWxEZWx0YSAgTi9BKVxuICogICBXaW44ICsgQ2hyb21lICAobW91c2UpICAgICAtICAxMDAgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqICAgV2luOCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAzICAgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKlxuICogT24gdGhlIHRyYWNrcGFkOlxuICpcbiAqICAgT1MgWCArIENocm9tZSAgKHRyYWNrcGFkKSAgLSAgICAyICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICAgLTYpXG4gKiAgIE9TIFggKyBGaXJlZm94ICh0cmFja3BhZCkgIC0gICAgMSAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgTi9BKVxuICpcbiAqIE9uIG90aGVyL29sZGVyIGJyb3dzZXJzLi4gaXQncyBtb3JlIGNvbXBsaWNhdGVkIGFzIHRoZXJlIGNhbiBiZSBtdWx0aXBsZSBhbmRcbiAqIGFsc28gbWlzc2luZyBkZWx0YSB2YWx1ZXMuXG4gKlxuICogVGhlICd3aGVlbCcgZXZlbnQgaXMgbW9yZSBzdGFuZGFyZDpcbiAqXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy13aGVlbGV2ZW50c1xuICpcbiAqIFRoZSBiYXNpY3MgaXMgdGhhdCBpdCBpbmNsdWRlcyBhIHVuaXQsIGRlbHRhTW9kZSAocGl4ZWxzLCBsaW5lcywgcGFnZXMpLCBhbmRcbiAqIGRlbHRhWCwgZGVsdGFZIGFuZCBkZWx0YVouICBTb21lIGJyb3dzZXJzIHByb3ZpZGUgb3RoZXIgdmFsdWVzIHRvIG1haW50YWluXG4gKiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgZXZlbnRzLiAgVGhvc2Ugb3RoZXIgdmFsdWVzIGhlbHAgdXNcbiAqIGJldHRlciBub3JtYWxpemUgc3BpbiBzcGVlZC4gIEV4YW1wbGUgb2Ygd2hhdCB0aGUgYnJvd3NlcnMgcHJvdmlkZTpcbiAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgfCBldmVudC53aGVlbERlbHRhIHwgZXZlbnQuZGV0YWlsXG4gKiAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLVxuICogICAgICAgICAgU2FmYXJpIHY1L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgIFNhZmFyaSB2NS9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgIENocm9tZSB2MTcvT1MgWCAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICBDaHJvbWUgdjE3L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgICAgICAgIElFOS9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgIHVuZGVmaW5lZFxuICogICAgICAgICBGaXJlZm94IHY0L09TIFggIHwgICAgIHVuZGVmaW5lZCAgICB8ICAgICAgIDFcbiAqICAgICAgICAgRmlyZWZveCB2NC9XaW43ICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAzXG4gKlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVXaGVlbCgvKm9iamVjdCovIGV2ZW50KSAvKm9iamVjdCovIHtcbiAgdmFyIHNYID0gMCwgc1kgPSAwLCAgICAgICAvLyBzcGluWCwgc3BpbllcbiAgICAgIHBYID0gMCwgcFkgPSAwOyAgICAgICAvLyBwaXhlbFgsIHBpeGVsWVxuXG4gIC8vIExlZ2FjeVxuICBpZiAoJ2RldGFpbCcgICAgICBpbiBldmVudCkgeyBzWSA9IGV2ZW50LmRldGFpbDsgfVxuICBpZiAoJ3doZWVsRGVsdGEnICBpbiBldmVudCkgeyBzWSA9IC1ldmVudC53aGVlbERlbHRhIC8gMTIwOyB9XG4gIGlmICgnd2hlZWxEZWx0YVknIGluIGV2ZW50KSB7IHNZID0gLWV2ZW50LndoZWVsRGVsdGFZIC8gMTIwOyB9XG4gIGlmICgnd2hlZWxEZWx0YVgnIGluIGV2ZW50KSB7IHNYID0gLWV2ZW50LndoZWVsRGVsdGFYIC8gMTIwOyB9XG5cbiAgLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuICBpZiAoICdheGlzJyBpbiBldmVudCAmJiBldmVudC5heGlzID09PSBldmVudC5IT1JJWk9OVEFMX0FYSVMgKSB7XG4gICAgc1ggPSBzWTtcbiAgICBzWSA9IDA7XG4gIH1cblxuICBwWCA9IHNYICogUElYRUxfU1RFUDtcbiAgcFkgPSBzWSAqIFBJWEVMX1NURVA7XG5cbiAgaWYgKCdkZWx0YVknIGluIGV2ZW50KSB7IHBZID0gZXZlbnQuZGVsdGFZOyB9XG4gIGlmICgnZGVsdGFYJyBpbiBldmVudCkgeyBwWCA9IGV2ZW50LmRlbHRhWDsgfVxuXG4gIGlmICgocFggfHwgcFkpICYmIGV2ZW50LmRlbHRhTW9kZSkge1xuICAgIGlmIChldmVudC5kZWx0YU1vZGUgPT0gMSkgeyAgICAgICAgICAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICBwWCAqPSBMSU5FX0hFSUdIVDtcbiAgICAgIHBZICo9IExJTkVfSEVJR0hUO1xuICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWx0YSBpbiBQQUdFIHVuaXRzXG4gICAgICBwWCAqPSBQQUdFX0hFSUdIVDtcbiAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gIGlmIChwWCAmJiAhc1gpIHsgc1ggPSAocFggPCAxKSA/IC0xIDogMTsgfVxuICBpZiAocFkgJiYgIXNZKSB7IHNZID0gKHBZIDwgMSkgPyAtMSA6IDE7IH1cblxuICByZXR1cm4geyBzcGluWCAgOiBzWCxcbiAgICAgICAgICAgc3BpblkgIDogc1ksXG4gICAgICAgICAgIHBpeGVsWCA6IHBYLFxuICAgICAgICAgICBwaXhlbFkgOiBwWSB9O1xufVxuXG5cbi8qKlxuICogVGhlIGJlc3QgY29tYmluYXRpb24gaWYgeW91IHByZWZlciBzcGluWCArIHNwaW5ZIG5vcm1hbGl6YXRpb24uICBJdCBmYXZvcnNcbiAqIHRoZSBvbGRlciBET01Nb3VzZVNjcm9sbCBmb3IgRmlyZWZveCwgYXMgRkYgZG9lcyBub3QgaW5jbHVkZSB3aGVlbERlbHRhIHdpdGhcbiAqICd3aGVlbCcgZXZlbnQsIG1ha2luZyBzcGluIHNwZWVkIGRldGVybWluYXRpb24gaW1wb3NzaWJsZS5cbiAqL1xubm9ybWFsaXplV2hlZWwuZ2V0RXZlbnRUeXBlID0gZnVuY3Rpb24oKSAvKnN0cmluZyovIHtcbiAgcmV0dXJuIChVc2VyQWdlbnRfREVQUkVDQVRFRC5maXJlZm94KCkpXG4gICAgICAgICAgID8gJ0RPTU1vdXNlU2Nyb2xsJ1xuICAgICAgICAgICA6IChpc0V2ZW50U3VwcG9ydGVkKCd3aGVlbCcpKVxuICAgICAgICAgICAgICAgPyAnd2hlZWwnXG4gICAgICAgICAgICAgICA6ICdtb3VzZXdoZWVsJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplV2hlZWw7XG4iLCJpbXBvcnQgRHJpZnRvcnkgZnJvbSAnLi4vbGlicmFyeS9kcmlmdG9yeSc7XG5cbmNvbnN0IGNvbWljTmFtZXMgPSBbXG4gIC8vICdjb21pYy1oaWRlLXVudGlsLWZyYW1lLmpzb24nLFxuICAvLyAnY29taWMtZHVhbC1mcmFtZXMuanNvbicsXG4gICdjb21pYy5qc29uJyxcbiAgJ2NvbWljLW5vLWZyYW1lcy5qc29uJ1xuXTtcblxubGV0IGNvbWljSW5kZXggPSAwO1xubGV0IGRyaWZ0b3J5OiBEcmlmdG9yeTtcblxuLy8gLS0tLS0tLS0tLVxuZnVuY3Rpb24gb3BlbkNvbWljKCkge1xuICBjb25zdCBjb21pY05hbWUgPSBjb21pY05hbWVzW2NvbWljSW5kZXhdO1xuICBmZXRjaChjb21pY05hbWUpXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IocmVzcG9uc2UpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2FkICcgKyBjb21pY05hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pXG4gICAgLnRoZW4oKGpzb24pID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGpzb24pO1xuICAgICAgZHJpZnRvcnkub3BlbkNvbWljKGpzb24pO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xufVxuXG4vLyAtLS0tLS0tLS0tXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAvLyBXZSBuZWVkIHRvIGNhc3QgdGhpcyB0byBIVE1MRGl2RWxlbWVudCBiZWNhdXNlIHRoYXQncyB3aGF0IERyaWZ0b3J5IG5lZWRzLlxuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZHJpZnRvcnktdmlld2VyLWNvbnRhaW5lcicpIGFzIEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcblxuICBjb25zdCBzdGFydEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGFydC1idXR0b24nKTtcbiAgY29uc3QgZW5kQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVuZC1idXR0b24nKTtcbiAgY29uc3QgcHJldmlvdXNCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJldmlvdXMtYnV0dG9uJyk7XG4gIGNvbnN0IG5leHRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV4dC1idXR0b24nKTtcbiAgY29uc3QgaGlkZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oaWRlLWJ1dHRvbicpO1xuICBjb25zdCBuYXZCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2LWJ1dHRvbicpO1xuICBjb25zdCBuZXh0Q29taWNCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV4dC1jb21pYy1idXR0b24nKTtcbiAgY29uc3QgY2xvc2VDb21pY0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG9zZS1jb21pYy1idXR0b24nKTtcbiAgY29uc3QgbGlzdEltYWdlc0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0LWltYWdlcy1idXR0b24nKTtcbiAgY29uc3QgZnJhbWVJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZyYW1lLWluZm8nKTtcbiAgY29uc3QgaW1hZ2VMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmltYWdlLWxpc3QnKTtcblxuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBmaW5kIHZpZXdlciBjb250YWluZXInKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBkcmlmdG9yeSA9IG5ldyBEcmlmdG9yeSh7XG4gICAgY29udGFpbmVyLFxuICAgIGZhZGVTZWNvbmRzOiAwLjUsXG4gICAgb25Db21pY0xvYWQ6ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdsb2FkZWQhJyk7XG4gICAgfSxcbiAgICBvbkZyYW1lQ2hhbmdlOiAoeyBmcmFtZUluZGV4ID0gMCwgaXNMYXN0RnJhbWUgfSkgPT4ge1xuICAgICAgaWYgKGZyYW1lSW5mbykge1xuICAgICAgICBsZXQgdGV4dCA9IGBGcmFtZSAke2ZyYW1lSW5kZXggKyAxfWA7XG4gICAgICAgIGlmIChpc0xhc3RGcmFtZSkge1xuICAgICAgICAgIHRleHQgKz0gJyAobGFzdCBmcmFtZSEpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lSW5mby50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbk5vTmV4dDogKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1VzZXIgdHJ5aW5nIHRvIGdvIHBhc3QgZW5kJyk7XG4gICAgfSxcbiAgICBvbk5vUHJldmlvdXM6ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdVc2VyIHRyeWluZyB0byBnbyBiZWZvcmUgYmVnaW5uaW5nJyk7XG4gICAgfVxuICB9KTtcblxuICBzdGFydEJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgZHJpZnRvcnkuZ29Ub0ZyYW1lKDApO1xuICB9KTtcblxuICBlbmRCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGRyaWZ0b3J5LmdvVG9GcmFtZShkcmlmdG9yeS5nZXRGcmFtZUNvdW50KCkgLSAxKTtcbiAgfSk7XG5cbiAgcHJldmlvdXNCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGRyaWZ0b3J5LmdvVG9QcmV2aW91c0ZyYW1lKCk7XG4gIH0pO1xuXG4gIG5leHRCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGRyaWZ0b3J5LmdvVG9OZXh0RnJhbWUoKTtcbiAgfSk7XG5cbiAgaGlkZUJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGUnKTtcbiAgfSk7XG5cbiAgbmF2QnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb25zdCBmbGFnID0gIWRyaWZ0b3J5LmdldE5hdkVuYWJsZWQoKTtcbiAgICBkcmlmdG9yeS5zZXROYXZFbmFibGVkKGZsYWcpO1xuICAgIG5hdkJ1dHRvbi50ZXh0Q29udGVudCA9IGZsYWcgPyAnZGlzYWJsZSBuYXYnIDogJ2VuYWJsZSBuYXYnO1xuICB9KTtcblxuICBuZXh0Q29taWNCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbWljSW5kZXggPSAoY29taWNJbmRleCArIDEpICUgY29taWNOYW1lcy5sZW5ndGg7XG4gICAgb3BlbkNvbWljKCk7XG4gIH0pO1xuXG4gIGNsb3NlQ29taWNCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGRyaWZ0b3J5LmNsb3NlQ29taWMoKTtcbiAgfSk7XG5cbiAgbGlzdEltYWdlc0J1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3QgY291bnQgPSBkcmlmdG9yeS5nZXRGcmFtZUNvdW50KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBmcmFtZSA9IGRyaWZ0b3J5LmdldEZyYW1lKGkpO1xuICAgICAgaWYgKGZyYW1lPy5pbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lSW1hZ2UgPSBmcmFtZS5pbWFnZXNbMF07XG4gICAgICAgIGNvbnN0IGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgIGltYWdlLnNyYyA9IGZyYW1lSW1hZ2UudXJsO1xuICAgICAgICBpbWFnZUxpc3Q/LmFwcGVuZENoaWxkKGltYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIG9wZW5Db21pYygpO1xufSk7XG4iLCJpbXBvcnQgbG9hZEpzIGZyb20gJ0BkYW41MDMvbG9hZC1qcyc7XG5pbXBvcnQgeyBtYXBMaW5lYXIsIGNsYW1wLCBzaWduIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IENvbWljIH0gZnJvbSAnLi9Db21pYy50eXBlcyc7XG5pbXBvcnQgeyBPcGVuU2VhZHJhZ29uVHlwZSwgVmlld2VyVHlwZSB9IGZyb20gJy4vb3BlbnNlYWRyYWdvbi50eXBlcyc7XG5pbXBvcnQgbm9ybWFsaXplV2hlZWwgZnJvbSAnbm9ybWFsaXplLXdoZWVsJztcblxuaW50ZXJmYWNlIE9zZFJlcXVlc3Qge1xuICByZXNvbHZlOiAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkO1xuICByZWplY3Q6IChyZWFzb24/OiBhbnkpID0+IHZvaWQ7XG59XG5cbmxldCBPcGVuU2VhZHJhZ29uOiBPcGVuU2VhZHJhZ29uVHlwZSB8IHVuZGVmaW5lZDtcbmxldCBvc2RSZXF1ZXN0OiBPc2RSZXF1ZXN0IHwgdW5kZWZpbmVkO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIE9wZW5TZWFkcmFnb246IE9wZW5TZWFkcmFnb25UeXBlO1xuICB9XG59XG5cbmNvbnN0IG9zZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gIG9zZFJlcXVlc3QgPSB7IHJlc29sdmUsIHJlamVjdCB9O1xufSk7XG5cbi8vIFBhcnQgb2YgdGhlIGV4dGVybmFsIEFQSVxuaW50ZXJmYWNlIEltYWdlSW5mbyB7XG4gIHVybDogc3RyaW5nO1xuICBib3VuZHM6IE9wZW5TZWFkcmFnb24uUmVjdDtcbiAgaGlkZVVudGlsRnJhbWU/OiBudW1iZXI7XG4gIGluZGV4OiBudW1iZXI7XG4gIGZyYW1lRmlsbEZhY3RvcjogbnVtYmVyO1xufVxuXG4vLyBQYXJ0IG9mIHRoZSBleHRlcm5hbCBBUElcbmludGVyZmFjZSBGcmFtZUluZm8ge1xuICBpbWFnZXM6IEFycmF5PEltYWdlSW5mbz47XG4gIGJvdW5kczogT3BlblNlYWRyYWdvbi5SZWN0O1xufVxuXG4vLyBVc2VkIGludGVybmFsbHlcbmludGVyZmFjZSBJbWFnZUl0ZW0ge1xuICB1cmw6IHN0cmluZztcbiAgYm91bmRzOiBPcGVuU2VhZHJhZ29uLlJlY3Q7XG4gIHRhcmdldE9wYWNpdHk6IG51bWJlcjtcbiAgaGlkZVVudGlsRnJhbWU/OiBudW1iZXI7XG4gIHRpbGVkSW1hZ2U/OiBPcGVuU2VhZHJhZ29uLlRpbGVkSW1hZ2U7XG4gIHByZWxvYWRUaWxlZEltYWdlPzogT3BlblNlYWRyYWdvbi5UaWxlZEltYWdlO1xufVxuXG4vLyBVc2VkIGludGVybmFsbHlcbmludGVyZmFjZSBGcmFtZUltYWdlIHtcbiAgaW1hZ2VJdGVtOiBJbWFnZUl0ZW07XG4gIGltYWdlSW5kZXg6IG51bWJlcjtcbiAgZnJhbWVGaWxsRmFjdG9yOiBudW1iZXI7XG59XG5cbi8vIFVzZWQgaW50ZXJuYWxseVxudHlwZSBGcmFtZSA9IHtcbiAgaW1hZ2VzOiBBcnJheTxGcmFtZUltYWdlPjtcbiAgYm91bmRzOiBPcGVuU2VhZHJhZ29uLlJlY3Q7XG4gIGtleUJvdW5kcz86IE9wZW5TZWFkcmFnb24uUmVjdDtcbn07XG5cbi8vIFVzZWQgaW50ZXJuYWxseVxuaW50ZXJmYWNlIEZyYW1lUGF0aEl0ZW0ge1xuICBzY3JvbGw6IG51bWJlcjtcbiAgZnJhbWU6IEZyYW1lO1xufVxuXG50eXBlIENvbnRhaW5lciA9IEhUTUxFbGVtZW50O1xudHlwZSBPbkZyYW1lQ2hhbmdlID0gKHBhcmFtczogeyBmcmFtZUluZGV4OiBudW1iZXI7IGlzTGFzdEZyYW1lOiBib29sZWFuIH0pID0+IHZvaWQ7XG50eXBlIE9uQ29taWNMb2FkID0gKHBhcmFtczoge30pID0+IHZvaWQ7XG50eXBlIE9uTm9OZXh0ID0gKHBhcmFtczoge30pID0+IHZvaWQ7XG50eXBlIE9uTm9QcmV2aW91cyA9IChwYXJhbXM6IHt9KSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIERyaWZ0b3J5QXJndW1lbnRzIHtcbiAgLyoqIFRoZSBIVE1MIERPTSBlbGVtZW50IHRoYXQgdGhlIERyaWZ0b3J5IENvbWljIHdpbGwgYmUgcmVuZGVyZWQgaW4uICAqL1xuICBjb250YWluZXI6IENvbnRhaW5lcjtcbiAgLyoqIEhvdyBtYW55IHNlY29uZHMgaXQgdGFrZXMgdG8gZmFkZSBuZXcgaW1hZ2VzIG9uOyBkZWZhdWx0OiAwLjUgKi9cbiAgZmFkZVNlY29uZHM/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGlzIGxpYnJhcnkgaGFzIGEgZGVwZW5kZW5jeSBvbiB0aGUgW09wZW5TZWFkcmFnb25dKGh0dHBzOi8vb3BlbnNlYWRyYWdvbi5naXRodWIuaW8vKSBsaWJyYXJ5LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBPcGVuU2VhZHJhZ29uIHdpbGwgYmUgbG9hZGVkIGZyb20gW3RoZSBKUyBEZWxpdmVyIENETl0oaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9vcGVuc2VhZHJhZ29uQDIuNC9idWlsZC9vcGVuc2VhZHJhZ29uL29wZW5zZWFkcmFnb24ubWluLmpzKVxuICAgKiB3aGlsZSBpbml0aWFsaXppbmcuXG4gICAqXG4gICAqIFRvIHByZXZlbnQgdGhpcywgeW91IGNhbiB1c2UgdGhpcyBwYXJhbWV0ZXIgdG8gcHJvdmlkZSB5b3VyIG93biBpbnN0YW5jZSBvZiBPcGVuU2VhRHJhZ29uIGluc3RlYWQuXG4gICAqICAqL1xuICBPcGVuU2VhZHJhZ29uPzogT3BlblNlYWRyYWdvblR5cGU7XG4gIC8qKiBDYWxsZWQgd2hlbmV2ZXIgZHJpZnRvcnkgbmF2aWdhdGVzIHRvIGEgbmV3IGZyYW1lLCB3aGV0aGVyIHZpYSBjbGlja2luZywgZHJhZ2dpbmcsIGtleXMsIG9yIEFQSS4gKi9cbiAgb25GcmFtZUNoYW5nZT86IE9uRnJhbWVDaGFuZ2U7XG4gIC8qKiBDYWxsZWQgd2hlbiB0aGUgY29taWMgaGFzIGZpbmlzaGVkIGluaXRpYWxpemluZy4gKi9cbiAgb25Db21pY0xvYWQ/OiBPbkNvbWljTG9hZDtcbiAgLyoqIENhbGxlZCB3aGVuIHRoZSB1c2VyIHRyaWVzIHRvIG5hdmlnYXRlIHRvIHRoZSBuZXh0IGZyYW1lIGluIHRoZSBzZXF1ZW5jZVxuICAgKiAgYnV0IHRoZXJlIGFyZSBubyBmcmFtZXMgbGVmdCB0byBuYXZpZ2F0ZSB0by4gKi9cbiAgb25Ob05leHQ/OiBPbk5vTmV4dDtcbiAgLyoqIENhbGxlZCB3aGVuIHRoZSB1c2VyIHRyaWVzIHRvIG5hdmlnYXRlIHRvIHRoZSBwcmV2aW91cyBmcmFtZSBpbiB0aGUgc2VxdWVuY2VcbiAgICogIGJ1dCB0aGVyZSBhcmUgbm8gZnJhbWVzIGxlZnQgdG8gbmF2aWdhdGUgdG8uICovXG4gIG9uTm9QcmV2aW91cz86IE9uTm9QcmV2aW91cztcbn1cblxuY29uc3Qgc2Nyb2xsUXVhbnR1bSA9IDAuMDU7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyaWZ0b3J5IHtcbiAgY29udGFpbmVyOiBDb250YWluZXI7XG4gIGZhZGVTZWNvbmRzOiBudW1iZXI7XG4gIG9uRnJhbWVDaGFuZ2U6IE9uRnJhbWVDaGFuZ2U7XG4gIG9uQ29taWNMb2FkOiBPbkNvbWljTG9hZDtcbiAgb25Ob05leHQ6IE9uTm9OZXh0O1xuICBvbk5vUHJldmlvdXM6IE9uTm9QcmV2aW91cztcbiAgaW1hZ2VJdGVtczogQXJyYXk8SW1hZ2VJdGVtPiA9IFtdO1xuICBmcmFtZXM6IEFycmF5PEZyYW1lPiA9IFtdO1xuICBmcmFtZVBhdGg6IEFycmF5PEZyYW1lUGF0aEl0ZW0+ID0gW107XG4gIGZyYW1lSW5kZXg6IG51bWJlciA9IC0xO1xuICBmcmFtZUluZGV4SGludDogbnVtYmVyID0gLTE7XG4gIG1heFNjcm9sbFZhbHVlOiBudW1iZXIgPSAwO1xuICB2aWV3ZXI/OiBWaWV3ZXJUeXBlO1xuICBuYXZFbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcbiAgY29taWNMb2FkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgc2Nyb2xsOiBhbnkgPSBudWxsO1xuICBsYXN0QW5pbWF0aW9uVGltZTogbnVtYmVyID0gRGF0ZS5ub3coKTtcblxuICAvLyAtLS0tLS0tLS0tXG4gIGNvbnN0cnVjdG9yKGFyZ3M6IERyaWZ0b3J5QXJndW1lbnRzKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBhcmdzLmNvbnRhaW5lcjtcbiAgICB0aGlzLmZhZGVTZWNvbmRzID0gYXJncy5mYWRlU2Vjb25kcyA9PT0gdW5kZWZpbmVkID8gMC41IDogYXJncy5mYWRlU2Vjb25kcztcbiAgICB0aGlzLm9uRnJhbWVDaGFuZ2UgPSBhcmdzLm9uRnJhbWVDaGFuZ2UgfHwgZnVuY3Rpb24gKCkge307XG4gICAgdGhpcy5vbkNvbWljTG9hZCA9IGFyZ3Mub25Db21pY0xvYWQgfHwgZnVuY3Rpb24gKCkge307XG4gICAgdGhpcy5vbk5vTmV4dCA9IGFyZ3Mub25Ob05leHQgfHwgZnVuY3Rpb24gKCkge307XG4gICAgdGhpcy5vbk5vUHJldmlvdXMgPSBhcmdzLm9uTm9QcmV2aW91cyB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gdGhpcy5fYW5pbWF0aW9uRnJhbWUuYmluZCh0aGlzKTtcblxuICAgIGlmIChhcmdzLk9wZW5TZWFkcmFnb24pIHtcbiAgICAgIE9wZW5TZWFkcmFnb24gPSBhcmdzLk9wZW5TZWFkcmFnb247XG4gICAgICB0aGlzLl9pbml0aWFsaXplKGFyZ3MpO1xuICAgICAgb3NkUmVxdWVzdD8ucmVzb2x2ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3RlOiBsb2FkSnMgb25seSBsb2FkcyB0aGUgZmlsZSBvbmNlLCBldmVuIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lcywgYW5kIGFsd2F5cyBtYWtlcyBzdXJlXG4gICAgICAvLyBhbGwgb2YgdGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkLlxuICAgICAgbG9hZEpzKFxuICAgICAgICAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9vcGVuc2VhZHJhZ29uQDIuNC9idWlsZC9vcGVuc2VhZHJhZ29uL29wZW5zZWFkcmFnb24ubWluLmpzJyxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIE9wZW5TZWFkcmFnb24gPSB3aW5kb3cuT3BlblNlYWRyYWdvbjtcbiAgICAgICAgICB0aGlzLl9pbml0aWFsaXplKGFyZ3MpO1xuICAgICAgICAgIG9zZFJlcXVlc3Q/LnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tXG4gIF9pbml0aWFsaXplKHsgY29udGFpbmVyIH06IERyaWZ0b3J5QXJndW1lbnRzKSB7XG4gICAgdGhpcy52aWV3ZXIgPVxuICAgICAgT3BlblNlYWRyYWdvbiAmJlxuICAgICAgT3BlblNlYWRyYWdvbih7XG4gICAgICAgIGVsZW1lbnQ6IGNvbnRhaW5lcixcbiAgICAgICAgc2hvd05hdmlnYXRpb25Db250cm9sOiBmYWxzZSxcbiAgICAgICAgbWF4Wm9vbVBpeGVsUmF0aW86IDEwLFxuICAgICAgICBnZXN0dXJlU2V0dGluZ3NNb3VzZToge1xuICAgICAgICAgIGNsaWNrVG9ab29tOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgY29uc3QgZnJhbWVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuY29taWNMb2FkZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcmFtZUluZGV4ID0gdGhpcy5fZmlndXJlRnJhbWVJbmRleChmYWxzZSk7XG4gICAgICAgIGlmIChmcmFtZUluZGV4ICE9PSAtMSAmJiBmcmFtZUluZGV4ICE9PSB0aGlzLmZyYW1lSW5kZXgpIHtcbiAgICAgICAgICB0aGlzLmZyYW1lSW5kZXggPSBmcmFtZUluZGV4O1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUltYWdlVmlzaWJpbGl0eSgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMub25GcmFtZUNoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5vbkZyYW1lQ2hhbmdlKHtcbiAgICAgICAgICAgICAgZnJhbWVJbmRleCxcbiAgICAgICAgICAgICAgaXNMYXN0RnJhbWU6IGZyYW1lSW5kZXggPT09IHRoaXMuZ2V0RnJhbWVDb3VudCgpIC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnZpZXdlci5hZGRIYW5kbGVyKCd6b29tJywgZnJhbWVIYW5kbGVyKTtcbiAgICAgIHRoaXMudmlld2VyLmFkZEhhbmRsZXIoJ3BhbicsIGZyYW1lSGFuZGxlcik7XG5cbiAgICAgIHRoaXMudmlld2VyLmFkZEhhbmRsZXIoJ2NhbnZhcy1jbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWV2ZW50IHx8ICFldmVudC5xdWljayB8fCAhZXZlbnQucG9zaXRpb24gfHwgIXRoaXMudmlld2VyIHx8ICF0aGlzLm5hdkVuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb2ludCA9IHRoaXMudmlld2VyLnZpZXdwb3J0LnBvaW50RnJvbVBpeGVsKGV2ZW50LnBvc2l0aW9uKTtcbiAgICAgICAgbGV0IGZvdW5kSW5kZXggPSB0aGlzLl9nZXRIaXRGcmFtZShwb2ludCk7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHJlYWxGcmFtZUluZGV4ID0gdGhpcy5fZmlndXJlRnJhbWVJbmRleCh0cnVlKTtcbiAgICAgICAgICBpZiAocmVhbEZyYW1lSW5kZXggPT09IC0xICYmIHRoaXMuZnJhbWVJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmdvVG9GcmFtZSh0aGlzLmZyYW1lSW5kZXgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdvVG9OZXh0RnJhbWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZm91bmRJbmRleCA9PT0gdGhpcy5mcmFtZUluZGV4KSB7XG4gICAgICAgICAgdGhpcy5nb1RvTmV4dEZyYW1lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5nb1RvRnJhbWUoZm91bmRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBvcmlnaW5hbFNjcm9sbEhhbmRsZXIgPSB0aGlzLnZpZXdlci5pbm5lclRyYWNrZXIuc2Nyb2xsSGFuZGxlcjtcbiAgICAgIHRoaXMudmlld2VyLmlubmVyVHJhY2tlci5zY3JvbGxIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5uYXZFbmFibGVkKSB7XG4gICAgICAgICAgLy8gUmV0dXJuaW5nIGZhbHNlIHN0b3BzIHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nIGl0c2VsZi5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5jdHJsS2V5IHx8XG4gICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkgfHxcbiAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50Lm1ldGFLZXlcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU2Nyb2xsSGFuZGxlci5jYWxsKHRoaXMudmlld2VyPy5pbm5lclRyYWNrZXIsIGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVXaGVlbChldmVudC5vcmlnaW5hbEV2ZW50IGFzIFdoZWVsRXZlbnQpO1xuXG4gICAgICAgIGlmICghdGhpcy5zY3JvbGwgfHwgTWF0aC5hYnMobm9ybWFsaXplZC5zcGluWSkgPiAwLjkpIHtcbiAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBub3JtYWxpemVkLnNwaW5ZIDwgMCA/IC0xIDogMTtcblxuICAgICAgICAgIGlmICghdGhpcy5zY3JvbGwgfHwgdGhpcy5zY3JvbGwuZGlyZWN0aW9uICE9PSBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0ge1xuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5mcmFtZUluZGV4LFxuICAgICAgICAgICAgICBzdGFydEluZGV4OiB0aGlzLmZyYW1lSW5kZXgsXG4gICAgICAgICAgICAgIHN0YXJ0Qm91bmRzOiB0aGlzLnZpZXdlcj8udmlld3BvcnQuZ2V0Qm91bmRzKHRydWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCB0YXJnZXQgPSB0aGlzLnNjcm9sbC52YWx1ZSArIG5vcm1hbGl6ZWQuc3BpblkgKiAwLjU7XG4gICAgICAgICAgdGFyZ2V0ID0gZGlyZWN0aW9uIDwgMCA/IE1hdGguZmxvb3IodGFyZ2V0KSA6IE1hdGguY2VpbCh0YXJnZXQpO1xuICAgICAgICAgIHRhcmdldCA9IGNsYW1wKHRhcmdldCwgMCwgdGhpcy5tYXhTY3JvbGxWYWx1ZSk7XG5cbiAgICAgICAgICB0aGlzLnNjcm9sbC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAgIHRoaXMuc2Nyb2xsLnRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV0dXJuaW5nIGZhbHNlIHN0b3BzIHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nIGl0c2VsZi5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmFsdEtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgIXRoaXMubmF2RW5hYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5rZXkgPT09ICdBcnJvd1JpZ2h0JyB8fCBldmVudC5rZXkgPT09ICdBcnJvd0Rvd24nIHx8IGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICAgICAgdGhpcy5nb1RvTmV4dEZyYW1lKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnQXJyb3dMZWZ0JyB8fCBldmVudC5rZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgICAgIHRoaXMuZ29Ub1ByZXZpb3VzRnJhbWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lKCk7XG4gIH1cblxuICAvKiogUmVuZGVyIHRoZSBjb21pYyBvbiBzY3JlZW4gKi9cbiAgb3BlbkNvbWljKHVuc2FmZUNvbWljOiBDb21pYyB8IHN0cmluZykge1xuICAgIGlmICh0aGlzLmZyYW1lcy5sZW5ndGggfHwgdGhpcy5pbWFnZUl0ZW1zLmxlbmd0aCkge1xuICAgICAgdGhpcy5jbG9zZUNvbWljKCk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjb21pYyB9ID1cbiAgICAgIHR5cGVvZiB1bnNhZmVDb21pYyA9PT0gJ3N0cmluZycgPyAoSlNPTi5wYXJzZSh1bnNhZmVDb21pYykgYXMgQ29taWMpIDogdW5zYWZlQ29taWM7XG5cbiAgICBvc2RQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29taWMuYm9keS5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICAgIC8vIEdldCBmcmFtZXNcbiAgICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgICBpZiAoY29taWMuYm9keS5mcmFtZXMpIHtcbiAgICAgICAgICB0aGlzLmZyYW1lcyA9IGNvbWljLmJvZHkuZnJhbWVzLm1hcCgoZnJhbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kcyA9IG5ldyBPcGVuU2VhZHJhZ29uIS5SZWN0KFxuICAgICAgICAgICAgICBmcmFtZS54IC0gZnJhbWUud2lkdGggLyAyLFxuICAgICAgICAgICAgICBmcmFtZS55IC0gZnJhbWUuaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgZnJhbWUud2lkdGgsXG4gICAgICAgICAgICAgIGZyYW1lLmhlaWdodFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0OiBGcmFtZSA9IHtcbiAgICAgICAgICAgICAgaW1hZ2VzOiBbXSxcbiAgICAgICAgICAgICAgYm91bmRzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoZnJhbWUua2V5QXJlYSkge1xuICAgICAgICAgICAgICBvdXRwdXQua2V5Qm91bmRzID0gbmV3IE9wZW5TZWFkcmFnb24hLlJlY3QoXG4gICAgICAgICAgICAgICAgYm91bmRzLnggKyBmcmFtZS5rZXlBcmVhLnggLSBmcmFtZS5rZXlBcmVhLndpZHRoIC8gMixcbiAgICAgICAgICAgICAgICBib3VuZHMueSArIGZyYW1lLmtleUFyZWEueSAtIGZyYW1lLmtleUFyZWEuaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICBmcmFtZS5rZXlBcmVhLndpZHRoLFxuICAgICAgICAgICAgICAgIGZyYW1lLmtleUFyZWEuaGVpZ2h0XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5mcmFtZXMgPSBjb21pYy5ib2R5Lml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgaW1hZ2VzOiBbXSxcbiAgICAgICAgICAgICAgYm91bmRzOiBuZXcgT3BlblNlYWRyYWdvbiEuUmVjdChcbiAgICAgICAgICAgICAgICBpdGVtLnggLSBpdGVtLndpZHRoIC8gMixcbiAgICAgICAgICAgICAgICBpdGVtLnkgLSBpdGVtLmhlaWdodCAvIDIsXG4gICAgICAgICAgICAgICAgaXRlbS53aWR0aCxcbiAgICAgICAgICAgICAgICBpdGVtLmhlaWdodFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWFrZSBmcmFtZSBwYXRoXG4gICAgICAgIHRoaXMuZnJhbWVQYXRoID0gW107XG4gICAgICAgIGxldCBzY3JvbGwgPSAwO1xuICAgICAgICB0aGlzLmZyYW1lcy5mb3JFYWNoKChmcmFtZSkgPT4ge1xuICAgICAgICAgIHRoaXMuZnJhbWVQYXRoLnB1c2goe1xuICAgICAgICAgICAgc2Nyb2xsLFxuICAgICAgICAgICAgZnJhbWVcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMubWF4U2Nyb2xsVmFsdWUgPSBzY3JvbGw7XG4gICAgICAgICAgc2Nyb2xsKys7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEdldCBpbWFnZSBpdGVtc1xuICAgICAgICBjb21pYy5ib2R5Lml0ZW1zLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICBjb25zdCBpbWFnZUl0ZW06IEltYWdlSXRlbSA9IHtcbiAgICAgICAgICAgIHVybDogaXRlbS51cmwsXG4gICAgICAgICAgICBib3VuZHM6IG5ldyBPcGVuU2VhZHJhZ29uIS5SZWN0KFxuICAgICAgICAgICAgICBpdGVtLnggLSBpdGVtLndpZHRoIC8gMixcbiAgICAgICAgICAgICAgaXRlbS55IC0gaXRlbS5oZWlnaHQgLyAyLFxuICAgICAgICAgICAgICBpdGVtLndpZHRoLFxuICAgICAgICAgICAgICBpdGVtLmhlaWdodFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHRhcmdldE9wYWNpdHk6IDEsXG4gICAgICAgICAgICBoaWRlVW50aWxGcmFtZTogaXRlbS5oaWRlVW50aWxGcmFtZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB0aGlzLmltYWdlSXRlbXMucHVzaChpbWFnZUl0ZW0pO1xuXG4gICAgICAgICAgY29uc3QgdGlsZVNvdXJjZSA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdsZWdhY3ktaW1hZ2UtcHlyYW1pZCcsXG4gICAgICAgICAgICBsZXZlbHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW0ud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBpdGVtLmhlaWdodFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRoaXMudmlld2VyPy5hZGRUaWxlZEltYWdlKHtcbiAgICAgICAgICAgIHByZWxvYWQ6IHRydWUsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgeDogaW1hZ2VJdGVtLmJvdW5kcy54LFxuICAgICAgICAgICAgeTogaW1hZ2VJdGVtLmJvdW5kcy55LFxuICAgICAgICAgICAgd2lkdGg6IGltYWdlSXRlbS5ib3VuZHMud2lkdGgsXG4gICAgICAgICAgICBzdWNjZXNzOiAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICBpbWFnZUl0ZW0udGlsZWRJbWFnZSA9IGV2ZW50Lml0ZW0gYXMgT3BlblNlYWRyYWdvbi5UaWxlZEltYWdlO1xuICAgICAgICAgICAgICB0aGlzLl91cGRhdGVJbWFnZVZpc2liaWxpdHkoKTtcblxuICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29taWMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpbGVTb3VyY2VcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNJbWFnZUl0ZW0gPSB0aGlzLmltYWdlSXRlbXNbaSAtIDFdO1xuXG4gICAgICAgICAgICB0aGlzLnZpZXdlcj8uYWRkVGlsZWRJbWFnZSh7XG4gICAgICAgICAgICAgIHByZWxvYWQ6IHRydWUsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgIHg6IHByZXZpb3VzSW1hZ2VJdGVtLmJvdW5kcy54LFxuICAgICAgICAgICAgICB5OiBwcmV2aW91c0ltYWdlSXRlbS5ib3VuZHMueSxcbiAgICAgICAgICAgICAgd2lkdGg6IHByZXZpb3VzSW1hZ2VJdGVtLmJvdW5kcy53aWR0aCxcbiAgICAgICAgICAgICAgc3VjY2VzczogKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpbWFnZUl0ZW0ucHJlbG9hZFRpbGVkSW1hZ2UgPSBldmVudC5pdGVtIGFzIE9wZW5TZWFkcmFnb24uVGlsZWRJbWFnZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdGlsZVNvdXJjZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmZyYW1lcy5mb3JFYWNoKChmcmFtZSwgZnJhbWVJbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZyYW1lQXJlYSA9IGZyYW1lLmJvdW5kcy53aWR0aCAqIGZyYW1lLmJvdW5kcy5oZWlnaHQ7XG5cbiAgICAgICAgICB0aGlzLmltYWdlSXRlbXMuZm9yRWFjaCgoaW1hZ2VJdGVtLCBpbWFnZUluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWltYWdlSXRlbS5oaWRlVW50aWxGcmFtZSB8fCBpbWFnZUl0ZW0uaGlkZVVudGlsRnJhbWUgPD0gZnJhbWVJbmRleCkge1xuICAgICAgICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBmcmFtZS5ib3VuZHMuaW50ZXJzZWN0aW9uKGltYWdlSXRlbS5ib3VuZHMpO1xuICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJlYSA9IGludGVyc2VjdGlvbi53aWR0aCAqIGludGVyc2VjdGlvbi5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBmcmFtZS5pbWFnZXMucHVzaCh7IGltYWdlSXRlbSwgaW1hZ2VJbmRleCwgZnJhbWVGaWxsRmFjdG9yOiBhcmVhIC8gZnJhbWVBcmVhIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBTb3J0IHByaW1hcnkgaW1hZ2UgZmlyc3QsIGJhc2VkIG9uIGhvdyBtdWNoIGl0IGZpbGxzIHRoZSBmcmFtZS4gT24gYSB0aWUsIHByZWZlciBsYXRlciBpbWFnZXMuXG4gICAgICAgICAgLy8gVE9ETzogQWNjb3VudCBmb3IgaW1hZ2VzIGhpZGRlbiB1bmRlciBvdGhlciBpbWFnZXMgYmV0dGVyLlxuICAgICAgICAgIGZyYW1lLmltYWdlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBpZiAoYS5mcmFtZUZpbGxGYWN0b3IgPiBiLmZyYW1lRmlsbEZhY3Rvcikge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhLmZyYW1lRmlsbEZhY3RvciA8IGIuZnJhbWVGaWxsRmFjdG9yKSB7XG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYS5pbWFnZUluZGV4ID4gYi5pbWFnZUluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGEuaW1hZ2VJbmRleCA8IGIuaW1hZ2VJbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqIFJlbW92ZSB0aGUgY29taWMgZnJvbSB0aGUgc2NyZWVuICovXG4gIGNsb3NlQ29taWMoKSB7XG4gICAgdGhpcy5pbWFnZUl0ZW1zID0gW107XG4gICAgdGhpcy5mcmFtZXMgPSBbXTtcbiAgICB0aGlzLmZyYW1lUGF0aCA9IFtdO1xuICAgIHRoaXMuZnJhbWVJbmRleCA9IC0xO1xuICAgIHRoaXMuZnJhbWVJbmRleEhpbnQgPSAtMTtcbiAgICB0aGlzLm1heFNjcm9sbFZhbHVlID0gMDtcbiAgICB0aGlzLmNvbWljTG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy52aWV3ZXI/LmNsb3NlKCk7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tXG4gIF9zdGFydENvbWljKCkge1xuICAgIHRoaXMuY29taWNMb2FkZWQgPSB0cnVlO1xuICAgIHRoaXMuZ29Ub0ZyYW1lKDApO1xuXG4gICAgaWYgKHRoaXMub25Db21pY0xvYWQpIHtcbiAgICAgIHRoaXMub25Db21pY0xvYWQoe30pO1xuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS1cbiAgX3VwZGF0ZUltYWdlVmlzaWJpbGl0eSgpIHtcbiAgICB0aGlzLmltYWdlSXRlbXMuZm9yRWFjaCgoaW1hZ2VJdGVtKSA9PiB7XG4gICAgICBpZiAoaW1hZ2VJdGVtLmhpZGVVbnRpbEZyYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW1hZ2VJdGVtLnRhcmdldE9wYWNpdHkgPSB0aGlzLmZyYW1lSW5kZXggPCBpbWFnZUl0ZW0uaGlkZVVudGlsRnJhbWUgPyAwIDogMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS1cbiAgX2FuaW1hdGlvbkZyYW1lKCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZSk7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCB0aW1lU2xpY2UgPSBub3cgLSB0aGlzLmxhc3RBbmltYXRpb25UaW1lO1xuICAgIHRoaXMubGFzdEFuaW1hdGlvblRpbWUgPSBub3c7XG5cbiAgICB0aGlzLmltYWdlSXRlbXMuZm9yRWFjaCgoaW1hZ2VJdGVtKSA9PiB7XG4gICAgICBjb25zdCB0aWxlZEltYWdlID0gaW1hZ2VJdGVtLnRpbGVkSW1hZ2U7XG4gICAgICBjb25zdCBwcmVsb2FkVGlsZWRJbWFnZSA9IGltYWdlSXRlbS5wcmVsb2FkVGlsZWRJbWFnZTtcbiAgICAgIGlmIChcbiAgICAgICAgdGlsZWRJbWFnZSAmJlxuICAgICAgICAodGlsZWRJbWFnZS5nZXRGdWxseUxvYWRlZCgpIHx8IChwcmVsb2FkVGlsZWRJbWFnZSAmJiBwcmVsb2FkVGlsZWRJbWFnZS5nZXRGdWxseUxvYWRlZCgpKSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCBvcGFjaXR5ID0gdGlsZWRJbWFnZS5nZXRPcGFjaXR5KCk7XG4gICAgICAgIGlmIChvcGFjaXR5ICE9PSBpbWFnZUl0ZW0udGFyZ2V0T3BhY2l0eSkge1xuICAgICAgICAgIGNvbnN0IGZhY3RvciA9IHRoaXMuZmFkZVNlY29uZHMgPyB0aW1lU2xpY2UgLyAodGhpcy5mYWRlU2Vjb25kcyAqIDEwMDApIDogMTtcbiAgICAgICAgICB0aWxlZEltYWdlLnNldE9wYWNpdHkoXG4gICAgICAgICAgICBjbGFtcChvcGFjaXR5ICsgc2lnbihpbWFnZUl0ZW0udGFyZ2V0T3BhY2l0eSAtIG9wYWNpdHkpICogZmFjdG9yLCAwLCAxKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnNjcm9sbCkge1xuICAgICAgY29uc3QgZXBzaWxvbiA9IDAuMDAwMDE7XG4gICAgICBsZXQgYW1vdW50ID0gTWF0aC5hYnModGhpcy5zY3JvbGwudGFyZ2V0IC0gdGhpcy5zY3JvbGwudmFsdWUpICogMC4xO1xuICAgICAgYW1vdW50ID0gTWF0aC5tYXgoYW1vdW50LCBlcHNpbG9uKTtcbiAgICAgIGFtb3VudCA9IE1hdGgubWluKGFtb3VudCwgc2Nyb2xsUXVhbnR1bSkgKiB0aGlzLnNjcm9sbC5kaXJlY3Rpb247XG4gICAgICB0aGlzLnNjcm9sbC52YWx1ZSArPSBhbW91bnQ7XG5cbiAgICAgIGlmICh0aGlzLnNjcm9sbC5kaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgIGlmICh0aGlzLnNjcm9sbC52YWx1ZSA+PSB0aGlzLnNjcm9sbC50YXJnZXQgLSBlcHNpbG9uKSB7XG4gICAgICAgICAgdGhpcy5zY3JvbGwudmFsdWUgPSB0aGlzLnNjcm9sbC50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLnNjcm9sbC52YWx1ZSA8PSB0aGlzLnNjcm9sbC50YXJnZXQgKyBlcHNpbG9uKSB7XG4gICAgICAgICAgdGhpcy5zY3JvbGwudmFsdWUgPSB0aGlzLnNjcm9sbC50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdXBkYXRlRm9yU2Nyb2xsVmFsdWUoKTtcblxuICAgICAgY29uc3QgdGltZURpZmYgPSBEYXRlLm5vdygpIC0gdGhpcy5zY3JvbGwudGltZTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRpbWVEaWZmLCB0aGlzLnNjcm9sbC52YWx1ZSwgdGhpcy5zY3JvbGwudGFyZ2V0KTtcbiAgICAgIGlmICh0aGlzLnNjcm9sbC52YWx1ZSA9PT0gdGhpcy5zY3JvbGwudGFyZ2V0ICYmIHRpbWVEaWZmID4gMjApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuc2Nyb2xsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS1cbiAgX3VwZGF0ZUZvclNjcm9sbFZhbHVlKCkge1xuICAgIGlmICh0aGlzLnZpZXdlciAmJiB0aGlzLnNjcm9sbCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZyYW1lUGF0aC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgY29uc3QgYUluZGV4ID0gaTtcbiAgICAgICAgY29uc3QgYkluZGV4ID0gaSArIDE7XG4gICAgICAgIGNvbnN0IGEgPSB0aGlzLmZyYW1lUGF0aFthSW5kZXhdO1xuICAgICAgICBjb25zdCBiID0gdGhpcy5mcmFtZVBhdGhbYkluZGV4XTtcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsLnZhbHVlID49IGEuc2Nyb2xsICYmIHRoaXMuc2Nyb2xsLnZhbHVlIDw9IGIuc2Nyb2xsKSB7XG4gICAgICAgICAgbGV0IG5ld0ZyYW1lSW5kZXg7XG4gICAgICAgICAgaWYgKHRoaXMuc2Nyb2xsLmRpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgICAgIG5ld0ZyYW1lSW5kZXggPSB0aGlzLnNjcm9sbC52YWx1ZSA9PT0gYS5zY3JvbGwgPyBhSW5kZXggOiBiSW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0ZyYW1lSW5kZXggPSB0aGlzLnNjcm9sbC52YWx1ZSA9PT0gYi5zY3JvbGwgPyBiSW5kZXggOiBhSW5kZXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5mcmFtZUluZGV4SGludCA9IG5ld0ZyYW1lSW5kZXg7XG5cbiAgICAgICAgICBjb25zdCBmYWN0b3IgPSBtYXBMaW5lYXIodGhpcy5zY3JvbGwudmFsdWUsIGEuc2Nyb2xsLCBiLnNjcm9sbCwgMCwgMSk7XG5cbiAgICAgICAgICBjb25zdCBhQm91bmRzID0gdGhpcy5fZ2V0Qm91bmRzRm9yRnJhbWUoYS5mcmFtZSk7XG4gICAgICAgICAgY29uc3QgYkJvdW5kcyA9IHRoaXMuX2dldEJvdW5kc0ZvckZyYW1lKGIuZnJhbWUpO1xuXG4gICAgICAgICAgbGV0IGVhcmxpZXJCb3VuZHMsIGxhdGVyQm91bmRzO1xuICAgICAgICAgIGlmICh0aGlzLnNjcm9sbC5zdGFydEluZGV4ID09PSBhSW5kZXggfHwgdGhpcy5zY3JvbGwuc3RhcnRJbmRleCA9PT0gYkluZGV4KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zY3JvbGwuZGlyZWN0aW9uID4gMCkge1xuICAgICAgICAgICAgICBlYXJsaWVyQm91bmRzID0gdGhpcy5zY3JvbGwuc3RhcnRCb3VuZHM7XG4gICAgICAgICAgICAgIGxhdGVyQm91bmRzID0gYkJvdW5kcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVhcmxpZXJCb3VuZHMgPSBhQm91bmRzO1xuICAgICAgICAgICAgICBsYXRlckJvdW5kcyA9IHRoaXMuc2Nyb2xsLnN0YXJ0Qm91bmRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbC5zdGFydEluZGV4ID0gLTE7XG4gICAgICAgICAgICBlYXJsaWVyQm91bmRzID0gYUJvdW5kcztcbiAgICAgICAgICAgIGxhdGVyQm91bmRzID0gYkJvdW5kcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBuZXdCb3VuZHMgPSBuZXcgT3BlblNlYWRyYWdvbiEuUmVjdChcbiAgICAgICAgICAgIG1hcExpbmVhcihmYWN0b3IsIDAsIDEsIGVhcmxpZXJCb3VuZHMueCwgbGF0ZXJCb3VuZHMueCksXG4gICAgICAgICAgICBtYXBMaW5lYXIoZmFjdG9yLCAwLCAxLCBlYXJsaWVyQm91bmRzLnksIGxhdGVyQm91bmRzLnkpLFxuICAgICAgICAgICAgbWFwTGluZWFyKGZhY3RvciwgMCwgMSwgZWFybGllckJvdW5kcy53aWR0aCwgbGF0ZXJCb3VuZHMud2lkdGgpLFxuICAgICAgICAgICAgbWFwTGluZWFyKGZhY3RvciwgMCwgMSwgZWFybGllckJvdW5kcy5oZWlnaHQsIGxhdGVyQm91bmRzLmhlaWdodClcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgdGhpcy52aWV3ZXIudmlld3BvcnQuZml0Qm91bmRzKG5ld0JvdW5kcywgdHJ1ZSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBEZXRlcm1pbmUgaWYgdGhlIGZyYW1lIG5hdmlnYXRpb24gY29udHJvbHMgYXJlIGN1cnJlbnRseSBhYmxlIHRvIGJlIHVzZWQgdG8gbmF2aWdhdGUgKi9cbiAgZ2V0TmF2RW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5uYXZFbmFibGVkO1xuICB9XG5cbiAgLyoqIEVuYWJsZSAvIERpc2FibGUgZnJhbWUgbmF2aWdhdGlvbiBjb250cm9scyAqL1xuICBzZXROYXZFbmFibGVkKGZsYWc6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm5hdkVuYWJsZWQgPSBmbGFnO1xuICAgIHRoaXMudmlld2VyPy5zZXRNb3VzZU5hdkVuYWJsZWQoZmxhZyk7XG4gIH1cblxuICAvKiogR2V0IGhvdyBtYW55IHNlY29uZHMgaXQgdGFrZXMgdG8gZmFkZSBhbiBpbWFnZSBvbiAqL1xuICBnZXRGYWRlU2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5mYWRlU2Vjb25kcztcbiAgfVxuXG4gIC8qKiBTZXQgaG93IG1hbnkgc2Vjb25kcyBpdCB0YWtlcyB0byBmYWRlIGFuIGltYWdlIG9uICovXG4gIHNldEZhZGVTZWNvbmRzKGZhZGVTZWNvbmRzOiBudW1iZXIpIHtcbiAgICB0aGlzLmZhZGVTZWNvbmRzID0gZmFkZVNlY29uZHM7XG4gIH1cblxuICAvKiogTmF2aWdhdGUgdG8gYSBzcGVjaWZpYyBmcmFtZSB2aWEgaXRzIGluZGV4IG51bWJlciAqL1xuICBnb1RvRnJhbWUoaW5kZXg6IG51bWJlcikge1xuICAgIGlmICh0aGlzLmdldEZyYW1lSW5kZXgoKSAhPT0gaW5kZXgpIHtcbiAgICAgIHZhciBmcmFtZSA9IHRoaXMuZnJhbWVzW2luZGV4XTtcbiAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICB0aGlzLmZyYW1lSW5kZXhIaW50ID0gaW5kZXg7XG5cbiAgICAgICAgdmFyIGJveCA9IHRoaXMuX2dldEJvdW5kc0ZvckZyYW1lKGZyYW1lKTtcbiAgICAgICAgdGhpcy52aWV3ZXI/LnZpZXdwb3J0LmZpdEJvdW5kcyhib3gpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS1cbiAgX2dldEJvdW5kc0ZvckZyYW1lKGZyYW1lOiBGcmFtZSkge1xuICAgIGlmIChmcmFtZS5rZXlCb3VuZHMgJiYgdGhpcy52aWV3ZXIpIHtcbiAgICAgIGNvbnN0IHsgYm91bmRzLCBrZXlCb3VuZHMgfSA9IGZyYW1lO1xuICAgICAgbGV0IHgsIHksIGhlaWdodDtcblxuICAgICAgY29uc3Qgdmlld3BvcnRCb3VuZHMgPSB0aGlzLnZpZXdlci52aWV3cG9ydC5nZXRCb3VuZHMoKTtcbiAgICAgIGNvbnN0IGFzcGVjdCA9IHZpZXdwb3J0Qm91bmRzLndpZHRoIC8gdmlld3BvcnRCb3VuZHMuaGVpZ2h0O1xuICAgICAgbGV0IHdpZHRoID0gYm91bmRzLmhlaWdodCAqIGFzcGVjdDtcbiAgICAgIGlmICh3aWR0aCA8IGJvdW5kcy53aWR0aCkge1xuICAgICAgICBoZWlnaHQgPSBib3VuZHMuaGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2lkdGggPSBib3VuZHMud2lkdGg7XG4gICAgICAgIGhlaWdodCA9IGJvdW5kcy53aWR0aCAvIGFzcGVjdDtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpZHRoIDwga2V5Qm91bmRzLndpZHRoKSB7XG4gICAgICAgIHggPSBrZXlCb3VuZHMueDtcbiAgICAgICAgd2lkdGggPSBrZXlCb3VuZHMud2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB3aWR0aEV4dHJhID0gYm91bmRzLndpZHRoIC0ga2V5Qm91bmRzLndpZHRoO1xuICAgICAgICBjb25zdCBsZWZ0RXh0cmEgPSBrZXlCb3VuZHMueCAtIGJvdW5kcy54O1xuICAgICAgICBjb25zdCBsZWZ0RmFjdG9yID0gbGVmdEV4dHJhIC8gd2lkdGhFeHRyYTtcbiAgICAgICAgY29uc3QgbmV3V2lkdGhFeHRyYSA9IHdpZHRoIC0ga2V5Qm91bmRzLndpZHRoO1xuICAgICAgICB4ID0ga2V5Qm91bmRzLnggLSBuZXdXaWR0aEV4dHJhICogbGVmdEZhY3RvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGhlaWdodCA8IGtleUJvdW5kcy5oZWlnaHQpIHtcbiAgICAgICAgeSA9IGtleUJvdW5kcy55O1xuICAgICAgICBoZWlnaHQgPSBrZXlCb3VuZHMuaGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0RXh0cmEgPSBib3VuZHMuaGVpZ2h0IC0ga2V5Qm91bmRzLmhlaWdodDtcbiAgICAgICAgY29uc3QgdG9wRXh0cmEgPSBrZXlCb3VuZHMueSAtIGJvdW5kcy55O1xuICAgICAgICBjb25zdCB0b3BGYWN0b3IgPSB0b3BFeHRyYSAvIGhlaWdodEV4dHJhO1xuICAgICAgICBjb25zdCBuZXdIZWlnaHRFeHRyYSA9IGhlaWdodCAtIGtleUJvdW5kcy5oZWlnaHQ7XG4gICAgICAgIHkgPSBrZXlCb3VuZHMueSAtIG5ld0hlaWdodEV4dHJhICogdG9wRmFjdG9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IE9wZW5TZWFkcmFnb24hLlJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgdmFyIGJ1ZmZlckZhY3RvciA9IDAuMjtcbiAgICB2YXIgYm94ID0gZnJhbWUuYm91bmRzLmNsb25lKCk7XG5cbiAgICBib3gud2lkdGggKj0gMSArIGJ1ZmZlckZhY3RvcjtcbiAgICBib3guaGVpZ2h0ICo9IDEgKyBidWZmZXJGYWN0b3I7XG4gICAgYm94LnggLT0gZnJhbWUuYm91bmRzLndpZHRoICogYnVmZmVyRmFjdG9yICogMC41O1xuICAgIGJveC55IC09IGZyYW1lLmJvdW5kcy5oZWlnaHQgKiBidWZmZXJGYWN0b3IgKiAwLjU7XG4gICAgcmV0dXJuIGJveDtcbiAgfVxuXG4gIC8qKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgZnJhbWUgaW5kZXguIFRoaXMgd2lsbCBiZSB3aGF0ZXZlciBmcmFtZSBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZVxuICBzY3JlZW4uIElmIHRoZXJlIGlzIG5vIGZyYW1lIGluIHRoZSBtaWRkbGUsIGl0J2xsIGJlIHdoYXRldmVyIGZyYW1lIHRoZSB1c2VyIGxhc3QgaGFkIHRoZXJlLiAqL1xuICBnZXRGcmFtZUluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLmZyYW1lSW5kZXg7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tXG4gIF9maWd1cmVGcmFtZUluZGV4KGN1cnJlbnQ6IGJvb2xlYW4pIHtcbiAgICBsZXQgYmVzdEluZGV4ID0gLTE7XG4gICAgbGV0IGJlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgY29uc3Qgdmlld3BvcnRCb3VuZHMgPSB0aGlzLnZpZXdlci52aWV3cG9ydC5nZXRCb3VuZHMoY3VycmVudCk7XG4gICAgICBjb25zdCB2aWV3cG9ydENlbnRlciA9IHZpZXdwb3J0Qm91bmRzLmdldENlbnRlcigpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lID0gdGhpcy5mcmFtZXNbaV07XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IGZyYW1lLmJvdW5kcztcblxuICAgICAgICBpZiAoYm91bmRzLmNvbnRhaW5zUG9pbnQodmlld3BvcnRDZW50ZXIpKSB7XG4gICAgICAgICAgbGV0IGRpc3RhbmNlO1xuICAgICAgICAgIGlmICh0aGlzLmZyYW1lSW5kZXhIaW50ID09PSAtMSkge1xuICAgICAgICAgICAgZGlzdGFuY2UgPSB2aWV3cG9ydENlbnRlci5zcXVhcmVkRGlzdGFuY2VUbyhib3VuZHMuZ2V0Q2VudGVyKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKHRoaXMuZnJhbWVJbmRleEhpbnQgLSBpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGlzdGFuY2UgPCBiZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGJlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgICAgYmVzdEluZGV4ID0gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmVzdEluZGV4O1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLVxuICBfZ2V0SGl0RnJhbWUocG9pbnQ6IE9wZW5TZWFkcmFnb24uUG9pbnQpIHtcbiAgICBsZXQgYmVzdEluZGV4ID0gLTE7XG5cbiAgICBpZiAodGhpcy52aWV3ZXIpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZnJhbWUgPSB0aGlzLmZyYW1lc1tpXTtcbiAgICAgICAgY29uc3QgYm91bmRzID0gZnJhbWUuYm91bmRzO1xuXG4gICAgICAgIGlmIChib3VuZHMuY29udGFpbnNQb2ludChwb2ludCkpIHtcbiAgICAgICAgICBpZiAodGhpcy5mcmFtZUluZGV4ID09PSBpKSB7XG4gICAgICAgICAgICBiZXN0SW5kZXggPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGJlc3RJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGJlc3RJbmRleCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJlc3RJbmRleDtcbiAgfVxuXG4gIC8qKiBSZXR1cm4gdGhlIHRvdGFsIG51bWJlciBvZiBmcmFtZXMgZm91bmQgaW4gdGhlIGNvbWljIHNlcXVlbmNlICovXG4gIGdldEZyYW1lQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVzLmxlbmd0aDtcbiAgfVxuXG4gIC8qKiBSZXR1cm4gYW4gb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGZyYW1lIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXggKi9cbiAgZ2V0RnJhbWUoZnJhbWVJbmRleDogbnVtYmVyKTogRnJhbWVJbmZvIHwgbnVsbCB7XG4gICAgY29uc3QgZnJhbWUgPSB0aGlzLmZyYW1lc1tmcmFtZUluZGV4XTtcbiAgICBpZiAoIWZyYW1lKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYm91bmRzOiBmcmFtZS5ib3VuZHMuY2xvbmUoKSxcbiAgICAgIGltYWdlczogZnJhbWUuaW1hZ2VzLm1hcCgoZnJhbWVJbWFnZSkgPT4ge1xuICAgICAgICBjb25zdCBpbWFnZUl0ZW0gPSBmcmFtZUltYWdlLmltYWdlSXRlbTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVybDogaW1hZ2VJdGVtLnVybCxcbiAgICAgICAgICBib3VuZHM6IGltYWdlSXRlbS5ib3VuZHMuY2xvbmUoKSxcbiAgICAgICAgICBoaWRlVW50aWxGcmFtZTogaW1hZ2VJdGVtLmhpZGVVbnRpbEZyYW1lLFxuICAgICAgICAgIGZyYW1lRmlsbEZhY3RvcjogZnJhbWVJbWFnZS5mcmFtZUZpbGxGYWN0b3IsXG4gICAgICAgICAgaW5kZXg6IGZyYW1lSW1hZ2UuaW1hZ2VJbmRleFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICB9O1xuICB9XG5cbiAgLyoqIFJldHVybiB0aGUgdG90YWwgbnVtYmVyIG9mIGltYWdlcyBmb3VuZCBpbiB0aGUgY29taWMgKi9cbiAgZ2V0SW1hZ2VDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbWFnZUl0ZW1zLmxlbmd0aDtcbiAgfVxuXG4gIC8qKiBOYXZpZ2F0ZSB0byB0aGUgbmV4dCBmcmFtZSBpbiB0aGUgc2VxdWVuY2UgKi9cbiAgZ29Ub05leHRGcmFtZSgpIHtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmdldEZyYW1lSW5kZXgoKTtcbiAgICBpZiAoaW5kZXggPCB0aGlzLmZyYW1lcy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLmdvVG9GcmFtZShpbmRleCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uTm9OZXh0KHt9KTtcbiAgICB9XG4gIH1cblxuICAvKiogTmF2aWdhdGUgdG8gdGhlIHByZXZpb3VzIGZyYW1lIGluIHRoZSBzZXF1ZW5jZSAqL1xuICBnb1RvUHJldmlvdXNGcmFtZSgpIHtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmdldEZyYW1lSW5kZXgoKTtcbiAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICB0aGlzLmdvVG9GcmFtZShpbmRleCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uTm9QcmV2aW91cyh7fSk7XG4gICAgfVxuICB9XG59XG4iLCIvLyAtLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gbWFwTGluZWFyKFxuICB4OiBudW1iZXIsXG4gIGExOiBudW1iZXIsXG4gIGEyOiBudW1iZXIsXG4gIGIxOiBudW1iZXIsXG4gIGIyOiBudW1iZXIsXG4gIGNsYW1wPzogYm9vbGVhblxuKTogbnVtYmVyIHtcbiAgY29uc29sZS5hc3NlcnQoYTEgIT09IGEyLCAnYTEgYW5kIGEyIG11c3QgYmUgZGlmZmVyZW50Jyk7XG4gIHZhciBvdXRwdXQgPSBiMSArICgoeCAtIGExKSAqIChiMiAtIGIxKSkgLyAoYTIgLSBhMSk7XG4gIGlmIChjbGFtcCkge1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbihiMSwgYjIpO1xuICAgIHZhciBtYXggPSBNYXRoLm1heChiMSwgYjIpO1xuICAgIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgb3V0cHV0KSk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG4vLyAtLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gdmVjdG9yVG9Qb2xhcih4OiBudW1iZXIsIHk6IG51bWJlcik6IHsgcmFkaWFuczogbnVtYmVyOyBkaXN0YW5jZTogbnVtYmVyIH0ge1xuICByZXR1cm4ge1xuICAgIHJhZGlhbnM6IE1hdGguYXRhbjIoeSwgeCksXG4gICAgZGlzdGFuY2U6IE1hdGguc3FydCh4ICogeCArIHkgKiB5KVxuICB9O1xufVxuXG4vLyAtLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gcG9sYXJUb1ZlY3RvcihyYWRpYW5zOiBudW1iZXIsIGRpc3RhbmNlOiBudW1iZXIpOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0ge1xuICByZXR1cm4ge1xuICAgIHg6IE1hdGguY29zKHJhZGlhbnMpICogZGlzdGFuY2UsXG4gICAgeTogTWF0aC5zaW4ocmFkaWFucykgKiBkaXN0YW5jZVxuICB9O1xufVxuXG4vLyAtLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAoeDogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHgpKTtcbn1cblxuLy8gLS0tLS0tLS0tLVxuZXhwb3J0IGZ1bmN0aW9uIHNpZ24oeDogbnVtYmVyKSB7XG4gIGlmICh4IDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGlmICh4ID4gMCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG4iXX0="}