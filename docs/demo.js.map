{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@dan503/load-js/index.js","src/demo/demo.ts","src/library/driftory.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar alreadyCalledSources = [];\r\nvar awaitingCallbacks = {};\r\nvar addCallback = function (src, callback) {\r\n    if (awaitingCallbacks[src]) {\r\n        awaitingCallbacks[src].push(callback);\r\n    }\r\n    else {\r\n        awaitingCallbacks[src] = [callback];\r\n    }\r\n};\r\nfunction loadJS(src, callback) {\r\n    if (alreadyCalledSources.indexOf(src) < 0) {\r\n        alreadyCalledSources.push(src);\r\n        var script = document.createElement('script');\r\n        script.src = src;\r\n        script.onload = function () {\r\n            addCallback(src, callback);\r\n            for (var key in awaitingCallbacks) {\r\n                awaitingCallbacks[key].forEach(function (cb) { return cb(); });\r\n            }\r\n        };\r\n        document.head.appendChild(script);\r\n    }\r\n    else {\r\n        addCallback(src, callback);\r\n    }\r\n}\r\nexports.default = loadJS;\r\n","import Driftory from '../library/driftory';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const nextButton = document.querySelector('.next-button');\n  const previousButton = document.querySelector('.previous-button');\n  const frameInfo = document.querySelector('.frame-info');\n\n  const driftory = new Driftory({\n    container: document.querySelector('.driftory-viewer-container'),\n    prefixUrl: 'https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/images/',\n    onComicLoad: () => {\n      console.log('loaded!');\n    },\n    onFrameChange: ({ frameIndex = 0, isLastFrame }) => {\n      if (frameInfo) {\n        let text = `Frame ${frameIndex + 1}`;\n        if (isLastFrame) {\n          text += ' (last frame!)';\n        }\n\n        frameInfo.textContent = text;\n      }\n    }\n  });\n\n  nextButton?.addEventListener('click', () => {\n    driftory.goToNextFrame();\n  });\n\n  previousButton?.addEventListener('click', () => {\n    driftory.goToPreviousFrame();\n  });\n\n  fetch('comic.json')\n    .then(response => {\n      if (!response.ok) {\n        console.error(response);\n        throw new Error('Failed to load comic.json');\n      }\n\n      return response.json();\n    })\n    .then(json => {\n      // console.log(json);\n      driftory.openComic(json.comic);\n    })\n    .catch(error => console.error(error));\n});\n","import loadJs from '@dan503/load-js';\nimport { Comic } from './Comic.types';\nimport { OpenSeadragonType, ViewerType } from './openseadragon.types';\n\ninterface OsdRequest {\n  resolve: (value?: unknown) => void;\n  reject: (reason?: any) => void;\n}\n\nlet OpenSeadragon: OpenSeadragonType | undefined;\nlet osdRequest: OsdRequest | undefined;\n\ndeclare global {\n  interface Window {\n    OpenSeadragon: OpenSeadragonType;\n  }\n}\n\nconst osdPromise = new Promise((resolve, reject) => {\n  osdRequest = { resolve, reject };\n});\n\ntype Frame = any;\ntype Container = any;\ntype OnFrameChange = (params: { frameIndex?: number; isLastFrame: boolean }) => void;\ntype OnComicLoad = (params: {}) => void;\n\ninterface DriftoryArguments {\n  container: any;\n  onFrameChange: OnFrameChange;\n  onComicLoad: OnComicLoad;\n  prefixUrl: string;\n}\n\nexport default class Driftory {\n  container: Container;\n  onFrameChange: OnFrameChange;\n  onComicLoad: OnComicLoad;\n  frames: Array<Frame> = [];\n  frameIndex?: number = -1;\n  lastScrollTime: number = 0;\n  scrollDelay: number = 2000;\n  viewer?: ViewerType;\n\n  constructor(args: DriftoryArguments) {\n    this.container = args.container;\n    this.onFrameChange = args.onFrameChange;\n    this.onComicLoad = args.onComicLoad;\n\n    // Note: loadJs only loads the file once, even if called multiple times, and always makes sure\n    // all of the callbacks are called.\n    loadJs(\n      'https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js',\n      () => {\n        OpenSeadragon = window.OpenSeadragon;\n        this.initialize(args);\n        osdRequest?.resolve();\n      }\n    );\n  }\n\n  initialize({ container, prefixUrl }: DriftoryArguments) {\n    this.viewer =\n      OpenSeadragon &&\n      OpenSeadragon({\n        element: container,\n        prefixUrl: prefixUrl,\n        showNavigationControl: false,\n        maxZoomPixelRatio: 10,\n        gestureSettingsMouse: {\n          clickToZoom: false\n        }\n      });\n\n    if (this.viewer) {\n      // TODO: Maybe don't need to do this every frame.\n      this.viewer.addHandler('animation', () => {\n        const frameIndex = this.figureFrameIndex();\n        if (frameIndex !== -1 && frameIndex !== this.frameIndex) {\n          this.frameIndex = frameIndex;\n          if (this.onFrameChange) {\n            this.onFrameChange({\n              frameIndex,\n              isLastFrame: frameIndex === this.getFrameCount() - 1\n            });\n          }\n        }\n      });\n\n      this.viewer.addHandler('canvas-click', event => {\n        if (!event || !event.quick || !event.position || !this.viewer) {\n          return;\n        }\n\n        const point = this.viewer.viewport.pointFromPixel(event.position);\n        let foundIndex = -1;\n        const itemCount = this.viewer.world.getItemCount();\n\n        for (let i = 0; i < itemCount; i++) {\n          const item = this.viewer.world.getItemAt(i);\n          if (item.getBounds().containsPoint(point)) {\n            foundIndex = i;\n          }\n        }\n\n        if (foundIndex === -1) {\n          const realFrameIndex = this.figureFrameIndex();\n          if (realFrameIndex === -1 && this.frameIndex !== undefined) {\n            this.goToFrame(this.frameIndex);\n          } else {\n            this.goToNextFrame();\n          }\n        } else if (foundIndex === this.frameIndex) {\n          this.goToNextFrame();\n        } else {\n          this.goToFrame(foundIndex);\n        }\n      });\n\n      const originalScrollHandler = this.viewer.innerTracker.scrollHandler;\n      this.viewer.innerTracker.scrollHandler = event => {\n        if (\n          event.originalEvent.ctrlKey ||\n          event.originalEvent.altKey ||\n          event.originalEvent.metaKey\n        ) {\n          return originalScrollHandler.call(this.viewer?.innerTracker, event);\n        }\n\n        const now = Date.now();\n        // console.log(event.scroll, now, now - this.lastScrollTime);\n        if (now - this.lastScrollTime < this.scrollDelay) {\n          // Returning false stops the browser from scrolling itself.\n          return false;\n        }\n\n        this.lastScrollTime = now;\n        if (event.scroll < 0) {\n          this.goToNextFrame();\n        } else {\n          this.goToPreviousFrame();\n        }\n\n        // Returning false stops the browser from scrolling itself.\n        return false;\n      };\n\n      window.addEventListener('keydown', event => {\n        if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n          return;\n        }\n\n        if (event.key === 'ArrowRight' || event.key === 'ArrowDown' || event.key === ' ') {\n          this.goToNextFrame();\n        } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {\n          this.goToPreviousFrame();\n        } else {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n      });\n    }\n  }\n\n  openComic(comic: Comic) {\n    osdPromise.then(() => {\n      this.container.style.backgroundColor = comic.body.backgroundColor;\n\n      if (this.viewer) {\n        if (comic.body.frames) {\n          this.frames = comic.body.frames.map(frame => {\n            return (\n              OpenSeadragon &&\n              new OpenSeadragon.Rect(\n                frame.x - frame.width / 2,\n                frame.y - frame.height / 2,\n                frame.width,\n                frame.height\n              )\n            );\n          });\n        } else {\n          this.frames = comic.body.items.map(item => {\n            return (\n              OpenSeadragon &&\n              new OpenSeadragon.Rect(\n                item.x - item.width / 2,\n                item.y - item.height / 2,\n                item.width,\n                item.height\n              )\n            );\n          });\n        }\n\n        comic.body.items.forEach((item, i) => {\n          var success;\n\n          if (i === 0) {\n            success = () => this.goToFrame(0);\n          }\n\n          this.viewer?.addTiledImage({\n            x: item.x - item.width / 2,\n            y: item.y - item.height / 2,\n            width: item.width,\n            success: success,\n            tileSource: {\n              type: 'legacy-image-pyramid',\n              levels: [\n                {\n                  url: item.url,\n                  width: item.width,\n                  height: item.height\n                }\n              ]\n            }\n          });\n        });\n\n        if (this.onComicLoad) {\n          this.onComicLoad({});\n        }\n      }\n    });\n  }\n\n  goToFrame(index: number) {\n    var frame = this.frames[index];\n    var bufferFactor = 0.2;\n    var box = frame.clone();\n\n    box.width *= 1 + bufferFactor;\n    box.height *= 1 + bufferFactor;\n    box.x -= frame.width * bufferFactor * 0.5;\n    box.y -= frame.height * bufferFactor * 0.5;\n\n    this.viewer?.viewport.fitBounds(box);\n  }\n\n  getFrameIndex() {\n    return this.frameIndex;\n  }\n\n  figureFrameIndex() {\n    let bestIndex = -1;\n    let bestDistance = Infinity;\n    if (this.viewer) {\n      const viewportBounds = this.viewer.viewport.getBounds(true);\n      const viewportCenter = viewportBounds.getCenter();\n\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        if (frame.containsPoint(viewportCenter)) {\n          const distance = viewportCenter.squaredDistanceTo(frame.getCenter());\n          if (distance < bestDistance) {\n            bestDistance = distance;\n            bestIndex = i;\n          }\n        }\n      }\n\n      return bestIndex;\n    }\n  }\n\n  getFrameCount() {\n    return this.frames.length;\n  }\n\n  goToNextFrame() {\n    let index = this.getFrameIndex();\n    if (index !== undefined && index < this.frames.length - 1) {\n      this.goToFrame(index + 1);\n    }\n  }\n\n  goToPreviousFrame() {\n    let index = this.getFrameIndex();\n    if (index !== undefined && index > 0) {\n      this.goToFrame(index - 1);\n    }\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}