{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@dan503/load-js/index.js","node_modules/normalize-wheel/index.js","node_modules/normalize-wheel/src/ExecutionEnvironment.js","node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js","node_modules/normalize-wheel/src/isEventSupported.js","node_modules/normalize-wheel/src/normalizeWheel.js","src/demo/demo.ts","src/library/driftory.ts","src/library/util.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar alreadyCalledScripts = [];\r\nvar allScripts = {};\r\nvar defaultScript = { hasLoaded: false, callbacks: [] };\r\nvar addCallback = function (src, callback) {\r\n    var script = allScripts[src];\r\n    if (!script)\r\n        return;\r\n    if (script.hasLoaded) {\r\n        // If the script has already been previously loaded, just run the callback immediately\r\n        callback();\r\n    }\r\n    else {\r\n        if (script.callbacks.length > 0) {\r\n            script.callbacks.push(callback);\r\n        }\r\n        else {\r\n            script.callbacks = [callback];\r\n        }\r\n    }\r\n};\r\nfunction loadJS(src, callback) {\r\n    var script = allScripts[src] || defaultScript;\r\n    allScripts[src] = script;\r\n    if (alreadyCalledScripts.indexOf(src) < 0) {\r\n        alreadyCalledScripts.push(src);\r\n        var $scriptElem = document.createElement('script');\r\n        $scriptElem.setAttribute('class', 'load-js-script');\r\n        $scriptElem.src = src;\r\n        $scriptElem.onload = function () {\r\n            addCallback(src, callback);\r\n            var updatedScript = allScripts[src];\r\n            if (updatedScript) {\r\n                updatedScript.hasLoaded = true;\r\n            }\r\n            for (var thisSource in allScripts) {\r\n                var thisScript = allScripts[thisSource] || defaultScript;\r\n                thisScript.callbacks.forEach(function (cb) { return cb(); });\r\n            }\r\n        };\r\n        document.head.appendChild($scriptElem);\r\n    }\r\n    else {\r\n        addCallback(src, callback);\r\n    }\r\n}\r\nexports.default = loadJS;\r\n","module.exports = require('./src/normalizeWheel.js');\n","/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ExecutionEnvironment\n */\n\n/*jslint evil: true */\n\n'use strict';\n\nvar canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners:\n    canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n","/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule UserAgent_DEPRECATED\n */\n\n/**\n *  Provides entirely client-side User Agent and OS detection. You should prefer\n *  the non-deprecated UserAgent module when possible, which exposes our\n *  authoritative server-side PHP-based detection to the client.\n *\n *  Usage is straightforward:\n *\n *    if (UserAgent_DEPRECATED.ie()) {\n *      //  IE\n *    }\n *\n *  You can also do version checks:\n *\n *    if (UserAgent_DEPRECATED.ie() >= 7) {\n *      //  IE7 or better\n *    }\n *\n *  The browser functions will return NaN if the browser does not match, so\n *  you can also do version compares the other way:\n *\n *    if (UserAgent_DEPRECATED.ie() < 7) {\n *      //  IE6 or worse\n *    }\n *\n *  Note that the version is a float and may include a minor version number,\n *  so you should always use range operators to perform comparisons, not\n *  strict equality.\n *\n *  **Note:** You should **strongly** prefer capability detection to browser\n *  version detection where it's reasonable:\n *\n *    http://www.quirksmode.org/js/support.html\n *\n *  Further, we have a large number of mature wrapper functions and classes\n *  which abstract away many browser irregularities. Check the documentation,\n *  grep for things, or ask on javascript@lists.facebook.com before writing yet\n *  another copy of \"event || window.event\".\n *\n */\n\nvar _populated = false;\n\n// Browsers\nvar _ie, _firefox, _opera, _webkit, _chrome;\n\n// Actual IE browser for compatibility mode\nvar _ie_real_version;\n\n// Platforms\nvar _osx, _windows, _linux, _android;\n\n// Architectures\nvar _win64;\n\n// Devices\nvar _iphone, _ipad, _native;\n\nvar _mobile;\n\nfunction _populate() {\n  if (_populated) {\n    return;\n  }\n\n  _populated = true;\n\n  // To work around buggy JS libraries that can't handle multi-digit\n  // version numbers, Opera 10's user agent string claims it's Opera\n  // 9, then later includes a Version/X.Y field:\n  //\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\n  var uas = navigator.userAgent;\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\n  var os    = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\n\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\n  _android = /Android/i.exec(uas);\n  _native = /FBAN\\/\\w+;/i.exec(uas);\n  _mobile = /Mobile/i.exec(uas);\n\n  // Note that the IE team blog would have you believe you should be checking\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\n  // Windows will send 'WOW64' instead.\n  _win64 = !!(/Win64/.exec(uas));\n\n  if (agent) {\n    _ie = agent[1] ? parseFloat(agent[1]) : (\n          agent[5] ? parseFloat(agent[5]) : NaN);\n    // IE compatibility mode\n    if (_ie && document && document.documentMode) {\n      _ie = document.documentMode;\n    }\n    // grab the \"true\" ie version from the trident token if available\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\n    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;\n\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\n    _opera   = agent[3] ? parseFloat(agent[3]) : NaN;\n    _webkit  = agent[4] ? parseFloat(agent[4]) : NaN;\n    if (_webkit) {\n      // We do not add the regexp to the above test, because it will always\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\n      // the userAgent string.\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\n    } else {\n      _chrome = NaN;\n    }\n  } else {\n    _ie = _firefox = _opera = _chrome = _webkit = NaN;\n  }\n\n  if (os) {\n    if (os[1]) {\n      // Detect OS X version.  If no version number matches, set _osx to true.\n      // Version examples:  10, 10_6_1, 10.7\n      // Parses version number as a float, taking only first two sets of\n      // digits.  If only one set of digits is found, returns just the major\n      // version number.\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\n\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\n    } else {\n      _osx = false;\n    }\n    _windows = !!os[2];\n    _linux   = !!os[3];\n  } else {\n    _osx = _windows = _linux = false;\n  }\n}\n\nvar UserAgent_DEPRECATED = {\n\n  /**\n   *  Check if the UA is Internet Explorer.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  ie: function() {\n    return _populate() || _ie;\n  },\n\n  /**\n   * Check if we're in Internet Explorer compatibility mode.\n   *\n   * @return bool true if in compatibility mode, false if\n   * not compatibility mode or not ie\n   */\n  ieCompatibilityMode: function() {\n    return _populate() || (_ie_real_version > _ie);\n  },\n\n\n  /**\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\n   * this when we don't need it -- tracked by #601957.\n   */\n  ie64: function() {\n    return UserAgent_DEPRECATED.ie() && _win64;\n  },\n\n  /**\n   *  Check if the UA is Firefox.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  firefox: function() {\n    return _populate() || _firefox;\n  },\n\n\n  /**\n   *  Check if the UA is Opera.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  opera: function() {\n    return _populate() || _opera;\n  },\n\n\n  /**\n   *  Check if the UA is WebKit.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  webkit: function() {\n    return _populate() || _webkit;\n  },\n\n  /**\n   *  For Push\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\n   */\n  safari: function() {\n    return UserAgent_DEPRECATED.webkit();\n  },\n\n  /**\n   *  Check if the UA is a Chrome browser.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  chrome : function() {\n    return _populate() || _chrome;\n  },\n\n\n  /**\n   *  Check if the user is running Windows.\n   *\n   *  @return bool `true' if the user's OS is Windows.\n   */\n  windows: function() {\n    return _populate() || _windows;\n  },\n\n\n  /**\n   *  Check if the user is running Mac OS X.\n   *\n   *  @return float|bool   Returns a float if a version number is detected,\n   *                       otherwise true/false.\n   */\n  osx: function() {\n    return _populate() || _osx;\n  },\n\n  /**\n   * Check if the user is running Linux.\n   *\n   * @return bool `true' if the user's OS is some flavor of Linux.\n   */\n  linux: function() {\n    return _populate() || _linux;\n  },\n\n  /**\n   * Check if the user is running on an iPhone or iPod platform.\n   *\n   * @return bool `true' if the user is running some flavor of the\n   *    iPhone OS.\n   */\n  iphone: function() {\n    return _populate() || _iphone;\n  },\n\n  mobile: function() {\n    return _populate() || (_iphone || _ipad || _android || _mobile);\n  },\n\n  nativeApp: function() {\n    // webviews inside of the native apps\n    return _populate() || _native;\n  },\n\n  android: function() {\n    return _populate() || _android;\n  },\n\n  ipad: function() {\n    return _populate() || _ipad;\n  }\n};\n\nmodule.exports = UserAgent_DEPRECATED;\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isEventSupported\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature =\n    document.implementation &&\n    document.implementation.hasFeature &&\n    // always returns true in newer browsers as per the standard.\n    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n    document.implementation.hasFeature('', '') !== true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM ||\n      capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = eventName in document;\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\n\nmodule.exports = isEventSupported;\n","/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule normalizeWheel\n * @typechecks\n */\n\n'use strict';\n\nvar UserAgent_DEPRECATED = require('./UserAgent_DEPRECATED');\n\nvar isEventSupported = require('./isEventSupported');\n\n\n// Reasonable defaults\nvar PIXEL_STEP  = 10;\nvar LINE_HEIGHT = 40;\nvar PAGE_HEIGHT = 800;\n\n/**\n * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is\n * complicated, thus this doc is long and (hopefully) detailed enough to answer\n * your questions.\n *\n * If you need to react to the mouse wheel in a predictable way, this code is\n * like your bestest friend. * hugs *\n *\n * As of today, there are 4 DOM event types you can listen to:\n *\n *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)\n *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari\n *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!\n *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003\n *\n * So what to do?  The is the best:\n *\n *   normalizeWheel.getEventType();\n *\n * In your event callback, use this code to get sane interpretation of the\n * deltas.  This code will return an object with properties:\n *\n *   spinX   -- normalized spin speed (use for zoom) - x plane\n *   spinY   -- \" - y plane\n *   pixelX  -- normalized distance (to pixels) - x plane\n *   pixelY  -- \" - y plane\n *\n * Wheel values are provided by the browser assuming you are using the wheel to\n * scroll a web page by a number of lines or pixels (or pages).  Values can vary\n * significantly on different platforms and browsers, forgetting that you can\n * scroll at different speeds.  Some devices (like trackpads) emit more events\n * at smaller increments with fine granularity, and some emit massive jumps with\n * linear speed or acceleration.\n *\n * This code does its best to normalize the deltas for you:\n *\n *   - spin is trying to normalize how far the wheel was spun (or trackpad\n *     dragged).  This is super useful for zoom support where you want to\n *     throw away the chunky scroll steps on the PC and make those equal to\n *     the slow and smooth tiny steps on the Mac. Key data: This code tries to\n *     resolve a single slow step on a wheel to 1.\n *\n *   - pixel is normalizing the desired scroll delta in pixel units.  You'll\n *     get the crazy differences between browsers, but at least it'll be in\n *     pixels!\n *\n *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This\n *     should translate to positive value zooming IN, negative zooming OUT.\n *     This matches the newer 'wheel' event.\n *\n * Why are there spinX, spinY (or pixels)?\n *\n *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn\n *     with a mouse.  It results in side-scrolling in the browser by default.\n *\n *   - spinY is what you expect -- it's the classic axis of a mouse wheel.\n *\n *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and\n *     probably is by browsers in conjunction with fancy 3D controllers .. but\n *     you know.\n *\n * Implementation info:\n *\n * Examples of 'wheel' event if you scroll slowly (down) by one step with an\n * average mouse:\n *\n *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)\n *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)\n *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)\n *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)\n *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)\n *\n * On the trackpad:\n *\n *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)\n *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)\n *\n * On other/older browsers.. it's more complicated as there can be multiple and\n * also missing delta values.\n *\n * The 'wheel' event is more standard:\n *\n * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\n *\n * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and\n * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain\n * backward compatibility with older events.  Those other values help us\n * better normalize spin speed.  Example of what the browsers provide:\n *\n *                          | event.wheelDelta | event.detail\n *        ------------------+------------------+--------------\n *          Safari v5/OS X  |       -120       |       0\n *          Safari v5/Win7  |       -120       |       0\n *         Chrome v17/OS X  |       -120       |       0\n *         Chrome v17/Win7  |       -120       |       0\n *                IE9/Win7  |       -120       |   undefined\n *         Firefox v4/OS X  |     undefined    |       1\n *         Firefox v4/Win7  |     undefined    |       3\n *\n */\nfunction normalizeWheel(/*object*/ event) /*object*/ {\n  var sX = 0, sY = 0,       // spinX, spinY\n      pX = 0, pY = 0;       // pixelX, pixelY\n\n  // Legacy\n  if ('detail'      in event) { sY = event.detail; }\n  if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }\n  if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }\n  if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }\n\n  // side scrolling on FF with DOMMouseScroll\n  if ( 'axis' in event && event.axis === event.HORIZONTAL_AXIS ) {\n    sX = sY;\n    sY = 0;\n  }\n\n  pX = sX * PIXEL_STEP;\n  pY = sY * PIXEL_STEP;\n\n  if ('deltaY' in event) { pY = event.deltaY; }\n  if ('deltaX' in event) { pX = event.deltaX; }\n\n  if ((pX || pY) && event.deltaMode) {\n    if (event.deltaMode == 1) {          // delta in LINE units\n      pX *= LINE_HEIGHT;\n      pY *= LINE_HEIGHT;\n    } else {                             // delta in PAGE units\n      pX *= PAGE_HEIGHT;\n      pY *= PAGE_HEIGHT;\n    }\n  }\n\n  // Fall-back if spin cannot be determined\n  if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }\n  if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }\n\n  return { spinX  : sX,\n           spinY  : sY,\n           pixelX : pX,\n           pixelY : pY };\n}\n\n\n/**\n * The best combination if you prefer spinX + spinY normalization.  It favors\n * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with\n * 'wheel' event, making spin speed determination impossible.\n */\nnormalizeWheel.getEventType = function() /*string*/ {\n  return (UserAgent_DEPRECATED.firefox())\n           ? 'DOMMouseScroll'\n           : (isEventSupported('wheel'))\n               ? 'wheel'\n               : 'mousewheel';\n};\n\nmodule.exports = normalizeWheel;\n","import Driftory from '../library/driftory';\n\nconst comicNames = [\n  // 'comic-hide-until-frame.json',\n  'comic.json',\n  'comic-no-frames.json'\n];\n\nlet comicIndex = 0;\nlet driftory: Driftory;\n\n// ----------\nfunction openComic() {\n  const comicName = comicNames[comicIndex];\n  fetch(comicName)\n    .then((response) => {\n      if (!response.ok) {\n        console.error(response);\n        throw new Error('Failed to load ' + comicName);\n      }\n\n      return response.json();\n    })\n    .then((json) => {\n      // console.log(json);\n      driftory.openComic(json);\n    })\n    .catch((error) => console.error(error));\n}\n\n// ----------\ndocument.addEventListener('DOMContentLoaded', () => {\n  // We need to cast this to HTMLDivElement because that's what Driftory needs.\n  const container = document.querySelector('.driftory-viewer-container') as HTMLDivElement | null;\n\n  const startButton = document.querySelector('.start-button');\n  const endButton = document.querySelector('.end-button');\n  const previousButton = document.querySelector('.previous-button');\n  const nextButton = document.querySelector('.next-button');\n  const hideButton = document.querySelector('.hide-button');\n  const navButton = document.querySelector('.nav-button');\n  const nextComicButton = document.querySelector('.next-comic-button');\n  const closeComicButton = document.querySelector('.close-comic-button');\n  const listImagesButton = document.querySelector('.list-images-button');\n  const frameInfo = document.querySelector('.frame-info');\n  const imageList = document.querySelector('.image-list');\n\n  if (!container) {\n    console.error('Cannot find viewer container');\n    return;\n  }\n\n  driftory = new Driftory({\n    container,\n    onComicLoad: () => {\n      console.log('loaded!');\n    },\n    onFrameChange: ({ frameIndex = 0, isLastFrame }) => {\n      if (frameInfo) {\n        let text = `Frame ${frameIndex + 1}`;\n        if (isLastFrame) {\n          text += ' (last frame!)';\n        }\n\n        frameInfo.textContent = text;\n      }\n    },\n    onNoNext: () => {\n      console.log('User trying to go past end');\n    },\n    onNoPrevious: () => {\n      console.log('User trying to go before beginning');\n    }\n  });\n\n  startButton?.addEventListener('click', () => {\n    driftory.goToFrame(0);\n  });\n\n  endButton?.addEventListener('click', () => {\n    driftory.goToFrame(driftory.getFrameCount() - 1);\n  });\n\n  previousButton?.addEventListener('click', () => {\n    driftory.goToPreviousFrame();\n  });\n\n  nextButton?.addEventListener('click', () => {\n    driftory.goToNextFrame();\n  });\n\n  hideButton?.addEventListener('click', () => {\n    container.classList.toggle('hide');\n  });\n\n  navButton?.addEventListener('click', () => {\n    const flag = !driftory.getNavEnabled();\n    driftory.setNavEnabled(flag);\n    navButton.textContent = flag ? 'disable nav' : 'enable nav';\n  });\n\n  nextComicButton?.addEventListener('click', () => {\n    comicIndex = (comicIndex + 1) % comicNames.length;\n    openComic();\n  });\n\n  closeComicButton?.addEventListener('click', () => {\n    driftory.closeComic();\n  });\n\n  listImagesButton?.addEventListener('click', () => {\n    const count = driftory.getFrameCount();\n    for (let i = 0; i < count; i++) {\n      const frame = driftory.getFrame(i);\n      if (frame?.images.length) {\n        const frameImage = frame.images[0];\n        const image = document.createElement('img');\n        image.src = frameImage.url;\n        imageList.appendChild(image);\n      }\n    }\n  });\n\n  openComic();\n});\n","import loadJs from '@dan503/load-js';\nimport { mapLinear, clamp } from './util';\nimport { Comic } from './Comic.types';\nimport { OpenSeadragonType, ViewerType } from './openseadragon.types';\nimport normalizeWheel from 'normalize-wheel';\n\ninterface OsdRequest {\n  resolve: (value?: unknown) => void;\n  reject: (reason?: any) => void;\n}\n\nlet OpenSeadragon: OpenSeadragonType | undefined;\nlet osdRequest: OsdRequest | undefined;\n\ndeclare global {\n  interface Window {\n    OpenSeadragon: OpenSeadragonType;\n  }\n}\n\nconst osdPromise = new Promise((resolve, reject) => {\n  osdRequest = { resolve, reject };\n});\n\n// Part of the external API\ninterface ImageInfo {\n  url: string;\n  bounds: OpenSeadragon.Rect;\n  hideUntilFrame?: number;\n  index: number;\n  frameFillFactor: number;\n}\n\n// Part of the external API\ninterface FrameInfo {\n  images: Array<ImageInfo>;\n  bounds: OpenSeadragon.Rect;\n}\n\n// Used internally\ninterface ImageItem {\n  url: string;\n  bounds: OpenSeadragon.Rect;\n  hideUntilFrame?: number;\n  tiledImage?: OpenSeadragon.TiledImage;\n}\n\n// Used internally\ninterface FrameImage {\n  imageItem: ImageItem;\n  imageIndex: number;\n  frameFillFactor: number;\n}\n\n// Used internally\ninterface FramePathItem {\n  scroll: number;\n  point: OpenSeadragon.Point;\n  bounds: OpenSeadragon.Rect;\n}\n\ntype Frame = { images: Array<FrameImage>; bounds: OpenSeadragon.Rect };\ntype Container = HTMLElement;\ntype OnFrameChange = (params: { frameIndex: number; isLastFrame: boolean }) => void;\ntype OnComicLoad = (params: {}) => void;\ntype OnNoNext = (params: {}) => void;\ntype OnNoPrevious = (params: {}) => void;\n\nexport interface DriftoryArguments {\n  /** The HTML DOM element that the Driftory Comic will be rendered in.  */\n  container: Container;\n  /**\n   * This library has a dependency on the [OpenSeadragon](https://openseadragon.github.io/) library.\n   *\n   * By default, OpenSeadragon will be loaded from [the JS Deliver CDN](https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js)\n   * while initializing.\n   *\n   * To prevent this, you can use this parameter to provide your own instance of OpenSeaDragon instead.\n   *  */\n  OpenSeadragon?: OpenSeadragonType;\n  /** Called whenever driftory navigates to a new frame, whether via clicking, dragging, keys, or API. */\n  onFrameChange?: OnFrameChange;\n  /** Called when the comic has finished initializing. */\n  onComicLoad?: OnComicLoad;\n  /** Called when the user tries to navigate to the next frame in the sequence\n   *  but there are no frames left to navigate to. */\n  onNoNext?: OnNoNext;\n  /** Called when the user tries to navigate to the previous frame in the sequence\n   *  but there are no frames left to navigate to. */\n  onNoPrevious?: OnNoPrevious;\n}\n\nconst scrollQuantum = 0.05;\n\nexport default class Driftory {\n  container: Container;\n  onFrameChange: OnFrameChange;\n  onComicLoad: OnComicLoad;\n  onNoNext: OnNoNext;\n  onNoPrevious: OnNoPrevious;\n  imageItems: Array<ImageItem> = [];\n  frames: Array<Frame> = [];\n  framePath: Array<FramePathItem> = [];\n  frameIndex: number = -1;\n  frameIndexHint: number = -1;\n  scrollValue: number = 0;\n  maxScrollValue: number = 0;\n  lastScrollTime: number = 0;\n  scrollDelay: number = 2000;\n  viewer?: ViewerType;\n  navEnabled: boolean = true;\n  comicLoaded: boolean = false;\n  scroll: any = null;\n\n  // ----------\n  constructor(args: DriftoryArguments) {\n    this.container = args.container;\n    this.onFrameChange = args.onFrameChange || function () {};\n    this.onComicLoad = args.onComicLoad || function () {};\n    this.onNoNext = args.onNoNext || function () {};\n    this.onNoPrevious = args.onNoPrevious || function () {};\n\n    this._animationFrame = this._animationFrame.bind(this);\n\n    if (args.OpenSeadragon) {\n      OpenSeadragon = args.OpenSeadragon;\n      this._initialize(args);\n      osdRequest?.resolve();\n    } else {\n      // Note: loadJs only loads the file once, even if called multiple times, and always makes sure\n      // all of the callbacks are called.\n      loadJs(\n        'https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js',\n        () => {\n          OpenSeadragon = window.OpenSeadragon;\n          this._initialize(args);\n          osdRequest?.resolve();\n        }\n      );\n    }\n  }\n\n  // ----------\n  _initialize({ container }: DriftoryArguments) {\n    this.viewer =\n      OpenSeadragon &&\n      OpenSeadragon({\n        element: container,\n        showNavigationControl: false,\n        maxZoomPixelRatio: 10,\n        gestureSettingsMouse: {\n          clickToZoom: false\n        }\n      });\n\n    if (this.viewer) {\n      const frameHandler = () => {\n        if (!this.comicLoaded) {\n          return;\n        }\n\n        const frameIndex = this._figureFrameIndex(false);\n        if (frameIndex !== -1 && frameIndex !== this.frameIndex) {\n          this.frameIndex = frameIndex;\n          this._updateImageVisibility();\n\n          if (this.onFrameChange) {\n            this.onFrameChange({\n              frameIndex,\n              isLastFrame: frameIndex === this.getFrameCount() - 1\n            });\n          }\n        }\n      };\n\n      this.viewer.addHandler('zoom', frameHandler);\n      this.viewer.addHandler('pan', frameHandler);\n\n      this.viewer.addHandler('canvas-click', (event) => {\n        if (!event || !event.quick || !event.position || !this.viewer || !this.navEnabled) {\n          return;\n        }\n\n        const point = this.viewer.viewport.pointFromPixel(event.position);\n        let foundIndex = this._getHitFrame(point);\n        if (foundIndex === -1) {\n          const realFrameIndex = this._figureFrameIndex(true);\n          if (realFrameIndex === -1 && this.frameIndex !== undefined) {\n            this.goToFrame(this.frameIndex);\n          } else {\n            this.goToNextFrame();\n          }\n        } else if (foundIndex === this.frameIndex) {\n          this.goToNextFrame();\n        } else {\n          this.goToFrame(foundIndex);\n        }\n      });\n\n      const originalScrollHandler = this.viewer.innerTracker.scrollHandler;\n      this.viewer.innerTracker.scrollHandler = (event) => {\n        if (!this.navEnabled) {\n          // Returning false stops the browser from scrolling itself.\n          return false;\n        }\n\n        if (\n          event.originalEvent.ctrlKey ||\n          event.originalEvent.altKey ||\n          event.originalEvent.metaKey\n        ) {\n          return originalScrollHandler.call(this.viewer?.innerTracker, event);\n        }\n\n        const normalized = normalizeWheel(event.originalEvent as WheelEvent);\n\n        if (!this.scroll || Math.abs(normalized.spinY) > 0.9) {\n          const direction = normalized.spinY < 0 ? -1 : 1;\n\n          if (!this.scroll || this.scroll.direction !== direction) {\n            this.scrollValue = this.frameIndex;\n\n            this.scroll = {\n              startIndex: this.frameIndex,\n              startBounds: this.viewer?.viewport.getBounds(true)\n            };\n          }\n\n          let target = this.scrollValue + normalized.spinY * 0.5;\n          target = direction < 0 ? Math.floor(target) : Math.ceil(target);\n          target = clamp(target, 0, this.maxScrollValue);\n\n          this.scroll.direction = direction;\n          this.scroll.target = target;\n          this.scroll.time = Date.now();\n        }\n\n        // Returning false stops the browser from scrolling itself.\n        return false;\n      };\n\n      window.addEventListener('keydown', (event) => {\n        if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey || !this.navEnabled) {\n          return;\n        }\n\n        if (event.key === 'ArrowRight' || event.key === 'ArrowDown' || event.key === ' ') {\n          this.goToNextFrame();\n        } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {\n          this.goToPreviousFrame();\n        } else {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n      });\n    }\n\n    this._animationFrame();\n  }\n\n  /** Render the comic on screen */\n  openComic(unsafeComic: Comic | string) {\n    if (this.frames.length || this.imageItems.length) {\n      this.closeComic();\n    }\n\n    const { comic } =\n      typeof unsafeComic === 'string' ? (JSON.parse(unsafeComic) as Comic) : unsafeComic;\n\n    osdPromise.then(() => {\n      this.container.style.backgroundColor = comic.body.backgroundColor;\n\n      // Get frames\n      if (this.viewer) {\n        if (comic.body.frames) {\n          this.frames = comic.body.frames.map((frame) => {\n            return {\n              images: [],\n              bounds: new OpenSeadragon!.Rect(\n                frame.x - frame.width / 2,\n                frame.y - frame.height / 2,\n                frame.width,\n                frame.height\n              )\n            };\n          });\n        } else {\n          this.frames = comic.body.items.map((item) => {\n            return {\n              images: [],\n              bounds: new OpenSeadragon!.Rect(\n                item.x - item.width / 2,\n                item.y - item.height / 2,\n                item.width,\n                item.height\n              )\n            };\n          });\n        }\n\n        // Make frame path\n        this.framePath = [];\n        let scroll = 0;\n        this.frames.forEach((frame) => {\n          const point = frame.bounds.getCenter();\n          const bounds = this._getBoundsForFrame(frame);\n\n          this.framePath.push({\n            scroll,\n            point,\n            bounds\n          });\n\n          this.maxScrollValue = scroll;\n          scroll++;\n        });\n\n        // Get image items\n        comic.body.items.forEach((item, i) => {\n          const imageItem: ImageItem = {\n            url: item.url,\n            bounds: new OpenSeadragon!.Rect(\n              item.x - item.width / 2,\n              item.y - item.height / 2,\n              item.width,\n              item.height\n            ),\n            hideUntilFrame: item.hideUntilFrame\n          };\n\n          this.imageItems.push(imageItem);\n\n          this.viewer?.addTiledImage({\n            preload: true,\n            x: imageItem.bounds.x,\n            y: imageItem.bounds.y,\n            width: imageItem.bounds.width,\n            success: (event: any) => {\n              imageItem.tiledImage = event.item as OpenSeadragon.TiledImage;\n              this._updateImageVisibility();\n\n              if (i === 0) {\n                this._startComic();\n              }\n            },\n            tileSource: {\n              type: 'legacy-image-pyramid',\n              levels: [\n                {\n                  url: item.url,\n                  width: item.width,\n                  height: item.height\n                }\n              ]\n            }\n          });\n        });\n\n        this.frames.forEach((frame, frameIndex) => {\n          const frameArea = frame.bounds.width * frame.bounds.height;\n\n          this.imageItems.forEach((imageItem, imageIndex) => {\n            if (!imageItem.hideUntilFrame || imageItem.hideUntilFrame <= frameIndex) {\n              const intersection = frame.bounds.intersection(imageItem.bounds);\n              if (intersection) {\n                const area = intersection.width * intersection.height;\n\n                frame.images.push({ imageItem, imageIndex, frameFillFactor: area / frameArea });\n              }\n            }\n          });\n\n          // Sort primary image first, based on how much it fills the frame. On a tie, prefer later images.\n          // TODO: Account for images hidden under other images better.\n          frame.images.sort((a, b) => {\n            if (a.frameFillFactor > b.frameFillFactor) {\n              return -1;\n            }\n\n            if (a.frameFillFactor < b.frameFillFactor) {\n              return 1;\n            }\n\n            if (a.imageIndex > b.imageIndex) {\n              return -1;\n            }\n\n            if (a.imageIndex < b.imageIndex) {\n              return 1;\n            }\n\n            return 0;\n          });\n        });\n      }\n    });\n  }\n\n  /** Remove the comic from the screen */\n  closeComic() {\n    this.imageItems = [];\n    this.frames = [];\n    this.framePath = [];\n    this.frameIndex = -1;\n    this.frameIndexHint = -1;\n    this.scrollValue = 0;\n    this.maxScrollValue = 0;\n    this.lastScrollTime = 0;\n    this.comicLoaded = false;\n    this.viewer?.close();\n  }\n\n  // ----------\n  _startComic() {\n    this.comicLoaded = true;\n    this.scrollValue = 0;\n    this.goToFrame(0);\n\n    if (this.onComicLoad) {\n      this.onComicLoad({});\n    }\n  }\n\n  // ----------\n  _updateImageVisibility() {\n    this.imageItems.forEach((imageItem) => {\n      if (imageItem.hideUntilFrame !== undefined) {\n        imageItem.tiledImage?.setOpacity(this.frameIndex < imageItem.hideUntilFrame ? 0 : 1);\n      }\n    });\n  }\n\n  // ----------\n  _animationFrame() {\n    requestAnimationFrame(this._animationFrame);\n\n    if (this.scroll) {\n      const epsilon = 0.00001;\n      let amount = Math.abs(this.scroll.target - this.scrollValue) * 0.1;\n      amount = Math.max(amount, epsilon);\n      amount = Math.min(amount, scrollQuantum) * this.scroll.direction;\n      this.scrollValue += amount;\n\n      if (this.scroll.direction > 0) {\n        if (this.scrollValue >= this.scroll.target - epsilon) {\n          this.scrollValue = this.scroll.target;\n        }\n      } else {\n        if (this.scrollValue <= this.scroll.target + epsilon) {\n          this.scrollValue = this.scroll.target;\n        }\n      }\n\n      this._updateForScrollValue(this.scroll.direction);\n\n      const timeDiff = Date.now() - this.scroll.time;\n      // console.log(timeDiff, this.scrollValue, this.scroll.target);\n      if (this.scrollValue === this.scroll.target && timeDiff > 20) {\n        delete this.scroll;\n      }\n    }\n  }\n\n  // ----------\n  _updateForScrollValue(direction: number) {\n    if (this.viewer && this.scroll) {\n      for (let i = 0; i < this.framePath.length - 1; i++) {\n        const aIndex = i;\n        const bIndex = i + 1;\n        const a = this.framePath[aIndex];\n        const b = this.framePath[bIndex];\n        if (this.scrollValue >= a.scroll && this.scrollValue <= b.scroll) {\n          let newFrameIndex;\n          if (direction > 0) {\n            newFrameIndex = this.scrollValue === a.scroll ? aIndex : bIndex;\n          } else {\n            newFrameIndex = this.scrollValue === b.scroll ? bIndex : aIndex;\n          }\n\n          this.frameIndexHint = newFrameIndex;\n\n          const factor = mapLinear(this.scrollValue, a.scroll, b.scroll, 0, 1);\n\n          let earlierBounds, laterBounds;\n          if (this.scroll.startIndex === aIndex || this.scroll.startIndex === bIndex) {\n            if (direction > 0) {\n              earlierBounds = this.scroll.startBounds;\n              laterBounds = b.bounds;\n            } else {\n              earlierBounds = a.bounds;\n              laterBounds = this.scroll.startBounds;\n            }\n          } else {\n            this.scroll.startIndex = -1;\n            earlierBounds = a.bounds;\n            laterBounds = b.bounds;\n          }\n\n          const newBounds = new OpenSeadragon!.Rect(\n            mapLinear(factor, 0, 1, earlierBounds.x, laterBounds.x),\n            mapLinear(factor, 0, 1, earlierBounds.y, laterBounds.y),\n            mapLinear(factor, 0, 1, earlierBounds.width, laterBounds.width),\n            mapLinear(factor, 0, 1, earlierBounds.height, laterBounds.height)\n          );\n\n          this.viewer.viewport.fitBounds(newBounds, true);\n\n          break;\n        }\n      }\n    }\n  }\n\n  /** Determine if the frame navigation controls are currently able to be used to navigate */\n  getNavEnabled() {\n    return this.navEnabled;\n  }\n\n  /** Enable / Disable frame navigation controls */\n  setNavEnabled(flag: boolean) {\n    this.navEnabled = flag;\n    this.viewer?.setMouseNavEnabled(flag);\n  }\n\n  /** Navigate to a specific frame via its index number */\n  goToFrame(index: number) {\n    if (this.getFrameIndex() !== index) {\n      var frame = this.frames[index];\n      if (frame) {\n        this.frameIndexHint = index;\n\n        var box = this._getBoundsForFrame(frame);\n        this.viewer?.viewport.fitBounds(box);\n      }\n    }\n  }\n\n  // ----------\n  _getBoundsForFrame(frame: Frame) {\n    var bufferFactor = 0.2;\n    var box = frame.bounds.clone();\n\n    box.width *= 1 + bufferFactor;\n    box.height *= 1 + bufferFactor;\n    box.x -= frame.bounds.width * bufferFactor * 0.5;\n    box.y -= frame.bounds.height * bufferFactor * 0.5;\n    return box;\n  }\n\n  /** Get the currently active frame index. This will be whatever frame is in the middle of the\n  screen. If there is no frame in the middle, it'll be whatever frame the user last had there. */\n  getFrameIndex() {\n    return this.frameIndex;\n  }\n\n  // ----------\n  _figureFrameIndex(current: boolean) {\n    let bestIndex = -1;\n    let bestDistance = Infinity;\n    if (this.viewer) {\n      const viewportBounds = this.viewer.viewport.getBounds(current);\n      const viewportCenter = viewportBounds.getCenter();\n\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        const bounds = frame.bounds;\n\n        if (bounds.containsPoint(viewportCenter)) {\n          let distance;\n          if (this.frameIndexHint === -1) {\n            distance = viewportCenter.squaredDistanceTo(bounds.getCenter());\n          } else {\n            distance = Math.abs(this.frameIndexHint - i);\n          }\n\n          if (distance < bestDistance) {\n            bestDistance = distance;\n            bestIndex = i;\n          }\n        }\n      }\n    }\n\n    return bestIndex;\n  }\n\n  // ----------\n  _getHitFrame(point: OpenSeadragon.Point) {\n    let bestIndex = -1;\n\n    if (this.viewer) {\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        const bounds = frame.bounds;\n\n        if (bounds.containsPoint(point)) {\n          if (this.frameIndex === i) {\n            bestIndex = i;\n            break;\n          }\n\n          if (bestIndex === -1) {\n            bestIndex = i;\n          }\n        }\n      }\n    }\n\n    return bestIndex;\n  }\n\n  /** Return the total number of frames found in the comic sequence */\n  getFrameCount() {\n    return this.frames.length;\n  }\n\n  /** Return an object with information about the frame at the specified index */\n  getFrame(frameIndex: number): FrameInfo | null {\n    const frame = this.frames[frameIndex];\n    if (!frame) {\n      return null;\n    }\n\n    return {\n      bounds: frame.bounds.clone(),\n      images: frame.images.map((frameImage) => {\n        const imageItem = frameImage.imageItem;\n\n        return {\n          url: imageItem.url,\n          bounds: imageItem.bounds.clone(),\n          hideUntilFrame: imageItem.hideUntilFrame,\n          frameFillFactor: frameImage.frameFillFactor,\n          index: frameImage.imageIndex\n        };\n      })\n    };\n  }\n\n  /** Return the total number of images found in the comic */\n  getImageCount() {\n    return this.imageItems.length;\n  }\n\n  /** Navigate to the next frame in the sequence */\n  goToNextFrame() {\n    let index = this.getFrameIndex();\n    if (index < this.frames.length - 1) {\n      this.goToFrame(index + 1);\n    } else {\n      this.onNoNext({});\n    }\n  }\n\n  /** Navigate to the previous frame in the sequence */\n  goToPreviousFrame() {\n    let index = this.getFrameIndex();\n    if (index > 0) {\n      this.goToFrame(index - 1);\n    } else {\n      this.onNoPrevious({});\n    }\n  }\n}\n","// ----------\nexport function mapLinear(\n  x: number,\n  a1: number,\n  a2: number,\n  b1: number,\n  b2: number,\n  clamp?: boolean\n): number {\n  console.assert(a1 !== a2, 'a1 and a2 must be different');\n  var output = b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);\n  if (clamp) {\n    var min = Math.min(b1, b2);\n    var max = Math.max(b1, b2);\n    return Math.max(min, Math.min(max, output));\n  }\n\n  return output;\n}\n\n// ----------\nexport function vectorToPolar(x: number, y: number): { radians: number; distance: number } {\n  return {\n    radians: Math.atan2(y, x),\n    distance: Math.sqrt(x * x + y * y)\n  };\n}\n\n// ----------\nexport function polarToVector(radians: number, distance: number): { x: number; y: number } {\n  return {\n    x: Math.cos(radians) * distance,\n    y: Math.sin(radians) * distance\n  };\n}\n\n// ----------\nexport function clamp(x: number, min: number, max: number): number {\n  return Math.max(min, Math.min(max, x));\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}