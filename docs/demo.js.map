{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@dan503/load-js/index.js","src/demo/demo.ts","src/library/driftory.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChDA,iEAA2C;AAE3C,IAAM,UAAU,GAAG;IACjB,iCAAiC;IACjC,YAAY;IACZ,sBAAsB;CACvB,CAAC;AAEF,IAAI,UAAU,GAAG,CAAC,CAAC;AACnB,IAAI,QAAkB,CAAC;AAEvB,aAAa;AACb,SAAS,SAAS;IAChB,IAAM,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;IACzC,KAAK,CAAC,SAAS,CAAC;SACb,IAAI,CAAC,UAAC,QAAQ;QACb,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,SAAS,CAAC,CAAC;SAChD;QAED,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC,CAAC;SACD,IAAI,CAAC,UAAC,IAAI;QACT,qBAAqB;QACrB,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC;SACD,KAAK,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAApB,CAAoB,CAAC,CAAC;AAC5C,CAAC;AAED,aAAa;AACb,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE;IAC5C,6EAA6E;IAC7E,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,4BAA4B,CAA0B,CAAC;IAEhG,IAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;IAC5D,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACxD,IAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;IAClE,IAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC1D,IAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC1D,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACxD,IAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;IACrE,IAAM,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;IACvE,IAAM,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;IACvE,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACxD,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IAExD,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC9C,OAAO;KACR;IAED,QAAQ,GAAG,IAAI,kBAAQ,CAAC;QACtB,SAAS,WAAA;QACT,WAAW,EAAE;YACX,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACzB,CAAC;QACD,aAAa,EAAE,UAAC,EAA+B;gBAA7B,kBAAc,EAAd,UAAU,mBAAG,CAAC,KAAA,EAAE,WAAW,iBAAA;YAC3C,IAAI,SAAS,EAAE;gBACb,IAAI,IAAI,GAAG,YAAS,UAAU,GAAG,CAAC,CAAE,CAAC;gBACrC,IAAI,WAAW,EAAE;oBACf,IAAI,IAAI,gBAAgB,CAAC;iBAC1B;gBAED,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC;aAC9B;QACH,CAAC;QACD,QAAQ,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC5C,CAAC;QACD,YAAY,EAAE;YACZ,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QACpD,CAAC;KACF,CAAC,CAAC;IAEH,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,gBAAgB,CAAC,OAAO,EAAE;QACrC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,EAAE;IAEH,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,gBAAgB,CAAC,OAAO,EAAE;QACnC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE;IAEH,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,gBAAgB,CAAC,OAAO,EAAE;QACxC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;IAC/B,CAAC,EAAE;IAEH,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,gBAAgB,CAAC,OAAO,EAAE;QACpC,QAAQ,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC,EAAE;IAEH,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,gBAAgB,CAAC,OAAO,EAAE;QACpC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC,EAAE;IAEH,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,gBAAgB,CAAC,OAAO,EAAE;QACnC,IAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;QACvC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7B,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC;IAC9D,CAAC,EAAE;IAEH,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,gBAAgB,CAAC,OAAO,EAAE;QACzC,UAAU,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;QAClD,SAAS,EAAE,CAAC;IACd,CAAC,EAAE;IAEH,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,gBAAgB,CAAC,OAAO,EAAE;QAC1C,QAAQ,CAAC,UAAU,EAAE,CAAC;IACxB,CAAC,EAAE;IAEH,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,gBAAgB,CAAC,OAAO,EAAE;QAC1C,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC9B,IAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,MAAM,EAAE;gBACxB,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnC,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC5C,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;gBAC3B,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aAC9B;SACF;IACH,CAAC,EAAE;IAEH,SAAS,EAAE,CAAC;AACd,CAAC,CAAC,CAAC;;;;;;;;AC5HH,4DAAqC;AASrC,IAAI,aAA4C,CAAC;AACjD,IAAI,UAAkC,CAAC;AAQvC,IAAM,UAAU,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;IAC7C,UAAU,GAAG,EAAE,OAAO,SAAA,EAAE,MAAM,QAAA,EAAE,CAAC;AACnC,CAAC,CAAC,CAAC;AA+DH;IAgBE,aAAa;IACb,kBAAY,IAAuB;QAAnC,iBAuBC;QAlCD,eAAU,GAAqB,EAAE,CAAC;QAClC,WAAM,GAAiB,EAAE,CAAC;QAC1B,eAAU,GAAW,CAAC,CAAC,CAAC;QACxB,mBAAc,GAAW,CAAC,CAAC,CAAC;QAC5B,mBAAc,GAAW,CAAC,CAAC;QAC3B,gBAAW,GAAW,IAAI,CAAC;QAE3B,eAAU,GAAY,IAAI,CAAC;QAC3B,gBAAW,GAAY,KAAK,CAAC;QAI3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,cAAa,CAAC,CAAC;QAC1D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,cAAa,CAAC,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,cAAa,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,IAAI,cAAa,CAAC,CAAC;QAExD,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YACnC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,GAAG;SACvB;aAAM;YACL,8FAA8F;YAC9F,mCAAmC;YACnC,iBAAM,CACJ,yFAAyF,EACzF;gBACE,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;gBACrC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvB,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,GAAG;YACxB,CAAC,CACF,CAAC;SACH;IACH,CAAC;IAED,aAAa;IACb,8BAAW,GAAX,UAAY,EAAgC;QAA5C,iBA0GC;YA1Ga,SAAS,eAAA;QACrB,IAAI,CAAC,MAAM;YACT,aAAa;gBACb,aAAa,CAAC;oBACZ,OAAO,EAAE,SAAS;oBAClB,qBAAqB,EAAE,KAAK;oBAC5B,iBAAiB,EAAE,EAAE;oBACrB,oBAAoB,EAAE;wBACpB,WAAW,EAAE,KAAK;qBACnB;iBACF,CAAC,CAAC;QAEL,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAM,YAAY,GAAG;gBACnB,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE;oBACrB,OAAO;iBACR;gBAED,IAAM,UAAU,GAAG,KAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBACjD,IAAI,UAAU,KAAK,CAAC,CAAC,IAAI,UAAU,KAAK,KAAI,CAAC,UAAU,EAAE;oBACvD,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC7B,KAAI,CAAC,sBAAsB,EAAE,CAAC;oBAE9B,IAAI,KAAI,CAAC,aAAa,EAAE;wBACtB,KAAI,CAAC,aAAa,CAAC;4BACjB,UAAU,YAAA;4BACV,WAAW,EAAE,UAAU,KAAK,KAAI,CAAC,aAAa,EAAE,GAAG,CAAC;yBACrD,CAAC,CAAC;qBACJ;iBACF;YACH,CAAC,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAC7C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YAE5C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,UAAC,KAAK;gBAC3C,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAI,CAAC,MAAM,IAAI,CAAC,KAAI,CAAC,UAAU,EAAE;oBACjF,OAAO;iBACR;gBAED,IAAM,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAClE,IAAI,UAAU,GAAG,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC1C,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;oBACrB,IAAM,cAAc,GAAG,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBACpD,IAAI,cAAc,KAAK,CAAC,CAAC,IAAI,KAAI,CAAC,UAAU,KAAK,SAAS,EAAE;wBAC1D,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;qBACjC;yBAAM;wBACL,KAAI,CAAC,aAAa,EAAE,CAAC;qBACtB;iBACF;qBAAM,IAAI,UAAU,KAAK,KAAI,CAAC,UAAU,EAAE;oBACzC,KAAI,CAAC,aAAa,EAAE,CAAC;iBACtB;qBAAM;oBACL,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;iBAC5B;YACH,CAAC,CAAC,CAAC;YAEH,IAAM,uBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC;YACrE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,GAAG,UAAC,KAAK;;gBAC7C,IAAI,CAAC,KAAI,CAAC,UAAU,EAAE;oBACpB,2DAA2D;oBAC3D,OAAO,KAAK,CAAC;iBACd;gBAED,IACE,KAAK,CAAC,aAAa,CAAC,OAAO;oBAC3B,KAAK,CAAC,aAAa,CAAC,MAAM;oBAC1B,KAAK,CAAC,aAAa,CAAC,OAAO,EAC3B;oBACA,OAAO,uBAAqB,CAAC,IAAI,OAAC,KAAI,CAAC,MAAM,0CAAE,YAAY,EAAE,KAAK,CAAC,CAAC;iBACrE;gBAED,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACvB,6DAA6D;gBAC7D,IAAI,GAAG,GAAG,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,WAAW,EAAE;oBAChD,2DAA2D;oBAC3D,OAAO,KAAK,CAAC;iBACd;gBAED,KAAI,CAAC,cAAc,GAAG,GAAG,CAAC;gBAC1B,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;oBACpB,KAAI,CAAC,aAAa,EAAE,CAAC;iBACtB;qBAAM;oBACL,KAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC1B;gBAED,2DAA2D;gBAC3D,OAAO,KAAK,CAAC;YACf,CAAC,CAAC;YAEF,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,KAAK;gBACvC,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,CAAC,KAAI,CAAC,UAAU,EAAE;oBACxF,OAAO;iBACR;gBAED,IAAI,KAAK,CAAC,GAAG,KAAK,YAAY,IAAI,KAAK,CAAC,GAAG,KAAK,WAAW,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE;oBAChF,KAAI,CAAC,aAAa,EAAE,CAAC;iBACtB;qBAAM,IAAI,KAAK,CAAC,GAAG,KAAK,WAAW,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,EAAE;oBAC/D,KAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC1B;qBAAM;oBACL,OAAO;iBACR;gBAED,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAK,CAAC,eAAe,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,iCAAiC;IACjC,4BAAS,GAAT,UAAU,WAA2B;QAArC,iBAoHC;QAnHC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YAChD,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB;QAEO,IAAA,KAAK,GACX,CAAA,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAW,CAAC,CAAC,CAAC,WAAW,CAAA,MADvE,CACwE;QAErF,UAAU,CAAC,IAAI,CAAC;YACd,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC;YAElE,IAAI,KAAI,CAAC,MAAM,EAAE;gBACf,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;oBACrB,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK;wBACxC,OAAO;4BACL,MAAM,EAAE,EAAE;4BACV,MAAM,EAAE,IAAI,aAAc,CAAC,IAAI,CAC7B,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC,EACzB,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAC1B,KAAK,CAAC,KAAK,EACX,KAAK,CAAC,MAAM,CACb;yBACF,CAAC;oBACJ,CAAC,CAAC,CAAC;iBACJ;qBAAM;oBACL,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;wBACtC,OAAO;4BACL,MAAM,EAAE,EAAE;4BACV,MAAM,EAAE,IAAI,aAAc,CAAC,IAAI,CAC7B,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EACvB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EACxB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,MAAM,CACZ;yBACF,CAAC;oBACJ,CAAC,CAAC,CAAC;iBACJ;gBAED,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,CAAC;;oBAC/B,IAAM,SAAS,GAAc;wBAC3B,GAAG,EAAE,IAAI,CAAC,GAAG;wBACb,MAAM,EAAE,IAAI,aAAc,CAAC,IAAI,CAC7B,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EACvB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EACxB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,MAAM,CACZ;wBACD,cAAc,EAAE,IAAI,CAAC,cAAc;qBACpC,CAAC;oBAEF,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAEhC,MAAA,KAAI,CAAC,MAAM,0CAAE,aAAa,CAAC;wBACzB,OAAO,EAAE,IAAI;wBACb,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;wBACrB,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;wBACrB,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK;wBAC7B,OAAO,EAAE,UAAC,KAAU;4BAClB,SAAS,CAAC,UAAU,GAAG,KAAK,CAAC,IAAgC,CAAC;4BAC9D,KAAI,CAAC,sBAAsB,EAAE,CAAC;4BAE9B,IAAI,CAAC,KAAK,CAAC,EAAE;gCACX,KAAI,CAAC,WAAW,EAAE,CAAC;6BACpB;wBACH,CAAC;wBACD,UAAU,EAAE;4BACV,IAAI,EAAE,sBAAsB;4BAC5B,MAAM,EAAE;gCACN;oCACE,GAAG,EAAE,IAAI,CAAC,GAAG;oCACb,KAAK,EAAE,IAAI,CAAC,KAAK;oCACjB,MAAM,EAAE,IAAI,CAAC,MAAM;iCACpB;6BACF;yBACF;qBACF,EAAE;gBACL,CAAC,CAAC,CAAC;gBAEH,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,UAAU;oBACpC,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;oBAE3D,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS,EAAE,UAAU;wBAC5C,IAAI,CAAC,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC,cAAc,IAAI,UAAU,EAAE;4BACvE,IAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;4BACjE,IAAI,YAAY,EAAE;gCAChB,IAAM,IAAI,GAAG,YAAY,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC;gCAEtD,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,WAAA,EAAE,UAAU,YAAA,EAAE,eAAe,EAAE,IAAI,GAAG,SAAS,EAAE,CAAC,CAAC;6BACjF;yBACF;oBACH,CAAC,CAAC,CAAC;oBAEH,iGAAiG;oBACjG,6DAA6D;oBAC7D,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;wBACrB,IAAI,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC,eAAe,EAAE;4BACzC,OAAO,CAAC,CAAC,CAAC;yBACX;wBAED,IAAI,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC,eAAe,EAAE;4BACzC,OAAO,CAAC,CAAC;yBACV;wBAED,IAAI,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,EAAE;4BAC/B,OAAO,CAAC,CAAC,CAAC;yBACX;wBAED,IAAI,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,EAAE;4BAC/B,OAAO,CAAC,CAAC;yBACV;wBAED,OAAO,CAAC,CAAC;oBACX,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uCAAuC;IACvC,6BAAU,GAAV;;QACE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,MAAA,IAAI,CAAC,MAAM,0CAAE,KAAK,GAAG;IACvB,CAAC;IAED,aAAa;IACb,8BAAW,GAAX;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAElB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;SACtB;IACH,CAAC;IAED,aAAa;IACb,yCAAsB,GAAtB;QAAA,iBAMC;QALC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS;;YAChC,IAAI,SAAS,CAAC,cAAc,KAAK,SAAS,EAAE;gBAC1C,MAAA,SAAS,CAAC,UAAU,0CAAE,UAAU,CAAC,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;aACtF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,2FAA2F;IAC3F,gCAAa,GAAb;QACE,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,iDAAiD;IACjD,gCAAa,GAAb,UAAc,IAAa;;QACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,MAAA,IAAI,CAAC,MAAM,0CAAE,kBAAkB,CAAC,IAAI,EAAE;IACxC,CAAC;IAED,wDAAwD;IACxD,4BAAS,GAAT,UAAU,KAAa;;QACrB,IAAI,IAAI,CAAC,aAAa,EAAE,KAAK,KAAK,EAAE;YAClC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,YAAY,GAAG,GAAG,CAAC;YACvB,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;gBAE5B,IAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBAE/B,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,YAAY,CAAC;gBAC9B,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,YAAY,CAAC;gBAC/B,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,YAAY,GAAG,GAAG,CAAC;gBACjD,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,YAAY,GAAG,GAAG,CAAC;gBAElD,MAAA,IAAI,CAAC,MAAM,0CAAE,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;aACtC;SACF;IACH,CAAC;IAED;mGAC+F;IAC/F,gCAAa,GAAb;QACE,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,aAAa;IACb,oCAAiB,GAAjB,UAAkB,OAAgB;QAChC,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC;QACnB,IAAI,YAAY,GAAG,QAAQ,CAAC;QAC5B,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC/D,IAAM,cAAc,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC;YAElD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;gBAE5B,IAAI,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE;oBACxC,IAAI,IAAI,CAAC,cAAc,KAAK,CAAC,EAAE;wBAC7B,SAAS,GAAG,CAAC,CAAC;wBACd,MAAM;qBACP;oBAED,IAAM,QAAQ,GAAG,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;oBACtE,IAAI,QAAQ,GAAG,YAAY,EAAE;wBAC3B,YAAY,GAAG,QAAQ,CAAC;wBACxB,SAAS,GAAG,CAAC,CAAC;qBACf;iBACF;aACF;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,aAAa;IACb,+BAAY,GAAZ,UAAa,KAA0B;QACrC,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC;QAEnB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;gBAE5B,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;oBAC/B,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC,EAAE;wBACzB,SAAS,GAAG,CAAC,CAAC;wBACd,MAAM;qBACP;oBAED,IAAI,SAAS,KAAK,CAAC,CAAC,EAAE;wBACpB,SAAS,GAAG,CAAC,CAAC;qBACf;iBACF;aACF;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,oEAAoE;IACpE,gCAAa,GAAb;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5B,CAAC;IAED,+EAA+E;IAC/E,2BAAQ,GAAR,UAAS,UAAkB;QACzB,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,IAAI,CAAC;SACb;QAED,OAAO;YACL,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE;YAC5B,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,UAAU;gBAClC,IAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;gBAEvC,OAAO;oBACL,GAAG,EAAE,SAAS,CAAC,GAAG;oBAClB,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE;oBAChC,cAAc,EAAE,SAAS,CAAC,cAAc;oBACxC,eAAe,EAAE,UAAU,CAAC,eAAe;oBAC3C,KAAK,EAAE,UAAU,CAAC,UAAU;iBAC7B,CAAC;YACJ,CAAC,CAAC;SACH,CAAC;IACJ,CAAC;IAED,2DAA2D;IAC3D,gCAAa,GAAb;QACE,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;IAChC,CAAC;IAED,iDAAiD;IACjD,gCAAa,GAAb;QACE,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACjC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACnB;IACH,CAAC;IAED,qDAAqD;IACrD,oCAAiB,GAAjB;QACE,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACjC,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;SACvB;IACH,CAAC;IACH,eAAC;AAAD,CA5bA,AA4bC,IAAA","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar alreadyCalledScripts = [];\r\nvar allScripts = {};\r\nvar defaultScript = { hasLoaded: false, callbacks: [] };\r\nvar addCallback = function (src, callback) {\r\n    var script = allScripts[src];\r\n    if (!script)\r\n        return;\r\n    if (script.hasLoaded) {\r\n        // If the script has already been previously loaded, just run the callback immediately\r\n        callback();\r\n    }\r\n    else {\r\n        if (script.callbacks.length > 0) {\r\n            script.callbacks.push(callback);\r\n        }\r\n        else {\r\n            script.callbacks = [callback];\r\n        }\r\n    }\r\n};\r\nfunction loadJS(src, callback) {\r\n    var script = allScripts[src] || defaultScript;\r\n    allScripts[src] = script;\r\n    if (alreadyCalledScripts.indexOf(src) < 0) {\r\n        alreadyCalledScripts.push(src);\r\n        var $scriptElem = document.createElement('script');\r\n        $scriptElem.setAttribute('class', 'load-js-script');\r\n        $scriptElem.src = src;\r\n        $scriptElem.onload = function () {\r\n            addCallback(src, callback);\r\n            var updatedScript = allScripts[src];\r\n            if (updatedScript) {\r\n                updatedScript.hasLoaded = true;\r\n            }\r\n            for (var thisSource in allScripts) {\r\n                var thisScript = allScripts[thisSource] || defaultScript;\r\n                thisScript.callbacks.forEach(function (cb) { return cb(); });\r\n            }\r\n        };\r\n        document.head.appendChild($scriptElem);\r\n    }\r\n    else {\r\n        addCallback(src, callback);\r\n    }\r\n}\r\nexports.default = loadJS;\r\n","import Driftory from '../library/driftory';\n\nconst comicNames = [\n  // 'comic-hide-until-frame.json',\n  'comic.json',\n  'comic-no-frames.json'\n];\n\nlet comicIndex = 0;\nlet driftory: Driftory;\n\n// ----------\nfunction openComic() {\n  const comicName = comicNames[comicIndex];\n  fetch(comicName)\n    .then((response) => {\n      if (!response.ok) {\n        console.error(response);\n        throw new Error('Failed to load ' + comicName);\n      }\n\n      return response.json();\n    })\n    .then((json) => {\n      // console.log(json);\n      driftory.openComic(json);\n    })\n    .catch((error) => console.error(error));\n}\n\n// ----------\ndocument.addEventListener('DOMContentLoaded', () => {\n  // We need to cast this to HTMLDivElement because that's what Driftory needs.\n  const container = document.querySelector('.driftory-viewer-container') as HTMLDivElement | null;\n\n  const startButton = document.querySelector('.start-button');\n  const endButton = document.querySelector('.end-button');\n  const previousButton = document.querySelector('.previous-button');\n  const nextButton = document.querySelector('.next-button');\n  const hideButton = document.querySelector('.hide-button');\n  const navButton = document.querySelector('.nav-button');\n  const nextComicButton = document.querySelector('.next-comic-button');\n  const closeComicButton = document.querySelector('.close-comic-button');\n  const listImagesButton = document.querySelector('.list-images-button');\n  const frameInfo = document.querySelector('.frame-info');\n  const imageList = document.querySelector('.image-list');\n\n  if (!container) {\n    console.error('Cannot find viewer container');\n    return;\n  }\n\n  driftory = new Driftory({\n    container,\n    onComicLoad: () => {\n      console.log('loaded!');\n    },\n    onFrameChange: ({ frameIndex = 0, isLastFrame }) => {\n      if (frameInfo) {\n        let text = `Frame ${frameIndex + 1}`;\n        if (isLastFrame) {\n          text += ' (last frame!)';\n        }\n\n        frameInfo.textContent = text;\n      }\n    },\n    onNoNext: () => {\n      console.log('User trying to go past end');\n    },\n    onNoPrevious: () => {\n      console.log('User trying to go before beginning');\n    }\n  });\n\n  startButton?.addEventListener('click', () => {\n    driftory.goToFrame(0);\n  });\n\n  endButton?.addEventListener('click', () => {\n    driftory.goToFrame(driftory.getFrameCount() - 1);\n  });\n\n  previousButton?.addEventListener('click', () => {\n    driftory.goToPreviousFrame();\n  });\n\n  nextButton?.addEventListener('click', () => {\n    driftory.goToNextFrame();\n  });\n\n  hideButton?.addEventListener('click', () => {\n    container.classList.toggle('hide');\n  });\n\n  navButton?.addEventListener('click', () => {\n    const flag = !driftory.getNavEnabled();\n    driftory.setNavEnabled(flag);\n    navButton.textContent = flag ? 'disable nav' : 'enable nav';\n  });\n\n  nextComicButton?.addEventListener('click', () => {\n    comicIndex = (comicIndex + 1) % comicNames.length;\n    openComic();\n  });\n\n  closeComicButton?.addEventListener('click', () => {\n    driftory.closeComic();\n  });\n\n  listImagesButton?.addEventListener('click', () => {\n    const count = driftory.getFrameCount();\n    for (let i = 0; i < count; i++) {\n      const frame = driftory.getFrame(i);\n      if (frame?.images.length) {\n        const frameImage = frame.images[0];\n        const image = document.createElement('img');\n        image.src = frameImage.url;\n        imageList.appendChild(image);\n      }\n    }\n  });\n\n  openComic();\n});\n","import loadJs from '@dan503/load-js';\nimport { Comic } from './Comic.types';\nimport { OpenSeadragonType, ViewerType } from './openseadragon.types';\n\ninterface OsdRequest {\n  resolve: (value?: unknown) => void;\n  reject: (reason?: any) => void;\n}\n\nlet OpenSeadragon: OpenSeadragonType | undefined;\nlet osdRequest: OsdRequest | undefined;\n\ndeclare global {\n  interface Window {\n    OpenSeadragon: OpenSeadragonType;\n  }\n}\n\nconst osdPromise = new Promise((resolve, reject) => {\n  osdRequest = { resolve, reject };\n});\n\n// Part of the external API\ninterface ImageInfo {\n  url: string;\n  bounds: OpenSeadragon.Rect;\n  hideUntilFrame?: number;\n  index: number;\n  frameFillFactor: number;\n}\n\n// Part of the external API\ninterface FrameInfo {\n  images: Array<ImageInfo>;\n  bounds: OpenSeadragon.Rect;\n}\n\n// Used internally\ninterface ImageItem {\n  url: string;\n  bounds: OpenSeadragon.Rect;\n  hideUntilFrame?: number;\n  tiledImage?: OpenSeadragon.TiledImage;\n}\n\n// Used internally\ninterface FrameImage {\n  imageItem: ImageItem;\n  imageIndex: number;\n  frameFillFactor: number;\n}\n\ntype Frame = { images: Array<FrameImage>; bounds: OpenSeadragon.Rect };\ntype Container = HTMLElement;\ntype OnFrameChange = (params: { frameIndex: number; isLastFrame: boolean }) => void;\ntype OnComicLoad = (params: {}) => void;\ntype OnNoNext = (params: {}) => void;\ntype OnNoPrevious = (params: {}) => void;\n\nexport interface DriftoryArguments {\n  /** The HTML DOM element that the Driftory Comic will be rendered in.  */\n  container: Container;\n  /**\n   * This library has a dependency on the [OpenSeadragon](https://openseadragon.github.io/) library.\n   *\n   * By default, OpenSeadragon will be loaded from [the JS Deliver CDN](https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js)\n   * while initializing.\n   *\n   * To prevent this, you can use this parameter to provide your own instance of OpenSeaDragon instead.\n   *  */\n  OpenSeadragon?: OpenSeadragonType;\n  /** Called whenever driftory navigates to a new frame, whether via clicking, dragging, keys, or API. */\n  onFrameChange?: OnFrameChange;\n  /** Called when the comic has finished initializing. */\n  onComicLoad?: OnComicLoad;\n  /** Called when the user tries to navigate to the next frame in the sequence\n   *  but there are no frames left to navigate to. */\n  onNoNext?: OnNoNext;\n  /** Called when the user tries to navigate to the previous frame in the sequence\n   *  but there are no frames left to navigate to. */\n  onNoPrevious?: OnNoPrevious;\n}\n\nexport default class Driftory {\n  container: Container;\n  onFrameChange: OnFrameChange;\n  onComicLoad: OnComicLoad;\n  onNoNext: OnNoNext;\n  onNoPrevious: OnNoPrevious;\n  imageItems: Array<ImageItem> = [];\n  frames: Array<Frame> = [];\n  frameIndex: number = -1;\n  frameIndexHint: number = -1;\n  lastScrollTime: number = 0;\n  scrollDelay: number = 2000;\n  viewer?: ViewerType;\n  navEnabled: boolean = true;\n  comicLoaded: boolean = false;\n\n  // ----------\n  constructor(args: DriftoryArguments) {\n    this.container = args.container;\n    this.onFrameChange = args.onFrameChange || function () {};\n    this.onComicLoad = args.onComicLoad || function () {};\n    this.onNoNext = args.onNoNext || function () {};\n    this.onNoPrevious = args.onNoPrevious || function () {};\n\n    if (args.OpenSeadragon) {\n      OpenSeadragon = args.OpenSeadragon;\n      this._initialize(args);\n      osdRequest?.resolve();\n    } else {\n      // Note: loadJs only loads the file once, even if called multiple times, and always makes sure\n      // all of the callbacks are called.\n      loadJs(\n        'https://cdn.jsdelivr.net/npm/openseadragon@2.4/build/openseadragon/openseadragon.min.js',\n        () => {\n          OpenSeadragon = window.OpenSeadragon;\n          this._initialize(args);\n          osdRequest?.resolve();\n        }\n      );\n    }\n  }\n\n  // ----------\n  _initialize({ container }: DriftoryArguments) {\n    this.viewer =\n      OpenSeadragon &&\n      OpenSeadragon({\n        element: container,\n        showNavigationControl: false,\n        maxZoomPixelRatio: 10,\n        gestureSettingsMouse: {\n          clickToZoom: false\n        }\n      });\n\n    if (this.viewer) {\n      const frameHandler = () => {\n        if (!this.comicLoaded) {\n          return;\n        }\n\n        const frameIndex = this._figureFrameIndex(false);\n        if (frameIndex !== -1 && frameIndex !== this.frameIndex) {\n          this.frameIndex = frameIndex;\n          this._updateImageVisibility();\n\n          if (this.onFrameChange) {\n            this.onFrameChange({\n              frameIndex,\n              isLastFrame: frameIndex === this.getFrameCount() - 1\n            });\n          }\n        }\n      };\n\n      this.viewer.addHandler('zoom', frameHandler);\n      this.viewer.addHandler('pan', frameHandler);\n\n      this.viewer.addHandler('canvas-click', (event) => {\n        if (!event || !event.quick || !event.position || !this.viewer || !this.navEnabled) {\n          return;\n        }\n\n        const point = this.viewer.viewport.pointFromPixel(event.position);\n        let foundIndex = this._getHitFrame(point);\n        if (foundIndex === -1) {\n          const realFrameIndex = this._figureFrameIndex(true);\n          if (realFrameIndex === -1 && this.frameIndex !== undefined) {\n            this.goToFrame(this.frameIndex);\n          } else {\n            this.goToNextFrame();\n          }\n        } else if (foundIndex === this.frameIndex) {\n          this.goToNextFrame();\n        } else {\n          this.goToFrame(foundIndex);\n        }\n      });\n\n      const originalScrollHandler = this.viewer.innerTracker.scrollHandler;\n      this.viewer.innerTracker.scrollHandler = (event) => {\n        if (!this.navEnabled) {\n          // Returning false stops the browser from scrolling itself.\n          return false;\n        }\n\n        if (\n          event.originalEvent.ctrlKey ||\n          event.originalEvent.altKey ||\n          event.originalEvent.metaKey\n        ) {\n          return originalScrollHandler.call(this.viewer?.innerTracker, event);\n        }\n\n        const now = Date.now();\n        // console.log(event.scroll, now, now - this.lastScrollTime);\n        if (now - this.lastScrollTime < this.scrollDelay) {\n          // Returning false stops the browser from scrolling itself.\n          return false;\n        }\n\n        this.lastScrollTime = now;\n        if (event.scroll < 0) {\n          this.goToNextFrame();\n        } else {\n          this.goToPreviousFrame();\n        }\n\n        // Returning false stops the browser from scrolling itself.\n        return false;\n      };\n\n      window.addEventListener('keydown', (event) => {\n        if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey || !this.navEnabled) {\n          return;\n        }\n\n        if (event.key === 'ArrowRight' || event.key === 'ArrowDown' || event.key === ' ') {\n          this.goToNextFrame();\n        } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {\n          this.goToPreviousFrame();\n        } else {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n      });\n    }\n  }\n\n  /** Render the comic on screen */\n  openComic(unsafeComic: Comic | string) {\n    if (this.frames.length || this.imageItems.length) {\n      this.closeComic();\n    }\n\n    const { comic } =\n      typeof unsafeComic === 'string' ? (JSON.parse(unsafeComic) as Comic) : unsafeComic;\n\n    osdPromise.then(() => {\n      this.container.style.backgroundColor = comic.body.backgroundColor;\n\n      if (this.viewer) {\n        if (comic.body.frames) {\n          this.frames = comic.body.frames.map((frame) => {\n            return {\n              images: [],\n              bounds: new OpenSeadragon!.Rect(\n                frame.x - frame.width / 2,\n                frame.y - frame.height / 2,\n                frame.width,\n                frame.height\n              )\n            };\n          });\n        } else {\n          this.frames = comic.body.items.map((item) => {\n            return {\n              images: [],\n              bounds: new OpenSeadragon!.Rect(\n                item.x - item.width / 2,\n                item.y - item.height / 2,\n                item.width,\n                item.height\n              )\n            };\n          });\n        }\n\n        comic.body.items.forEach((item, i) => {\n          const imageItem: ImageItem = {\n            url: item.url,\n            bounds: new OpenSeadragon!.Rect(\n              item.x - item.width / 2,\n              item.y - item.height / 2,\n              item.width,\n              item.height\n            ),\n            hideUntilFrame: item.hideUntilFrame\n          };\n\n          this.imageItems.push(imageItem);\n\n          this.viewer?.addTiledImage({\n            preload: true,\n            x: imageItem.bounds.x,\n            y: imageItem.bounds.y,\n            width: imageItem.bounds.width,\n            success: (event: any) => {\n              imageItem.tiledImage = event.item as OpenSeadragon.TiledImage;\n              this._updateImageVisibility();\n\n              if (i === 0) {\n                this._startComic();\n              }\n            },\n            tileSource: {\n              type: 'legacy-image-pyramid',\n              levels: [\n                {\n                  url: item.url,\n                  width: item.width,\n                  height: item.height\n                }\n              ]\n            }\n          });\n        });\n\n        this.frames.forEach((frame, frameIndex) => {\n          const frameArea = frame.bounds.width * frame.bounds.height;\n\n          this.imageItems.forEach((imageItem, imageIndex) => {\n            if (!imageItem.hideUntilFrame || imageItem.hideUntilFrame <= frameIndex) {\n              const intersection = frame.bounds.intersection(imageItem.bounds);\n              if (intersection) {\n                const area = intersection.width * intersection.height;\n\n                frame.images.push({ imageItem, imageIndex, frameFillFactor: area / frameArea });\n              }\n            }\n          });\n\n          // Sort primary image first, based on how much it fills the frame. On a tie, prefer later images.\n          // TODO: Account for images hidden under other images better.\n          frame.images.sort((a, b) => {\n            if (a.frameFillFactor > b.frameFillFactor) {\n              return -1;\n            }\n\n            if (a.frameFillFactor < b.frameFillFactor) {\n              return 1;\n            }\n\n            if (a.imageIndex > b.imageIndex) {\n              return -1;\n            }\n\n            if (a.imageIndex < b.imageIndex) {\n              return 1;\n            }\n\n            return 0;\n          });\n        });\n      }\n    });\n  }\n\n  /** Remove the comic from the screen */\n  closeComic() {\n    this.imageItems = [];\n    this.frames = [];\n    this.frameIndex = -1;\n    this.frameIndexHint = -1;\n    this.lastScrollTime = 0;\n    this.comicLoaded = false;\n    this.viewer?.close();\n  }\n\n  // ----------\n  _startComic() {\n    this.comicLoaded = true;\n    this.goToFrame(0);\n\n    if (this.onComicLoad) {\n      this.onComicLoad({});\n    }\n  }\n\n  // ----------\n  _updateImageVisibility() {\n    this.imageItems.forEach((imageItem) => {\n      if (imageItem.hideUntilFrame !== undefined) {\n        imageItem.tiledImage?.setOpacity(this.frameIndex < imageItem.hideUntilFrame ? 0 : 1);\n      }\n    });\n  }\n\n  /** Determine if the frame navigation controls are currently able to be used to navigate */\n  getNavEnabled() {\n    return this.navEnabled;\n  }\n\n  /** Enable / Disable frame navigation controls */\n  setNavEnabled(flag: boolean) {\n    this.navEnabled = flag;\n    this.viewer?.setMouseNavEnabled(flag);\n  }\n\n  /** Navigate to a specific frame via its index number */\n  goToFrame(index: number) {\n    if (this.getFrameIndex() !== index) {\n      var frame = this.frames[index];\n      var bufferFactor = 0.2;\n      if (frame) {\n        this.frameIndexHint = index;\n\n        var box = frame.bounds.clone();\n\n        box.width *= 1 + bufferFactor;\n        box.height *= 1 + bufferFactor;\n        box.x -= frame.bounds.width * bufferFactor * 0.5;\n        box.y -= frame.bounds.height * bufferFactor * 0.5;\n\n        this.viewer?.viewport.fitBounds(box);\n      }\n    }\n  }\n\n  /** Get the currently active frame index. This will be whatever frame is in the middle of the\n  screen. If there is no frame in the middle, it'll be whatever frame the user last had there. */\n  getFrameIndex() {\n    return this.frameIndex;\n  }\n\n  // ----------\n  _figureFrameIndex(current: boolean) {\n    let bestIndex = -1;\n    let bestDistance = Infinity;\n    if (this.viewer) {\n      const viewportBounds = this.viewer.viewport.getBounds(current);\n      const viewportCenter = viewportBounds.getCenter();\n\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        const bounds = frame.bounds;\n\n        if (bounds.containsPoint(viewportCenter)) {\n          if (this.frameIndexHint === i) {\n            bestIndex = i;\n            break;\n          }\n\n          const distance = viewportCenter.squaredDistanceTo(bounds.getCenter());\n          if (distance < bestDistance) {\n            bestDistance = distance;\n            bestIndex = i;\n          }\n        }\n      }\n    }\n\n    return bestIndex;\n  }\n\n  // ----------\n  _getHitFrame(point: OpenSeadragon.Point) {\n    let bestIndex = -1;\n\n    if (this.viewer) {\n      for (let i = 0; i < this.frames.length; i++) {\n        const frame = this.frames[i];\n        const bounds = frame.bounds;\n\n        if (bounds.containsPoint(point)) {\n          if (this.frameIndex === i) {\n            bestIndex = i;\n            break;\n          }\n\n          if (bestIndex === -1) {\n            bestIndex = i;\n          }\n        }\n      }\n    }\n\n    return bestIndex;\n  }\n\n  /** Return the total number of frames found in the comic sequence */\n  getFrameCount() {\n    return this.frames.length;\n  }\n\n  /** Return an object with information about the frame at the specified index */\n  getFrame(frameIndex: number): FrameInfo | null {\n    const frame = this.frames[frameIndex];\n    if (!frame) {\n      return null;\n    }\n\n    return {\n      bounds: frame.bounds.clone(),\n      images: frame.images.map((frameImage) => {\n        const imageItem = frameImage.imageItem;\n\n        return {\n          url: imageItem.url,\n          bounds: imageItem.bounds.clone(),\n          hideUntilFrame: imageItem.hideUntilFrame,\n          frameFillFactor: frameImage.frameFillFactor,\n          index: frameImage.imageIndex\n        };\n      })\n    };\n  }\n\n  /** Return the total number of images found in the comic */\n  getImageCount() {\n    return this.imageItems.length;\n  }\n\n  /** Navigate to the next frame in the sequence */\n  goToNextFrame() {\n    let index = this.getFrameIndex();\n    if (index < this.frames.length - 1) {\n      this.goToFrame(index + 1);\n    } else {\n      this.onNoNext({});\n    }\n  }\n\n  /** Navigate to the previous frame in the sequence */\n  goToPreviousFrame() {\n    let index = this.getFrameIndex();\n    if (index > 0) {\n      this.goToFrame(index - 1);\n    } else {\n      this.onNoPrevious({});\n    }\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQGRhbjUwMy9sb2FkLWpzL2luZGV4LmpzIiwic3JjL2RlbW8vZGVtby50cyIsInNyYy9saWJyYXJ5L2RyaWZ0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNoREEsaUVBQTJDO0FBRTNDLElBQU0sVUFBVSxHQUFHO0lBQ2pCLGlDQUFpQztJQUNqQyxZQUFZO0lBQ1osc0JBQXNCO0NBQ3ZCLENBQUM7QUFFRixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDbkIsSUFBSSxRQUFrQixDQUFDO0FBRXZCLGFBQWE7QUFDYixTQUFTLFNBQVM7SUFDaEIsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pDLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDYixJQUFJLENBQUMsVUFBQyxRQUFRO1FBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUU7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QixNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLFVBQUMsSUFBSTtRQUNU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Q0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQjtJQUNILENBQUM7SUFFRCxxREFBcUQ7SUFDckQsb0NBQWlCLEdBQWpCO1FBQ0UsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ2pDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNCO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUNILGVBQUM7QUFBRCxDQTViQSxBQTRiQyxJQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGFscmVhZHlDYWxsZWRTY3JpcHRzID0gW107XHJcbnZhciBhbGxTY3JpcHRzID0ge307XHJcbnZhciBkZWZhdWx0U2NyaXB0ID0geyBoYXNMb2FkZWQ6IGZhbHNlLCBjYWxsYmFja3M6IFtdIH07XHJcbnZhciBhZGRDYWxsYmFjayA9IGZ1bmN0aW9uIChzcmMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgc2NyaXB0ID0gYWxsU2NyaXB0c1tzcmNdO1xyXG4gICAgaWYgKCFzY3JpcHQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKHNjcmlwdC5oYXNMb2FkZWQpIHtcclxuICAgICAgICAvLyBJZiB0aGUgc2NyaXB0IGhhcyBhbHJlYWR5IGJlZW4gcHJldmlvdXNseSBsb2FkZWQsIGp1c3QgcnVuIHRoZSBjYWxsYmFjayBpbW1lZGlhdGVseVxyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoc2NyaXB0LmNhbGxiYWNrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHNjcmlwdC5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzY3JpcHQuY2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGxvYWRKUyhzcmMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgc2NyaXB0ID0gYWxsU2NyaXB0c1tzcmNdIHx8IGRlZmF1bHRTY3JpcHQ7XHJcbiAgICBhbGxTY3JpcHRzW3NyY10gPSBzY3JpcHQ7XHJcbiAgICBpZiAoYWxyZWFkeUNhbGxlZFNjcmlwdHMuaW5kZXhPZihzcmMpIDwgMCkge1xyXG4gICAgICAgIGFscmVhZHlDYWxsZWRTY3JpcHRzLnB1c2goc3JjKTtcclxuICAgICAgICB2YXIgJHNjcmlwdEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICAkc2NyaXB0RWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2xvYWQtanMtc2NyaXB0Jyk7XHJcbiAgICAgICAgJHNjcmlwdEVsZW0uc3JjID0gc3JjO1xyXG4gICAgICAgICRzY3JpcHRFbGVtLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYWRkQ2FsbGJhY2soc3JjLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIHZhciB1cGRhdGVkU2NyaXB0ID0gYWxsU2NyaXB0c1tzcmNdO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlZFNjcmlwdCkge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlZFNjcmlwdC5oYXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIHRoaXNTb3VyY2UgaW4gYWxsU2NyaXB0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNTY3JpcHQgPSBhbGxTY3JpcHRzW3RoaXNTb3VyY2VdIHx8IGRlZmF1bHRTY3JpcHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzU2NyaXB0LmNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyByZXR1cm4gY2IoKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoJHNjcmlwdEVsZW0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWRkQ2FsbGJhY2soc3JjLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gbG9hZEpTO1xyXG4iLCJpbXBvcnQgRHJpZnRvcnkgZnJvbSAnLi4vbGlicmFyeS9kcmlmdG9yeSc7XG5cbmNvbnN0IGNvbWljTmFtZXMgPSBbXG4gIC8vICdjb21pYy1oaWRlLXVudGlsLWZyYW1lLmpzb24nLFxuICAnY29taWMuanNvbicsXG4gICdjb21pYy1uby1mcmFtZXMuanNvbidcbl07XG5cbmxldCBjb21pY0luZGV4ID0gMDtcbmxldCBkcmlmdG9yeTogRHJpZnRvcnk7XG5cbi8vIC0tLS0tLS0tLS1cbmZ1bmN0aW9uIG9wZW5Db21pYygpIHtcbiAgY29uc3QgY29taWNOYW1lID0gY29taWNOYW1lc1tjb21pY0luZGV4XTtcbiAgZmV0Y2goY29taWNOYW1lKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zb2xlLmVycm9yKHJlc3BvbnNlKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCAnICsgY29taWNOYW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9KVxuICAgIC50aGVuKChqc29uKSA9PiB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhqc29uKTtcbiAgICAgIGRyaWZ0b3J5Lm9wZW5Db21pYyhqc29uKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbn1cblxuLy8gLS0tLS0tLS0tLVxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgLy8gV2UgbmVlZCB0byBjYXN0IHRoaXMgdG8gSFRNTERpdkVsZW1lbnQgYmVjYXVzZSB0aGF0J3Mgd2hhdCBEcmlmdG9yeSBuZWVkcy5cbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRyaWZ0b3J5LXZpZXdlci1jb250YWluZXInKSBhcyBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG5cbiAgY29uc3Qgc3RhcnRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RhcnQtYnV0dG9uJyk7XG4gIGNvbnN0IGVuZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbmQtYnV0dG9uJyk7XG4gIGNvbnN0IHByZXZpb3VzQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZXZpb3VzLWJ1dHRvbicpO1xuICBjb25zdCBuZXh0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5leHQtYnV0dG9uJyk7XG4gIGNvbnN0IGhpZGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGlkZS1idXR0b24nKTtcbiAgY29uc3QgbmF2QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdi1idXR0b24nKTtcbiAgY29uc3QgbmV4dENvbWljQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5leHQtY29taWMtYnV0dG9uJyk7XG4gIGNvbnN0IGNsb3NlQ29taWNCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2xvc2UtY29taWMtYnV0dG9uJyk7XG4gIGNvbnN0IGxpc3RJbWFnZXNCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdC1pbWFnZXMtYnV0dG9uJyk7XG4gIGNvbnN0IGZyYW1lSW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mcmFtZS1pbmZvJyk7XG4gIGNvbnN0IGltYWdlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbWFnZS1saXN0Jyk7XG5cbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICBjb25zb2xlLmVycm9yKCdDYW5ub3QgZmluZCB2aWV3ZXIgY29udGFpbmVyJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZHJpZnRvcnkgPSBuZXcgRHJpZnRvcnkoe1xuICAgIGNvbnRhaW5lcixcbiAgICBvbkNvbWljTG9hZDogKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2xvYWRlZCEnKTtcbiAgICB9LFxuICAgIG9uRnJhbWVDaGFuZ2U6ICh7IGZyYW1lSW5kZXggPSAwLCBpc0xhc3RGcmFtZSB9KSA9PiB7XG4gICAgICBpZiAoZnJhbWVJbmZvKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gYEZyYW1lICR7ZnJhbWVJbmRleCArIDF9YDtcbiAgICAgICAgaWYgKGlzTGFzdEZyYW1lKSB7XG4gICAgICAgICAgdGV4dCArPSAnIChsYXN0IGZyYW1lISknO1xuICAgICAgICB9XG5cbiAgICAgICAgZnJhbWVJbmZvLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uTm9OZXh0OiAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnVXNlciB0cnlpbmcgdG8gZ28gcGFzdCBlbmQnKTtcbiAgICB9LFxuICAgIG9uTm9QcmV2aW91czogKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1VzZXIgdHJ5aW5nIHRvIGdvIGJlZm9yZSBiZWdpbm5pbmcnKTtcbiAgICB9XG4gIH0pO1xuXG4gIHN0YXJ0QnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBkcmlmdG9yeS5nb1RvRnJhbWUoMCk7XG4gIH0pO1xuXG4gIGVuZEJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgZHJpZnRvcnkuZ29Ub0ZyYW1lKGRyaWZ0b3J5LmdldEZyYW1lQ291bnQoKSAtIDEpO1xuICB9KTtcblxuICBwcmV2aW91c0J1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgZHJpZnRvcnkuZ29Ub1ByZXZpb3VzRnJhbWUoKTtcbiAgfSk7XG5cbiAgbmV4dEJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgZHJpZnRvcnkuZ29Ub05leHRGcmFtZSgpO1xuICB9KTtcblxuICBoaWRlQnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZScpO1xuICB9KTtcblxuICBuYXZCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IGZsYWcgPSAhZHJpZnRvcnkuZ2V0TmF2RW5hYmxlZCgpO1xuICAgIGRyaWZ0b3J5LnNldE5hdkVuYWJsZWQoZmxhZyk7XG4gICAgbmF2QnV0dG9uLnRleHRDb250ZW50ID0gZmxhZyA/ICdkaXNhYmxlIG5hdicgOiAnZW5hYmxlIG5hdic7XG4gIH0pO1xuXG4gIG5leHRDb21pY0J1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29taWNJbmRleCA9IChjb21pY0luZGV4ICsgMSkgJSBjb21pY05hbWVzLmxlbmd0aDtcbiAgICBvcGVuQ29taWMoKTtcbiAgfSk7XG5cbiAgY2xvc2VDb21pY0J1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgZHJpZnRvcnkuY2xvc2VDb21pYygpO1xuICB9KTtcblxuICBsaXN0SW1hZ2VzQnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb25zdCBjb3VudCA9IGRyaWZ0b3J5LmdldEZyYW1lQ291bnQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGZyYW1lID0gZHJpZnRvcnkuZ2V0RnJhbWUoaSk7XG4gICAgICBpZiAoZnJhbWU/LmltYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZnJhbWVJbWFnZSA9IGZyYW1lLmltYWdlc1swXTtcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgaW1hZ2Uuc3JjID0gZnJhbWVJbWFnZS51cmw7XG4gICAgICAgIGltYWdlTGlzdC5hcHBlbmRDaGlsZChpbWFnZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBvcGVuQ29taWMoKTtcbn0pO1xuIiwiaW1wb3J0IGxvYWRKcyBmcm9tICdAZGFuNTAzL2xvYWQtanMnO1xuaW1wb3J0IHsgQ29taWMgfSBmcm9tICcuL0NvbWljLnR5cGVzJztcbmltcG9ydCB7IE9wZW5TZWFkcmFnb25UeXBlLCBWaWV3ZXJUeXBlIH0gZnJvbSAnLi9vcGVuc2VhZHJhZ29uLnR5cGVzJztcblxuaW50ZXJmYWNlIE9zZFJlcXVlc3Qge1xuICByZXNvbHZlOiAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkO1xuICByZWplY3Q6IChyZWFzb24/OiBhbnkpID0+IHZvaWQ7XG59XG5cbmxldCBPcGVuU2VhZHJhZ29uOiBPcGVuU2VhZHJhZ29uVHlwZSB8IHVuZGVmaW5lZDtcbmxldCBvc2RSZXF1ZXN0OiBPc2RSZXF1ZXN0IHwgdW5kZWZpbmVkO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIE9wZW5TZWFkcmFnb246IE9wZW5TZWFkcmFnb25UeXBlO1xuICB9XG59XG5cbmNvbnN0IG9zZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gIG9zZFJlcXVlc3QgPSB7IHJlc29sdmUsIHJlamVjdCB9O1xufSk7XG5cbi8vIFBhcnQgb2YgdGhlIGV4dGVybmFsIEFQSVxuaW50ZXJmYWNlIEltYWdlSW5mbyB7XG4gIHVybDogc3RyaW5nO1xuICBib3VuZHM6IE9wZW5TZWFkcmFnb24uUmVjdDtcbiAgaGlkZVVudGlsRnJhbWU/OiBudW1iZXI7XG4gIGluZGV4OiBudW1iZXI7XG4gIGZyYW1lRmlsbEZhY3RvcjogbnVtYmVyO1xufVxuXG4vLyBQYXJ0IG9mIHRoZSBleHRlcm5hbCBBUElcbmludGVyZmFjZSBGcmFtZUluZm8ge1xuICBpbWFnZXM6IEFycmF5PEltYWdlSW5mbz47XG4gIGJvdW5kczogT3BlblNlYWRyYWdvbi5SZWN0O1xufVxuXG4vLyBVc2VkIGludGVybmFsbHlcbmludGVyZmFjZSBJbWFnZUl0ZW0ge1xuICB1cmw6IHN0cmluZztcbiAgYm91bmRzOiBPcGVuU2VhZHJhZ29uLlJlY3Q7XG4gIGhpZGVVbnRpbEZyYW1lPzogbnVtYmVyO1xuICB0aWxlZEltYWdlPzogT3BlblNlYWRyYWdvbi5UaWxlZEltYWdlO1xufVxuXG4vLyBVc2VkIGludGVybmFsbHlcbmludGVyZmFjZSBGcmFtZUltYWdlIHtcbiAgaW1hZ2VJdGVtOiBJbWFnZUl0ZW07XG4gIGltYWdlSW5kZXg6IG51bWJlcjtcbiAgZnJhbWVGaWxsRmFjdG9yOiBudW1iZXI7XG59XG5cbnR5cGUgRnJhbWUgPSB7IGltYWdlczogQXJyYXk8RnJhbWVJbWFnZT47IGJvdW5kczogT3BlblNlYWRyYWdvbi5SZWN0IH07XG50eXBlIENvbnRhaW5lciA9IEhUTUxFbGVtZW50O1xudHlwZSBPbkZyYW1lQ2hhbmdlID0gKHBhcmFtczogeyBmcmFtZUluZGV4OiBudW1iZXI7IGlzTGFzdEZyYW1lOiBib29sZWFuIH0pID0+IHZvaWQ7XG50eXBlIE9uQ29taWNMb2FkID0gKHBhcmFtczoge30pID0+IHZvaWQ7XG50eXBlIE9uTm9OZXh0ID0gKHBhcmFtczoge30pID0+IHZvaWQ7XG50eXBlIE9uTm9QcmV2aW91cyA9IChwYXJhbXM6IHt9KSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIERyaWZ0b3J5QXJndW1lbnRzIHtcbiAgLyoqIFRoZSBIVE1MIERPTSBlbGVtZW50IHRoYXQgdGhlIERyaWZ0b3J5IENvbWljIHdpbGwgYmUgcmVuZGVyZWQgaW4uICAqL1xuICBjb250YWluZXI6IENvbnRhaW5lcjtcbiAgLyoqXG4gICAqIFRoaXMgbGlicmFyeSBoYXMgYSBkZXBlbmRlbmN5IG9uIHRoZSBbT3BlblNlYWRyYWdvbl0oaHR0cHM6Ly9vcGVuc2VhZHJhZ29uLmdpdGh1Yi5pby8pIGxpYnJhcnkuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIE9wZW5TZWFkcmFnb24gd2lsbCBiZSBsb2FkZWQgZnJvbSBbdGhlIEpTIERlbGl2ZXIgQ0ROXShodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL29wZW5zZWFkcmFnb25AMi40L2J1aWxkL29wZW5zZWFkcmFnb24vb3BlbnNlYWRyYWdvbi5taW4uanMpXG4gICAqIHdoaWxlIGluaXRpYWxpemluZy5cbiAgICpcbiAgICogVG8gcHJldmVudCB0aGlzLCB5b3UgY2FuIHVzZSB0aGlzIHBhcmFtZXRlciB0byBwcm92aWRlIHlvdXIgb3duIGluc3RhbmNlIG9mIE9wZW5TZWFEcmFnb24gaW5zdGVhZC5cbiAgICogICovXG4gIE9wZW5TZWFkcmFnb24/OiBPcGVuU2VhZHJhZ29uVHlwZTtcbiAgLyoqIENhbGxlZCB3aGVuZXZlciBkcmlmdG9yeSBuYXZpZ2F0ZXMgdG8gYSBuZXcgZnJhbWUsIHdoZXRoZXIgdmlhIGNsaWNraW5nLCBkcmFnZ2luZywga2V5cywgb3IgQVBJLiAqL1xuICBvbkZyYW1lQ2hhbmdlPzogT25GcmFtZUNoYW5nZTtcbiAgLyoqIENhbGxlZCB3aGVuIHRoZSBjb21pYyBoYXMgZmluaXNoZWQgaW5pdGlhbGl6aW5nLiAqL1xuICBvbkNvbWljTG9hZD86IE9uQ29taWNMb2FkO1xuICAvKiogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG8gbmF2aWdhdGUgdG8gdGhlIG5leHQgZnJhbWUgaW4gdGhlIHNlcXVlbmNlXG4gICAqICBidXQgdGhlcmUgYXJlIG5vIGZyYW1lcyBsZWZ0IHRvIG5hdmlnYXRlIHRvLiAqL1xuICBvbk5vTmV4dD86IE9uTm9OZXh0O1xuICAvKiogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG8gbmF2aWdhdGUgdG8gdGhlIHByZXZpb3VzIGZyYW1lIGluIHRoZSBzZXF1ZW5jZVxuICAgKiAgYnV0IHRoZXJlIGFyZSBubyBmcmFtZXMgbGVmdCB0byBuYXZpZ2F0ZSB0by4gKi9cbiAgb25Ob1ByZXZpb3VzPzogT25Ob1ByZXZpb3VzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmlmdG9yeSB7XG4gIGNvbnRhaW5lcjogQ29udGFpbmVyO1xuICBvbkZyYW1lQ2hhbmdlOiBPbkZyYW1lQ2hhbmdlO1xuICBvbkNvbWljTG9hZDogT25Db21pY0xvYWQ7XG4gIG9uTm9OZXh0OiBPbk5vTmV4dDtcbiAgb25Ob1ByZXZpb3VzOiBPbk5vUHJldmlvdXM7XG4gIGltYWdlSXRlbXM6IEFycmF5PEltYWdlSXRlbT4gPSBbXTtcbiAgZnJhbWVzOiBBcnJheTxGcmFtZT4gPSBbXTtcbiAgZnJhbWVJbmRleDogbnVtYmVyID0gLTE7XG4gIGZyYW1lSW5kZXhIaW50OiBudW1iZXIgPSAtMTtcbiAgbGFzdFNjcm9sbFRpbWU6IG51bWJlciA9IDA7XG4gIHNjcm9sbERlbGF5OiBudW1iZXIgPSAyMDAwO1xuICB2aWV3ZXI/OiBWaWV3ZXJUeXBlO1xuICBuYXZFbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcbiAgY29taWNMb2FkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvLyAtLS0tLS0tLS0tXG4gIGNvbnN0cnVjdG9yKGFyZ3M6IERyaWZ0b3J5QXJndW1lbnRzKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBhcmdzLmNvbnRhaW5lcjtcbiAgICB0aGlzLm9uRnJhbWVDaGFuZ2UgPSBhcmdzLm9uRnJhbWVDaGFuZ2UgfHwgZnVuY3Rpb24gKCkge307XG4gICAgdGhpcy5vbkNvbWljTG9hZCA9IGFyZ3Mub25Db21pY0xvYWQgfHwgZnVuY3Rpb24gKCkge307XG4gICAgdGhpcy5vbk5vTmV4dCA9IGFyZ3Mub25Ob05leHQgfHwgZnVuY3Rpb24gKCkge307XG4gICAgdGhpcy5vbk5vUHJldmlvdXMgPSBhcmdzLm9uTm9QcmV2aW91cyB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIGlmIChhcmdzLk9wZW5TZWFkcmFnb24pIHtcbiAgICAgIE9wZW5TZWFkcmFnb24gPSBhcmdzLk9wZW5TZWFkcmFnb247XG4gICAgICB0aGlzLl9pbml0aWFsaXplKGFyZ3MpO1xuICAgICAgb3NkUmVxdWVzdD8ucmVzb2x2ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3RlOiBsb2FkSnMgb25seSBsb2FkcyB0aGUgZmlsZSBvbmNlLCBldmVuIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lcywgYW5kIGFsd2F5cyBtYWtlcyBzdXJlXG4gICAgICAvLyBhbGwgb2YgdGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkLlxuICAgICAgbG9hZEpzKFxuICAgICAgICAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9vcGVuc2VhZHJhZ29uQDIuNC9idWlsZC9vcGVuc2VhZHJhZ29uL29wZW5zZWFkcmFnb24ubWluLmpzJyxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIE9wZW5TZWFkcmFnb24gPSB3aW5kb3cuT3BlblNlYWRyYWdvbjtcbiAgICAgICAgICB0aGlzLl9pbml0aWFsaXplKGFyZ3MpO1xuICAgICAgICAgIG9zZFJlcXVlc3Q/LnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tXG4gIF9pbml0aWFsaXplKHsgY29udGFpbmVyIH06IERyaWZ0b3J5QXJndW1lbnRzKSB7XG4gICAgdGhpcy52aWV3ZXIgPVxuICAgICAgT3BlblNlYWRyYWdvbiAmJlxuICAgICAgT3BlblNlYWRyYWdvbih7XG4gICAgICAgIGVsZW1lbnQ6IGNvbnRhaW5lcixcbiAgICAgICAgc2hvd05hdmlnYXRpb25Db250cm9sOiBmYWxzZSxcbiAgICAgICAgbWF4Wm9vbVBpeGVsUmF0aW86IDEwLFxuICAgICAgICBnZXN0dXJlU2V0dGluZ3NNb3VzZToge1xuICAgICAgICAgIGNsaWNrVG9ab29tOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgY29uc3QgZnJhbWVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuY29taWNMb2FkZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcmFtZUluZGV4ID0gdGhpcy5fZmlndXJlRnJhbWVJbmRleChmYWxzZSk7XG4gICAgICAgIGlmIChmcmFtZUluZGV4ICE9PSAtMSAmJiBmcmFtZUluZGV4ICE9PSB0aGlzLmZyYW1lSW5kZXgpIHtcbiAgICAgICAgICB0aGlzLmZyYW1lSW5kZXggPSBmcmFtZUluZGV4O1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUltYWdlVmlzaWJpbGl0eSgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMub25GcmFtZUNoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5vbkZyYW1lQ2hhbmdlKHtcbiAgICAgICAgICAgICAgZnJhbWVJbmRleCxcbiAgICAgICAgICAgICAgaXNMYXN0RnJhbWU6IGZyYW1lSW5kZXggPT09IHRoaXMuZ2V0RnJhbWVDb3VudCgpIC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnZpZXdlci5hZGRIYW5kbGVyKCd6b29tJywgZnJhbWVIYW5kbGVyKTtcbiAgICAgIHRoaXMudmlld2VyLmFkZEhhbmRsZXIoJ3BhbicsIGZyYW1lSGFuZGxlcik7XG5cbiAgICAgIHRoaXMudmlld2VyLmFkZEhhbmRsZXIoJ2NhbnZhcy1jbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWV2ZW50IHx8ICFldmVudC5xdWljayB8fCAhZXZlbnQucG9zaXRpb24gfHwgIXRoaXMudmlld2VyIHx8ICF0aGlzLm5hdkVuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb2ludCA9IHRoaXMudmlld2VyLnZpZXdwb3J0LnBvaW50RnJvbVBpeGVsKGV2ZW50LnBvc2l0aW9uKTtcbiAgICAgICAgbGV0IGZvdW5kSW5kZXggPSB0aGlzLl9nZXRIaXRGcmFtZShwb2ludCk7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHJlYWxGcmFtZUluZGV4ID0gdGhpcy5fZmlndXJlRnJhbWVJbmRleCh0cnVlKTtcbiAgICAgICAgICBpZiAocmVhbEZyYW1lSW5kZXggPT09IC0xICYmIHRoaXMuZnJhbWVJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmdvVG9GcmFtZSh0aGlzLmZyYW1lSW5kZXgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdvVG9OZXh0RnJhbWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZm91bmRJbmRleCA9PT0gdGhpcy5mcmFtZUluZGV4KSB7XG4gICAgICAgICAgdGhpcy5nb1RvTmV4dEZyYW1lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5nb1RvRnJhbWUoZm91bmRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBvcmlnaW5hbFNjcm9sbEhhbmRsZXIgPSB0aGlzLnZpZXdlci5pbm5lclRyYWNrZXIuc2Nyb2xsSGFuZGxlcjtcbiAgICAgIHRoaXMudmlld2VyLmlubmVyVHJhY2tlci5zY3JvbGxIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5uYXZFbmFibGVkKSB7XG4gICAgICAgICAgLy8gUmV0dXJuaW5nIGZhbHNlIHN0b3BzIHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nIGl0c2VsZi5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5jdHJsS2V5IHx8XG4gICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkgfHxcbiAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50Lm1ldGFLZXlcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU2Nyb2xsSGFuZGxlci5jYWxsKHRoaXMudmlld2VyPy5pbm5lclRyYWNrZXIsIGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50LnNjcm9sbCwgbm93LCBub3cgLSB0aGlzLmxhc3RTY3JvbGxUaW1lKTtcbiAgICAgICAgaWYgKG5vdyAtIHRoaXMubGFzdFNjcm9sbFRpbWUgPCB0aGlzLnNjcm9sbERlbGF5KSB7XG4gICAgICAgICAgLy8gUmV0dXJuaW5nIGZhbHNlIHN0b3BzIHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nIGl0c2VsZi5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RTY3JvbGxUaW1lID0gbm93O1xuICAgICAgICBpZiAoZXZlbnQuc2Nyb2xsIDwgMCkge1xuICAgICAgICAgIHRoaXMuZ29Ub05leHRGcmFtZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZ29Ub1ByZXZpb3VzRnJhbWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHVybmluZyBmYWxzZSBzdG9wcyB0aGUgYnJvd3NlciBmcm9tIHNjcm9sbGluZyBpdHNlbGYuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5hbHRLZXkgfHwgZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8ICF0aGlzLm5hdkVuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnQXJyb3dSaWdodCcgfHwgZXZlbnQua2V5ID09PSAnQXJyb3dEb3duJyB8fCBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgICAgIHRoaXMuZ29Ub05leHRGcmFtZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJ0Fycm93TGVmdCcgfHwgZXZlbnQua2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgICAgICB0aGlzLmdvVG9QcmV2aW91c0ZyYW1lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKiogUmVuZGVyIHRoZSBjb21pYyBvbiBzY3JlZW4gKi9cbiAgb3BlbkNvbWljKHVuc2FmZUNvbWljOiBDb21pYyB8IHN0cmluZykge1xuICAgIGlmICh0aGlzLmZyYW1lcy5sZW5ndGggfHwgdGhpcy5pbWFnZUl0ZW1zLmxlbmd0aCkge1xuICAgICAgdGhpcy5jbG9zZUNvbWljKCk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjb21pYyB9ID1cbiAgICAgIHR5cGVvZiB1bnNhZmVDb21pYyA9PT0gJ3N0cmluZycgPyAoSlNPTi5wYXJzZSh1bnNhZmVDb21pYykgYXMgQ29taWMpIDogdW5zYWZlQ29taWM7XG5cbiAgICBvc2RQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29taWMuYm9keS5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgICBpZiAoY29taWMuYm9keS5mcmFtZXMpIHtcbiAgICAgICAgICB0aGlzLmZyYW1lcyA9IGNvbWljLmJvZHkuZnJhbWVzLm1hcCgoZnJhbWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGltYWdlczogW10sXG4gICAgICAgICAgICAgIGJvdW5kczogbmV3IE9wZW5TZWFkcmFnb24hLlJlY3QoXG4gICAgICAgICAgICAgICAgZnJhbWUueCAtIGZyYW1lLndpZHRoIC8gMixcbiAgICAgICAgICAgICAgICBmcmFtZS55IC0gZnJhbWUuaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICBmcmFtZS53aWR0aCxcbiAgICAgICAgICAgICAgICBmcmFtZS5oZWlnaHRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmZyYW1lcyA9IGNvbWljLmJvZHkuaXRlbXMubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBpbWFnZXM6IFtdLFxuICAgICAgICAgICAgICBib3VuZHM6IG5ldyBPcGVuU2VhZHJhZ29uIS5SZWN0KFxuICAgICAgICAgICAgICAgIGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyLFxuICAgICAgICAgICAgICAgIGl0ZW0ueSAtIGl0ZW0uaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICBpdGVtLndpZHRoLFxuICAgICAgICAgICAgICAgIGl0ZW0uaGVpZ2h0XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb21pYy5ib2R5Lml0ZW1zLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICBjb25zdCBpbWFnZUl0ZW06IEltYWdlSXRlbSA9IHtcbiAgICAgICAgICAgIHVybDogaXRlbS51cmwsXG4gICAgICAgICAgICBib3VuZHM6IG5ldyBPcGVuU2VhZHJhZ29uIS5SZWN0KFxuICAgICAgICAgICAgICBpdGVtLnggLSBpdGVtLndpZHRoIC8gMixcbiAgICAgICAgICAgICAgaXRlbS55IC0gaXRlbS5oZWlnaHQgLyAyLFxuICAgICAgICAgICAgICBpdGVtLndpZHRoLFxuICAgICAgICAgICAgICBpdGVtLmhlaWdodFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGhpZGVVbnRpbEZyYW1lOiBpdGVtLmhpZGVVbnRpbEZyYW1lXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRoaXMuaW1hZ2VJdGVtcy5wdXNoKGltYWdlSXRlbSk7XG5cbiAgICAgICAgICB0aGlzLnZpZXdlcj8uYWRkVGlsZWRJbWFnZSh7XG4gICAgICAgICAgICBwcmVsb2FkOiB0cnVlLFxuICAgICAgICAgICAgeDogaW1hZ2VJdGVtLmJvdW5kcy54LFxuICAgICAgICAgICAgeTogaW1hZ2VJdGVtLmJvdW5kcy55LFxuICAgICAgICAgICAgd2lkdGg6IGltYWdlSXRlbS5ib3VuZHMud2lkdGgsXG4gICAgICAgICAgICBzdWNjZXNzOiAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICBpbWFnZUl0ZW0udGlsZWRJbWFnZSA9IGV2ZW50Lml0ZW0gYXMgT3BlblNlYWRyYWdvbi5UaWxlZEltYWdlO1xuICAgICAgICAgICAgICB0aGlzLl91cGRhdGVJbWFnZVZpc2liaWxpdHkoKTtcblxuICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29taWMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpbGVTb3VyY2U6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2xlZ2FjeS1pbWFnZS1weXJhbWlkJyxcbiAgICAgICAgICAgICAgbGV2ZWxzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdXJsOiBpdGVtLnVybCxcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtLndpZHRoLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBpdGVtLmhlaWdodFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmZyYW1lcy5mb3JFYWNoKChmcmFtZSwgZnJhbWVJbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZyYW1lQXJlYSA9IGZyYW1lLmJvdW5kcy53aWR0aCAqIGZyYW1lLmJvdW5kcy5oZWlnaHQ7XG5cbiAgICAgICAgICB0aGlzLmltYWdlSXRlbXMuZm9yRWFjaCgoaW1hZ2VJdGVtLCBpbWFnZUluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWltYWdlSXRlbS5oaWRlVW50aWxGcmFtZSB8fCBpbWFnZUl0ZW0uaGlkZVVudGlsRnJhbWUgPD0gZnJhbWVJbmRleCkge1xuICAgICAgICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBmcmFtZS5ib3VuZHMuaW50ZXJzZWN0aW9uKGltYWdlSXRlbS5ib3VuZHMpO1xuICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJlYSA9IGludGVyc2VjdGlvbi53aWR0aCAqIGludGVyc2VjdGlvbi5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBmcmFtZS5pbWFnZXMucHVzaCh7IGltYWdlSXRlbSwgaW1hZ2VJbmRleCwgZnJhbWVGaWxsRmFjdG9yOiBhcmVhIC8gZnJhbWVBcmVhIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBTb3J0IHByaW1hcnkgaW1hZ2UgZmlyc3QsIGJhc2VkIG9uIGhvdyBtdWNoIGl0IGZpbGxzIHRoZSBmcmFtZS4gT24gYSB0aWUsIHByZWZlciBsYXRlciBpbWFnZXMuXG4gICAgICAgICAgLy8gVE9ETzogQWNjb3VudCBmb3IgaW1hZ2VzIGhpZGRlbiB1bmRlciBvdGhlciBpbWFnZXMgYmV0dGVyLlxuICAgICAgICAgIGZyYW1lLmltYWdlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBpZiAoYS5mcmFtZUZpbGxGYWN0b3IgPiBiLmZyYW1lRmlsbEZhY3Rvcikge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhLmZyYW1lRmlsbEZhY3RvciA8IGIuZnJhbWVGaWxsRmFjdG9yKSB7XG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYS5pbWFnZUluZGV4ID4gYi5pbWFnZUluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGEuaW1hZ2VJbmRleCA8IGIuaW1hZ2VJbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqIFJlbW92ZSB0aGUgY29taWMgZnJvbSB0aGUgc2NyZWVuICovXG4gIGNsb3NlQ29taWMoKSB7XG4gICAgdGhpcy5pbWFnZUl0ZW1zID0gW107XG4gICAgdGhpcy5mcmFtZXMgPSBbXTtcbiAgICB0aGlzLmZyYW1lSW5kZXggPSAtMTtcbiAgICB0aGlzLmZyYW1lSW5kZXhIaW50ID0gLTE7XG4gICAgdGhpcy5sYXN0U2Nyb2xsVGltZSA9IDA7XG4gICAgdGhpcy5jb21pY0xvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMudmlld2VyPy5jbG9zZSgpO1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLVxuICBfc3RhcnRDb21pYygpIHtcbiAgICB0aGlzLmNvbWljTG9hZGVkID0gdHJ1ZTtcbiAgICB0aGlzLmdvVG9GcmFtZSgwKTtcblxuICAgIGlmICh0aGlzLm9uQ29taWNMb2FkKSB7XG4gICAgICB0aGlzLm9uQ29taWNMb2FkKHt9KTtcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tXG4gIF91cGRhdGVJbWFnZVZpc2liaWxpdHkoKSB7XG4gICAgdGhpcy5pbWFnZUl0ZW1zLmZvckVhY2goKGltYWdlSXRlbSkgPT4ge1xuICAgICAgaWYgKGltYWdlSXRlbS5oaWRlVW50aWxGcmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGltYWdlSXRlbS50aWxlZEltYWdlPy5zZXRPcGFjaXR5KHRoaXMuZnJhbWVJbmRleCA8IGltYWdlSXRlbS5oaWRlVW50aWxGcmFtZSA/IDAgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBEZXRlcm1pbmUgaWYgdGhlIGZyYW1lIG5hdmlnYXRpb24gY29udHJvbHMgYXJlIGN1cnJlbnRseSBhYmxlIHRvIGJlIHVzZWQgdG8gbmF2aWdhdGUgKi9cbiAgZ2V0TmF2RW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5uYXZFbmFibGVkO1xuICB9XG5cbiAgLyoqIEVuYWJsZSAvIERpc2FibGUgZnJhbWUgbmF2aWdhdGlvbiBjb250cm9scyAqL1xuICBzZXROYXZFbmFibGVkKGZsYWc6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm5hdkVuYWJsZWQgPSBmbGFnO1xuICAgIHRoaXMudmlld2VyPy5zZXRNb3VzZU5hdkVuYWJsZWQoZmxhZyk7XG4gIH1cblxuICAvKiogTmF2aWdhdGUgdG8gYSBzcGVjaWZpYyBmcmFtZSB2aWEgaXRzIGluZGV4IG51bWJlciAqL1xuICBnb1RvRnJhbWUoaW5kZXg6IG51bWJlcikge1xuICAgIGlmICh0aGlzLmdldEZyYW1lSW5kZXgoKSAhPT0gaW5kZXgpIHtcbiAgICAgIHZhciBmcmFtZSA9IHRoaXMuZnJhbWVzW2luZGV4XTtcbiAgICAgIHZhciBidWZmZXJGYWN0b3IgPSAwLjI7XG4gICAgICBpZiAoZnJhbWUpIHtcbiAgICAgICAgdGhpcy5mcmFtZUluZGV4SGludCA9IGluZGV4O1xuXG4gICAgICAgIHZhciBib3ggPSBmcmFtZS5ib3VuZHMuY2xvbmUoKTtcblxuICAgICAgICBib3gud2lkdGggKj0gMSArIGJ1ZmZlckZhY3RvcjtcbiAgICAgICAgYm94LmhlaWdodCAqPSAxICsgYnVmZmVyRmFjdG9yO1xuICAgICAgICBib3gueCAtPSBmcmFtZS5ib3VuZHMud2lkdGggKiBidWZmZXJGYWN0b3IgKiAwLjU7XG4gICAgICAgIGJveC55IC09IGZyYW1lLmJvdW5kcy5oZWlnaHQgKiBidWZmZXJGYWN0b3IgKiAwLjU7XG5cbiAgICAgICAgdGhpcy52aWV3ZXI/LnZpZXdwb3J0LmZpdEJvdW5kcyhib3gpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgZnJhbWUgaW5kZXguIFRoaXMgd2lsbCBiZSB3aGF0ZXZlciBmcmFtZSBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZVxuICBzY3JlZW4uIElmIHRoZXJlIGlzIG5vIGZyYW1lIGluIHRoZSBtaWRkbGUsIGl0J2xsIGJlIHdoYXRldmVyIGZyYW1lIHRoZSB1c2VyIGxhc3QgaGFkIHRoZXJlLiAqL1xuICBnZXRGcmFtZUluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLmZyYW1lSW5kZXg7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tXG4gIF9maWd1cmVGcmFtZUluZGV4KGN1cnJlbnQ6IGJvb2xlYW4pIHtcbiAgICBsZXQgYmVzdEluZGV4ID0gLTE7XG4gICAgbGV0IGJlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuICAgIGlmICh0aGlzLnZpZXdlcikge1xuICAgICAgY29uc3Qgdmlld3BvcnRCb3VuZHMgPSB0aGlzLnZpZXdlci52aWV3cG9ydC5nZXRCb3VuZHMoY3VycmVudCk7XG4gICAgICBjb25zdCB2aWV3cG9ydENlbnRlciA9IHZpZXdwb3J0Qm91bmRzLmdldENlbnRlcigpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lID0gdGhpcy5mcmFtZXNbaV07XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IGZyYW1lLmJvdW5kcztcblxuICAgICAgICBpZiAoYm91bmRzLmNvbnRhaW5zUG9pbnQodmlld3BvcnRDZW50ZXIpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZnJhbWVJbmRleEhpbnQgPT09IGkpIHtcbiAgICAgICAgICAgIGJlc3RJbmRleCA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHZpZXdwb3J0Q2VudGVyLnNxdWFyZWREaXN0YW5jZVRvKGJvdW5kcy5nZXRDZW50ZXIoKSk7XG4gICAgICAgICAgaWYgKGRpc3RhbmNlIDwgYmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICBiZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgICAgIGJlc3RJbmRleCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJlc3RJbmRleDtcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS1cbiAgX2dldEhpdEZyYW1lKHBvaW50OiBPcGVuU2VhZHJhZ29uLlBvaW50KSB7XG4gICAgbGV0IGJlc3RJbmRleCA9IC0xO1xuXG4gICAgaWYgKHRoaXMudmlld2VyKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lID0gdGhpcy5mcmFtZXNbaV07XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IGZyYW1lLmJvdW5kcztcblxuICAgICAgICBpZiAoYm91bmRzLmNvbnRhaW5zUG9pbnQocG9pbnQpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZnJhbWVJbmRleCA9PT0gaSkge1xuICAgICAgICAgICAgYmVzdEluZGV4ID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChiZXN0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBiZXN0SW5kZXggPSBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiZXN0SW5kZXg7XG4gIH1cblxuICAvKiogUmV0dXJuIHRoZSB0b3RhbCBudW1iZXIgb2YgZnJhbWVzIGZvdW5kIGluIHRoZSBjb21pYyBzZXF1ZW5jZSAqL1xuICBnZXRGcmFtZUNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmZyYW1lcy5sZW5ndGg7XG4gIH1cblxuICAvKiogUmV0dXJuIGFuIG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBmcmFtZSBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ICovXG4gIGdldEZyYW1lKGZyYW1lSW5kZXg6IG51bWJlcik6IEZyYW1lSW5mbyB8IG51bGwge1xuICAgIGNvbnN0IGZyYW1lID0gdGhpcy5mcmFtZXNbZnJhbWVJbmRleF07XG4gICAgaWYgKCFmcmFtZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGJvdW5kczogZnJhbWUuYm91bmRzLmNsb25lKCksXG4gICAgICBpbWFnZXM6IGZyYW1lLmltYWdlcy5tYXAoKGZyYW1lSW1hZ2UpID0+IHtcbiAgICAgICAgY29uc3QgaW1hZ2VJdGVtID0gZnJhbWVJbWFnZS5pbWFnZUl0ZW07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1cmw6IGltYWdlSXRlbS51cmwsXG4gICAgICAgICAgYm91bmRzOiBpbWFnZUl0ZW0uYm91bmRzLmNsb25lKCksXG4gICAgICAgICAgaGlkZVVudGlsRnJhbWU6IGltYWdlSXRlbS5oaWRlVW50aWxGcmFtZSxcbiAgICAgICAgICBmcmFtZUZpbGxGYWN0b3I6IGZyYW1lSW1hZ2UuZnJhbWVGaWxsRmFjdG9yLFxuICAgICAgICAgIGluZGV4OiBmcmFtZUltYWdlLmltYWdlSW5kZXhcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBSZXR1cm4gdGhlIHRvdGFsIG51bWJlciBvZiBpbWFnZXMgZm91bmQgaW4gdGhlIGNvbWljICovXG4gIGdldEltYWdlQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1hZ2VJdGVtcy5sZW5ndGg7XG4gIH1cblxuICAvKiogTmF2aWdhdGUgdG8gdGhlIG5leHQgZnJhbWUgaW4gdGhlIHNlcXVlbmNlICovXG4gIGdvVG9OZXh0RnJhbWUoKSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5nZXRGcmFtZUluZGV4KCk7XG4gICAgaWYgKGluZGV4IDwgdGhpcy5mcmFtZXMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5nb1RvRnJhbWUoaW5kZXggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbk5vTmV4dCh7fSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIE5hdmlnYXRlIHRvIHRoZSBwcmV2aW91cyBmcmFtZSBpbiB0aGUgc2VxdWVuY2UgKi9cbiAgZ29Ub1ByZXZpb3VzRnJhbWUoKSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5nZXRGcmFtZUluZGV4KCk7XG4gICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgdGhpcy5nb1RvRnJhbWUoaW5kZXggLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbk5vUHJldmlvdXMoe30pO1xuICAgIH1cbiAgfVxufVxuIl19"}